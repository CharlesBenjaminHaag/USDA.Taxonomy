// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Identity.Client;

namespace USDA.ARS.GRIN.GRINGlobal.API.Data.Models;

public partial class gringlobalContext : DbContext
{
    public gringlobalContext(DbContextOptions<gringlobalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<citation> citation { get; set; }

    public virtual DbSet<code_value> code_value { get; set; }

    public virtual DbSet<code_value_lang> code_value_lang { get; set; }

    public virtual DbSet<geography> geography { get; set; }

    public virtual DbSet<geography_region_map> geography_region_map { get; set; }

    public virtual DbSet<literature> literature { get; set; }

    public virtual DbSet<taxonomy_alt_family_map> taxonomy_alt_family_map { get; set; }

    public virtual DbSet<taxonomy_attach> taxonomy_attach { get; set; }

    public virtual DbSet<taxonomy_author> taxonomy_author { get; set; }

    public virtual DbSet<taxonomy_classification> taxonomy_classification { get; set; }

    public virtual DbSet<taxonomy_common_name> taxonomy_common_name { get; set; }

    public virtual DbSet<taxonomy_common_name_language> taxonomy_common_name_language { get; set; }

    public virtual DbSet<taxonomy_crop_map> taxonomy_crop_map { get; set; }

    public virtual DbSet<taxonomy_cwr> taxonomy_cwr { get; set; }

    public virtual DbSet<taxonomy_cwr_crop> taxonomy_cwr_crop { get; set; }

    public virtual DbSet<taxonomy_cwr_map> taxonomy_cwr_map { get; set; }

    public virtual DbSet<taxonomy_cwr_priority> taxonomy_cwr_priority { get; set; }

    public virtual DbSet<taxonomy_cwr_trait> taxonomy_cwr_trait { get; set; }

    public virtual DbSet<taxonomy_economic_usage_type> taxonomy_economic_usage_type { get; set; }

    public virtual DbSet<taxonomy_family> taxonomy_family { get; set; }

    public virtual DbSet<taxonomy_family_map> taxonomy_family_map { get; set; }

    public virtual DbSet<taxonomy_folder> taxonomy_folder { get; set; }

    public virtual DbSet<taxonomy_folder_item_map> taxonomy_folder_item_map { get; set; }

    public virtual DbSet<taxonomy_genus> taxonomy_genus { get; set; }

    public virtual DbSet<taxonomy_geography_map> taxonomy_geography_map { get; set; }

    public virtual DbSet<taxonomy_ista_seed> taxonomy_ista_seed { get; set; }

    public virtual DbSet<taxonomy_ref_upov_crop> taxonomy_ref_upov_crop { get; set; }

    public virtual DbSet<taxonomy_regulation> taxonomy_regulation { get; set; }

    public virtual DbSet<taxonomy_regulation_map> taxonomy_regulation_map { get; set; }

    public virtual DbSet<taxonomy_species> taxonomy_species { get; set; }

    public virtual DbSet<taxonomy_species_synonym_map> taxonomy_species_synonym_map { get; set; }

    public virtual DbSet<taxonomy_species_upov> taxonomy_species_upov { get; set; }

    public virtual DbSet<taxonomy_subfamily> taxonomy_subfamily { get; set; }

    public virtual DbSet<taxonomy_subtribe> taxonomy_subtribe { get; set; }

    public virtual DbSet<taxonomy_tribe> taxonomy_tribe { get; set; }

    public virtual DbSet<taxonomy_upov_crop_map> taxonomy_upov_crop_map { get; set; }

    public virtual DbSet<taxonomy_use> taxonomy_use { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<citation>(entity =>
        {
            entity.HasKey(e => e.citation_id);

            entity.HasIndex(e => e.accession_id, "ndx_fk_ci_a");

            entity.HasIndex(e => e.accession_ipr_id, "ndx_fk_ci_aipr");

            entity.HasIndex(e => e.accession_pedigree_id, "ndx_fk_ci_ap");

            entity.HasIndex(e => e.created_by, "ndx_fk_ci_created");

            entity.HasIndex(e => e.genetic_marker_id, "ndx_fk_ci_gm");

            entity.HasIndex(e => e.literature_id, "ndx_fk_ci_l");

            entity.HasIndex(e => e.method_id, "ndx_fk_ci_m");

            entity.HasIndex(e => e.modified_by, "ndx_fk_ci_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_ci_owned");

            entity.HasIndex(e => e.taxonomy_family_id, "ndx_fk_ci_tf");

            entity.HasIndex(e => e.taxonomy_genus_id, "ndx_fk_ci_tg");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_ci_ts");

            entity.HasIndex(e => new { e.literature_id, e.citation_title, e.accession_id, e.method_id, e.taxonomy_species_id, e.taxonomy_genus_id, e.taxonomy_family_id, e.accession_ipr_id, e.accession_pedigree_id, e.genetic_marker_id, e.type_code, e.unique_key }, "ndx_uniq_cit").IsUnique();

            entity.Property(e => e.author_name).HasMaxLength(2000);
            entity.Property(e => e.citation_title).HasMaxLength(400);
            entity.Property(e => e.description).HasMaxLength(500);
            entity.Property(e => e.doi_reference).HasMaxLength(500);
            entity.Property(e => e.is_accepted_name)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.reference).HasMaxLength(200);
            entity.Property(e => e.title).HasMaxLength(500);
            entity.Property(e => e.type_code).HasMaxLength(20);
            entity.Property(e => e.url).HasMaxLength(500);

            entity.HasOne(d => d.literature).WithMany(p => p.citation)
                .HasForeignKey(d => d.literature_id)
                .HasConstraintName("fk_ci_l");

            entity.HasOne(d => d.taxonomy_family).WithMany(p => p.citation)
                .HasForeignKey(d => d.taxonomy_family_id)
                .HasConstraintName("fk_ci_tf");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.citation)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .HasConstraintName("fk_ci_tg");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.citation)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("fk_ci_ts");
        });

        modelBuilder.Entity<code_value>(entity =>
        {
            entity.HasKey(e => e.code_value_id);

            entity.HasIndex(e => e.group_name, "ndx_fk_cdval_cdgrp");

            entity.HasIndex(e => e.created_by, "ndx_fk_cdval_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_cdval_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_cdval_owned");

            entity.HasIndex(e => new { e.group_name, e.value }, "ndx_uniq_cv").IsUnique();

            entity.Property(e => e.group_name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.value)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<code_value_lang>(entity =>
        {
            entity.HasKey(e => e.code_value_lang_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_cvl_created");

            entity.HasIndex(e => e.code_value_id, "ndx_fk_cvl_cv");

            entity.HasIndex(e => e.modified_by, "ndx_fk_cvl_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_cvl_owned");

            entity.HasIndex(e => e.sys_lang_id, "ndx_fk_cvl_sl");

            entity.HasIndex(e => new { e.code_value_id, e.sys_lang_id }, "ndx_uniq_cvl").IsUnique();

            entity.Property(e => e.title)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.code_value).WithMany(p => p.code_value_lang)
                .HasForeignKey(d => d.code_value_id)
                .HasConstraintName("fk_cvl_cv");
        });

        modelBuilder.Entity<geography>(entity =>
        {
            entity.HasKey(e => e.geography_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_g_created");

            entity.HasIndex(e => e.current_geography_id, "ndx_fk_g_cur_g");

            entity.HasIndex(e => e.modified_by, "ndx_fk_g_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_g_owned");

            entity.HasIndex(e => e.adm1, "ndx_g_adm1");

            entity.HasIndex(e => e.adm2, "ndx_g_adm2");

            entity.HasIndex(e => e.adm3, "ndx_g_adm3");

            entity.HasIndex(e => e.adm4, "ndx_g_adm4");

            entity.HasIndex(e => e.country_code, "ndx_g_country_code");

            entity.HasIndex(e => new { e.country_code, e.adm1, e.adm1_type_code, e.adm2, e.adm3, e.adm4 }, "ndx_uniq_geo").IsUnique();

            entity.Property(e => e.adm1).HasMaxLength(100);
            entity.Property(e => e.adm1_abbrev).HasMaxLength(10);
            entity.Property(e => e.adm1_type_code).HasMaxLength(20);
            entity.Property(e => e.adm2).HasMaxLength(50);
            entity.Property(e => e.adm2_abbrev).HasMaxLength(10);
            entity.Property(e => e.adm2_type_code).HasMaxLength(20);
            entity.Property(e => e.adm3).HasMaxLength(50);
            entity.Property(e => e.adm3_abbrev).HasMaxLength(10);
            entity.Property(e => e.adm3_type_code).HasMaxLength(20);
            entity.Property(e => e.adm4).HasMaxLength(50);
            entity.Property(e => e.adm4_abbrev).HasMaxLength(10);
            entity.Property(e => e.adm4_type_code).HasMaxLength(20);
            entity.Property(e => e.country_code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.is_valid)
                .IsRequired()
                .HasMaxLength(1);

            entity.HasOne(d => d.current_geography).WithMany(p => p.Inversecurrent_geography)
                .HasForeignKey(d => d.current_geography_id)
                .HasConstraintName("fk_g_cur_g");
        });

        modelBuilder.Entity<geography_region_map>(entity =>
        {
            entity.HasKey(e => e.geography_region_map_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_grm_created");

            entity.HasIndex(e => e.geography_id, "ndx_fk_grm_g");

            entity.HasIndex(e => e.modified_by, "ndx_fk_grm_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_grm_owned");

            entity.HasIndex(e => e.region_id, "ndx_fk_grm_r");

            entity.HasIndex(e => new { e.geography_id, e.region_id }, "ndx_uniq_grm").IsUnique();

            entity.HasOne(d => d.geography).WithMany(p => p.geography_region_map)
                .HasForeignKey(d => d.geography_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_grm_g");
        });

        modelBuilder.Entity<literature>(entity =>
        {
            entity.HasKey(e => e.literature_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_l_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_l_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_l_owned");

            entity.HasIndex(e => e.abbreviation, "ndx_uniq_l").IsUnique();

            entity.Property(e => e.abbreviation)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.editor_author_name).HasMaxLength(2000);
            entity.Property(e => e.literature_type_code).HasMaxLength(20);
            entity.Property(e => e.publication_year).HasMaxLength(50);
            entity.Property(e => e.publisher_location).HasMaxLength(2000);
            entity.Property(e => e.publisher_name).HasMaxLength(2000);
            entity.Property(e => e.reference_title).HasMaxLength(2000);
            entity.Property(e => e.standard_abbreviation).HasMaxLength(2000);
            entity.Property(e => e.url).HasMaxLength(500);
        });

        modelBuilder.Entity<taxonomy_alt_family_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_alt_family_map_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tafm_created");

            entity.HasIndex(e => e.taxonomy_family_id, "ndx_fk_tafm_f");

            entity.HasIndex(e => e.taxonomy_genus_id, "ndx_fk_tafm_g");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tafm_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tafm_owned");

            entity.HasIndex(e => new { e.taxonomy_genus_id, e.taxonomy_family_id }, "ndx_uniq_tafm").IsUnique();

            entity.HasOne(d => d.taxonomy_family).WithMany(p => p.taxonomy_alt_family_map)
                .HasForeignKey(d => d.taxonomy_family_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tafm_f");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.taxonomy_alt_family_map)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tafm_g");
        });

        modelBuilder.Entity<taxonomy_attach>(entity =>
        {
            entity.HasKey(e => e.taxonomy_attach_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tat_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tat_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tat_owned");

            entity.HasIndex(e => e.taxonomy_family_id, "ndx_fk_tat_tf");

            entity.HasIndex(e => e.taxonomy_genus_id, "ndx_fk_tat_tg");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tat_ts");

            entity.HasIndex(e => new { e.taxonomy_family_id, e.taxonomy_genus_id, e.taxonomy_species_id, e.virtual_path }, "ndx_uniq_tat").IsUnique();

            entity.Property(e => e.category_code).HasMaxLength(20);
            entity.Property(e => e.content_type).HasMaxLength(100);
            entity.Property(e => e.copyright_information).HasMaxLength(100);
            entity.Property(e => e.description).HasMaxLength(500);
            entity.Property(e => e.is_web_visible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y");
            entity.Property(e => e.thumbnail_virtual_path).HasMaxLength(255);
            entity.Property(e => e.title).HasMaxLength(500);
            entity.Property(e => e.virtual_path)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.taxonomy_family).WithMany(p => p.taxonomy_attach)
                .HasForeignKey(d => d.taxonomy_family_id)
                .HasConstraintName("fk_tat_tf");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.taxonomy_attach)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .HasConstraintName("fk_tat_tg");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_attach)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("fk_tat_ts");
        });

        modelBuilder.Entity<taxonomy_author>(entity =>
        {
            entity.HasKey(e => e.taxonomy_author_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_ta_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_ta_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_ta_owned");

            entity.HasIndex(e => e.short_name_expanded_diacritic, "ndx_ta_name");

            entity.HasIndex(e => e.short_name, "ndx_uniq_ta").IsUnique();

            entity.Property(e => e.full_name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.full_name_expanded_diacritic).HasMaxLength(100);
            entity.Property(e => e.short_name)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.short_name_expanded_diacritic).HasMaxLength(30);
        });

        modelBuilder.Entity<taxonomy_classification>(entity =>
        {
            entity.HasKey(e => e.taxonomy_classification_id);

            entity.Property(e => e.classification_name).HasMaxLength(250);
            entity.Property(e => e.created_date).HasColumnType("datetime");
            entity.Property(e => e.modified_date).HasColumnType("datetime");
            entity.Property(e => e.owned_date).HasColumnType("datetime");
        });

        modelBuilder.Entity<taxonomy_common_name>(entity =>
        {
            entity.HasKey(e => e.taxonomy_common_name_id);

            entity.HasIndex(e => e.name, "ndx_cn_name");

            entity.HasIndex(e => e.simplified_name, "ndx_cn_simplified_name");

            entity.HasIndex(e => e.created_by, "ndx_fk_tcn_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcn_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcn_owned");

            entity.HasIndex(e => e.taxonomy_genus_id, "ndx_fk_tcn_tg");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tcn_ts");

            entity.HasIndex(e => new { e.taxonomy_genus_id, e.taxonomy_species_id, e.language_description, e.name, e.citation_id }, "ndx_uniq_tcn").IsUnique();

            entity.Property(e => e.alternate_transcription).HasMaxLength(100);
            entity.Property(e => e.language_description).HasMaxLength(100);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.simplified_name).HasMaxLength(100);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_common_name)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tcn_cit");

            entity.HasOne(d => d.geography).WithMany(p => p.taxonomy_common_name)
                .HasForeignKey(d => d.geography_id)
                .HasConstraintName("fk_tcn_g");

            entity.HasOne(d => d.taxonomy_common_name_language).WithMany(p => p.taxonomy_common_name)
                .HasForeignKey(d => d.taxonomy_common_name_language_id)
                .HasConstraintName("FK_taxonomy_common_name_taxonomy_common_name_language");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.taxonomy_common_name)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .HasConstraintName("fk_tcn_tg");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_common_name)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("fk_tcn_ts");
        });

        modelBuilder.Entity<taxonomy_common_name_language>(entity =>
        {
            entity.HasKey(e => e.taxonomy_common_name_language_id);

            entity.Property(e => e.country_code).HasMaxLength(20);
            entity.Property(e => e.language_name).HasMaxLength(120);
            entity.Property(e => e.language_simplified_name).HasMaxLength(120);
            entity.Property(e => e.language_transcription).HasMaxLength(120);
        });

        modelBuilder.Entity<taxonomy_crop_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_crop_map_id);

            entity.HasIndex(e => e.crop_id, "ndx_fk_tcm_cr");

            entity.HasIndex(e => e.created_by, "ndx_fk_tcm_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcm_modfied");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcm_owned");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tcm_ts");

            entity.HasIndex(e => new { e.taxonomy_species_id, e.crop_id, e.alternate_crop_name, e.common_crop_name, e.is_primary_genepool, e.is_secondary_genepool, e.is_tertiary_genepool, e.is_quaternary_genepool, e.is_graftstock_genepool }, "ndx_uniq_tcm").IsUnique();

            entity.Property(e => e.alternate_crop_name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.common_crop_name).HasMaxLength(100);
            entity.Property(e => e.crop_genepool_reviewers).HasMaxLength(500);
            entity.Property(e => e.is_graftstock_genepool)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("N");
            entity.Property(e => e.is_primary_genepool)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_quaternary_genepool)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_secondary_genepool)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_tertiary_genepool)
                .IsRequired()
                .HasMaxLength(1);

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_crop_map)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("fk_tcm_ts");
        });

        modelBuilder.Entity<taxonomy_cwr>(entity =>
        {
            entity.HasKey(e => e.taxonomy_cwr_id);

            entity.HasIndex(e => e.citation_id, "ndx_fk_tcwr_c");

            entity.HasIndex(e => e.created_by, "ndx_fk_tcwr_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcwr_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcwr_owned");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tcwr_ts");

            entity.HasIndex(e => new { e.taxonomy_species_id, e.display_name, e.citation_id, e.crop_name, e.crop_common_name, e.genepool_code, e.is_graftstock_genepool, e.is_potential, e.ontology_trait_identifier, e.breeding_type_code }, "ndx_uniq_tcwr").IsUnique();

            entity.Property(e => e.breeding_type_code).HasMaxLength(20);
            entity.Property(e => e.breeding_usage).HasMaxLength(1000);
            entity.Property(e => e.crop_common_name).HasMaxLength(100);
            entity.Property(e => e.crop_name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.display_name).HasMaxLength(100);
            entity.Property(e => e.genepool_code).HasMaxLength(20);
            entity.Property(e => e.is_crop)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_graftstock_genepool)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("N");
            entity.Property(e => e.is_potential)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.ontology_trait_identifier).HasMaxLength(20);
            entity.Property(e => e.trait_class_code).HasMaxLength(20);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_cwr)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tcwr_cit");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_cwr)
                .HasForeignKey(d => d.taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tcwr_ts");
        });

        modelBuilder.Entity<taxonomy_cwr_crop>(entity =>
        {
            entity.HasKey(e => e.taxonomy_cwr_crop_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tcc_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcc_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcc_owned");

            entity.HasIndex(e => e.crop_name, "ndx_uniq_tcc").IsUnique();

            entity.Property(e => e.crop_name).HasMaxLength(150);
        });

        modelBuilder.Entity<taxonomy_cwr_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_cwr_map_id);

            entity.HasIndex(e => e.citation_id, "ndx_fk_tcwrm_cit");

            entity.HasIndex(e => e.created_by, "ndx_fk_tcwrm_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcwrm_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcwrm_owned");

            entity.HasIndex(e => e.taxonomy_cwr_crop_id, "ndx_fk_tcwrm_tc");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tcwrm_ts");

            entity.HasIndex(e => new { e.taxonomy_species_id, e.taxonomy_cwr_crop_id, e.citation_id, e.genepool_code, e.is_graftstock, e.is_potential }, "ndx_uniq_tcwrm").IsUnique();

            entity.Property(e => e.crop_common_name).HasMaxLength(100);
            entity.Property(e => e.genepool_code).HasMaxLength(20);
            entity.Property(e => e.is_crop)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_graftstock)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_potential)
                .IsRequired()
                .HasMaxLength(1);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_cwr_map)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tcwrm_cit");

            entity.HasOne(d => d.taxonomy_cwr_crop).WithMany(p => p.taxonomy_cwr_map)
                .HasForeignKey(d => d.taxonomy_cwr_crop_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tcwrm_tc");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_cwr_map)
                .HasForeignKey(d => d.taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tcwrm_ts");
        });

        modelBuilder.Entity<taxonomy_cwr_priority>(entity =>
        {
            entity.HasKey(e => e.taxonomy_cwr_priority_id);

            entity.HasIndex(e => e.citation_id, "ndx_fk_tcwrp_cit");

            entity.HasIndex(e => e.created_by, "ndx_fk_tcwrp_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcwrp_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcwrp_owned");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tcwrp_ts");

            entity.HasIndex(e => new { e.taxonomy_species_id, e.priority_year, e.status_code }, "ndx_uniq_tcwrp").IsUnique();

            entity.Property(e => e.ex_situ_code).HasMaxLength(20);
            entity.Property(e => e.in_situ_code).HasMaxLength(20);
            entity.Property(e => e.status_code)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_cwr_priority)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tcwrp_cit");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_cwr_priority)
                .HasForeignKey(d => d.taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tcwrp_ts");
        });

        modelBuilder.Entity<taxonomy_cwr_trait>(entity =>
        {
            entity.HasKey(e => e.taxonomy_cwr_trait_id);

            entity.HasIndex(e => e.citation_id, "ndx_fk_tcwrt_cit");

            entity.HasIndex(e => e.created_by, "ndx_fk_tcwrt_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tcwrt_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tcwrt_owned");

            entity.HasIndex(e => e.taxonomy_cwr_map_id, "ndx_fk_tcwrt_tcc");

            entity.HasIndex(e => new { e.taxonomy_cwr_map_id, e.citation_id, e.ontology_trait_identifier, e.breeding_type_code, e.is_potential }, "ndx_uniq_tcwrt").IsUnique();

            entity.Property(e => e.breeding_type_code).HasMaxLength(20);
            entity.Property(e => e.breeding_usage_note).HasMaxLength(1000);
            entity.Property(e => e.is_potential)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.ontology_trait_identifier).HasMaxLength(20);
            entity.Property(e => e.trait_class_code).HasMaxLength(20);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_cwr_trait)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tcwrt_cit");

            entity.HasOne(d => d.taxonomy_cwr_map).WithMany(p => p.taxonomy_cwr_trait)
                .HasForeignKey(d => d.taxonomy_cwr_map_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tcwrt_tc");
        });

        modelBuilder.Entity<taxonomy_economic_usage_type>(entity =>
        {
            entity.HasKey(e => e.taxonomy_economic_usage_type_id).HasName("PK_economic_taxonomy_usage_type");

            entity.Property(e => e.economic_usage_code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.usage_type).HasMaxLength(100);
        });

        modelBuilder.Entity<taxonomy_family>(entity =>
        {
            entity.HasKey(e => e.taxonomy_family_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tf_created");

            entity.HasIndex(e => e.current_taxonomy_family_id, "ndx_fk_tf_cur_tf");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tf_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tf_owned");

            entity.HasIndex(e => e.alternate_name, "ndx_tf_alt_name");

            entity.HasIndex(e => e.family_name, "ndx_tf_name");

            entity.HasIndex(e => new { e.family_name, e.family_authority, e.subfamily_name, e.tribe_name, e.subtribe_name }, "ndx_uniq_tf").IsUnique();

            entity.Property(e => e.alternate_name).HasMaxLength(25);
            entity.Property(e => e.family_authority).HasMaxLength(100);
            entity.Property(e => e.family_name)
                .IsRequired()
                .HasMaxLength(25);
            entity.Property(e => e.family_type_code).HasMaxLength(20);
            entity.Property(e => e.subfamily_name).HasMaxLength(25);
            entity.Property(e => e.subtribe_name).HasMaxLength(25);
            entity.Property(e => e.suprafamily_rank_code).HasMaxLength(20);
            entity.Property(e => e.suprafamily_rank_name).HasMaxLength(100);
            entity.Property(e => e.tribe_name).HasMaxLength(25);

            entity.HasOne(d => d.current_taxonomy_family).WithMany(p => p.Inversecurrent_taxonomy_family)
                .HasForeignKey(d => d.current_taxonomy_family_id)
                .HasConstraintName("fk_tf_cur_tf");

            entity.HasOne(d => d.type_taxonomy_genus).WithMany(p => p.taxonomy_family)
                .HasForeignKey(d => d.type_taxonomy_genus_id)
                .HasConstraintName("fk_tf_tg");
        });

        modelBuilder.Entity<taxonomy_family_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_family_map_id);

            entity.Property(e => e.authority).HasMaxLength(250);
            entity.Property(e => e.created_date).HasColumnType("datetime");
            entity.Property(e => e.modified_date).HasColumnType("datetime");
            entity.Property(e => e.owned_date).HasColumnType("datetime");
        });

        modelBuilder.Entity<taxonomy_folder>(entity =>
        {
            entity.HasKey(e => e.taxonomy_folder_id);

            entity.Property(e => e.category).HasMaxLength(120);
            entity.Property(e => e.created_date)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.data_source_name).HasMaxLength(150);
            entity.Property(e => e.data_source_title).HasMaxLength(150);
            entity.Property(e => e.is_favorite).HasDefaultValue(false);
            entity.Property(e => e.modified_date).HasColumnType("datetime");
            entity.Property(e => e.note).HasMaxLength(2000);
            entity.Property(e => e.title)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<taxonomy_folder_item_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_folder_item_id).HasName("PK_taxonomy_folder_item");

            entity.Property(e => e.created_date)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.data_source).HasMaxLength(150);

            entity.HasOne(d => d.taxonomy_folder).WithMany(p => p.taxonomy_folder_item_map)
                .HasForeignKey(d => d.taxonomy_folder_id)
                .HasConstraintName("FK_taxonomy_folder_item_taxonomy_folder");
        });

        modelBuilder.Entity<taxonomy_genus>(entity =>
        {
            entity.HasKey(e => e.taxonomy_genus_id);

            entity.HasIndex(e => e.current_taxonomy_genus_id, "fk_tg_cur_tg");

            entity.HasIndex(e => e.created_by, "ndx_fk_tg_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tg_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tg_owned");

            entity.HasIndex(e => e.taxonomy_family_id, "ndx_fk_tg_tf");

            entity.HasIndex(e => e.genus_name, "ndx_tg_name");

            entity.HasIndex(e => new { e.taxonomy_family_id, e.genus_name, e.genus_authority, e.subgenus_name, e.section_name, e.subsection_name, e.series_name, e.subseries_name }, "ndx_uniq_tg").IsUnique();

            entity.Property(e => e.genus_authority).HasMaxLength(100);
            entity.Property(e => e.genus_name)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.hybrid_code).HasMaxLength(20);
            entity.Property(e => e.is_web_visible)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.qualifying_code).HasMaxLength(20);
            entity.Property(e => e.section_name).HasMaxLength(30);
            entity.Property(e => e.series_name).HasMaxLength(30);
            entity.Property(e => e.subgenus_name).HasMaxLength(30);
            entity.Property(e => e.subsection_name).HasMaxLength(30);
            entity.Property(e => e.subseries_name).HasMaxLength(30);

            entity.HasOne(d => d.current_taxonomy_genus).WithMany(p => p.Inversecurrent_taxonomy_genus)
                .HasForeignKey(d => d.current_taxonomy_genus_id)
                .HasConstraintName("fk_tg_cur_tgt");

            entity.HasOne(d => d.taxonomy_familyNavigation).WithMany(p => p.taxonomy_genus)
                .HasForeignKey(d => d.taxonomy_family_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tg_tf");
        });

        modelBuilder.Entity<taxonomy_geography_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_geography_map_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tgm_created");

            entity.HasIndex(e => e.geography_id, "ndx_fk_tgm_g");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tgm_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tgm_owned");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tgm_ts");

            entity.HasIndex(e => new { e.taxonomy_species_id, e.geography_id, e.geography_status_code, e.citation_id }, "ndx_uniq_tgm").IsUnique();

            entity.Property(e => e.geography_status_code).HasMaxLength(20);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_geography_map)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tgm_cit");

            entity.HasOne(d => d.geography).WithMany(p => p.taxonomy_geography_map)
                .HasForeignKey(d => d.geography_id)
                .HasConstraintName("fk_tgm_g");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_geography_map)
                .HasForeignKey(d => d.taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tgm_ts");
        });

        modelBuilder.Entity<taxonomy_ista_seed>(entity =>
        {
            entity.HasKey(e => e.taxonomy_ista_seed_id).HasName("PK_taxonomy_upov_seed");

            entity.Property(e => e.TEMP_UPOV).HasMaxLength(50);
            entity.Property(e => e.comment).HasMaxLength(250);
            entity.Property(e => e.created_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.family_name_2).HasMaxLength(50);
            entity.Property(e => e.modified_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.name_status).HasMaxLength(20);
            entity.Property(e => e.note).HasMaxLength(250);
            entity.Property(e => e.owned_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.primary_family_name).HasMaxLength(50);
            entity.Property(e => e.url).HasMaxLength(250);

            entity.HasOne(d => d.alternate_family_id_1Navigation).WithMany(p => p.taxonomy_ista_seedalternate_family_id_1Navigation)
                .HasForeignKey(d => d.alternate_family_id_1)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_family1");

            entity.HasOne(d => d.alternate_family_id_2Navigation).WithMany(p => p.taxonomy_ista_seedalternate_family_id_2Navigation)
                .HasForeignKey(d => d.alternate_family_id_2)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_family2");

            entity.HasOne(d => d.alternate_family_id_3Navigation).WithMany(p => p.taxonomy_ista_seedalternate_family_id_3Navigation)
                .HasForeignKey(d => d.alternate_family_id_3)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_family3");

            entity.HasOne(d => d.primary_family).WithMany(p => p.taxonomy_ista_seedprimary_family)
                .HasForeignKey(d => d.primary_family_id)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_family");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.taxonomy_ista_seed)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_genus");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_ista_seed)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_species");

            entity.HasOne(d => d.taxonomy_upov_crop).WithMany(p => p.taxonomy_ista_seed)
                .HasForeignKey(d => d.taxonomy_upov_crop_id)
                .HasConstraintName("FK_taxonomy_ista_seed_taxonomy_ref_upov_crop");
        });

        modelBuilder.Entity<taxonomy_ref_upov_crop>(entity =>
        {
            entity.HasKey(e => e.taxonomy_ref_upov_crop_id);

            entity.Property(e => e.created_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.modified_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.owned_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.upov_code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.url).HasMaxLength(250);
        });

        modelBuilder.Entity<taxonomy_regulation>(entity =>
        {
            entity.HasKey(e => e.taxonomy_regulation_id).HasName("PK_taxonomy_regulation_level");

            entity.HasIndex(e => e.created_by, "ndx_fk_tr_created");

            entity.HasIndex(e => e.geography_id, "ndx_fk_tr_g");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tr_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tr_owned");

            entity.HasIndex(e => new { e.geography_id, e.regulation_type_code, e.regulation_level_code }, "ndx_uniq_tr").IsUnique();

            entity.Property(e => e.description).HasMaxLength(80);
            entity.Property(e => e.regulation_level_code).HasMaxLength(20);
            entity.Property(e => e.regulation_type_code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.url_1).HasMaxLength(250);
            entity.Property(e => e.url_2).HasMaxLength(250);

            entity.HasOne(d => d.geography).WithMany(p => p.taxonomy_regulation)
                .HasForeignKey(d => d.geography_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tr_g");
        });

        modelBuilder.Entity<taxonomy_regulation_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_regulation_map_id).HasName("PK_taxonomy_regulation");

            entity.ToTable(tb => tb.HasTrigger("trg_taxonomy_regulation_map_insert"));

            entity.HasIndex(e => e.created_by, "ndx_fk_trm_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_trm_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_trm_owned");

            entity.HasIndex(e => e.taxonomy_family_id, "ndx_trm_taxonomy_family");

            entity.HasIndex(e => e.taxonomy_genus_id, "ndx_trm_taxonomy_genus");

            entity.HasIndex(e => e.taxonomy_regulation_id, "ndx_trm_taxonomy_regulation");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_trm_taxonomy_species");

            entity.HasIndex(e => new { e.taxonomy_family_id, e.taxonomy_genus_id, e.taxonomy_species_id, e.taxonomy_regulation_id }, "ndx_uniq_trm").IsUnique();

            entity.Property(e => e.is_exempt)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("N");

            entity.HasOne(d => d.taxonomy_family).WithMany(p => p.taxonomy_regulation_map)
                .HasForeignKey(d => d.taxonomy_family_id)
                .HasConstraintName("fk_trm_tf");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.taxonomy_regulation_map)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .HasConstraintName("fk_trm_tg");

            entity.HasOne(d => d.taxonomy_regulation).WithMany(p => p.taxonomy_regulation_map)
                .HasForeignKey(d => d.taxonomy_regulation_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_trm_tr");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_regulation_map)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("fk_trm_ts");
        });

        modelBuilder.Entity<taxonomy_species>(entity =>
        {
            entity.HasKey(e => e.taxonomy_species_id);

            entity.HasIndex(e => e.verifier_cooperator_id, "ndx_fk_ts_c");

            entity.HasIndex(e => e.created_by, "ndx_fk_ts_created");

            entity.HasIndex(e => e.current_taxonomy_species_id, "ndx_fk_ts_cur_t");

            entity.HasIndex(e => e.modified_by, "ndx_fk_ts_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_ts_owned");

            entity.HasIndex(e => e.priority1_site_id, "ndx_fk_ts_s");

            entity.HasIndex(e => e.priority2_site_id, "ndx_fk_ts_s2");

            entity.HasIndex(e => e.taxonomy_genus_id, "ndx_fk_ts_tg");

            entity.HasIndex(e => e.name, "ndx_ts_name");

            entity.HasIndex(e => e.nomen_number, "ndx_ts_nomen");

            entity.HasIndex(e => e.species_name, "ndx_ts_s_name");

            entity.HasIndex(e => new { e.taxonomy_genus_id, e.name, e.name_authority, e.protologue, e.synonym_code }, "ndx_uniq_ts").IsUnique();

            entity.Property(e => e.alternate_name).HasMaxLength(2000);
            entity.Property(e => e.common_fertilization_code).HasMaxLength(20);
            entity.Property(e => e.forma_authority).HasMaxLength(100);
            entity.Property(e => e.forma_name).HasMaxLength(30);
            entity.Property(e => e.forma_rank_type).HasMaxLength(30);
            entity.Property(e => e.hybrid_parentage).HasMaxLength(500);
            entity.Property(e => e.is_forma_hybrid)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_name_pending)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_specific_hybrid)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_subspecific_hybrid)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_subvarietal_hybrid)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_varietal_hybrid)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.is_web_visible)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.life_form_code).HasMaxLength(20);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.name_authority).HasMaxLength(100);
            entity.Property(e => e.protologue).HasMaxLength(500);
            entity.Property(e => e.protologue_virtual_path).HasMaxLength(255);
            entity.Property(e => e.restriction_code).HasMaxLength(20);
            entity.Property(e => e.species_authority).HasMaxLength(100);
            entity.Property(e => e.species_name)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.subspecies_authority).HasMaxLength(100);
            entity.Property(e => e.subspecies_name).HasMaxLength(30);
            entity.Property(e => e.subvariety_authority).HasMaxLength(100);
            entity.Property(e => e.subvariety_name).HasMaxLength(30);
            entity.Property(e => e.synonym_code).HasMaxLength(20);
            entity.Property(e => e.variety_authority).HasMaxLength(100);
            entity.Property(e => e.variety_name).HasMaxLength(30);

            entity.HasOne(d => d.current_taxonomy_species).WithMany(p => p.Inversecurrent_taxonomy_species)
                .HasForeignKey(d => d.current_taxonomy_species_id)
                .HasConstraintName("FK_taxonomy_species_taxonomy_species");

            entity.HasOne(d => d.taxonomy_genus).WithMany(p => p.taxonomy_species)
                .HasForeignKey(d => d.taxonomy_genus_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ts_tg");
        });

        modelBuilder.Entity<taxonomy_species_synonym_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_species_synonym_map_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tssm_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tssm_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tssm_owned");

            entity.HasIndex(e => e.taxona_taxonomy_species_id, "ndx_fk_tssm_tsa");

            entity.HasIndex(e => e.taxonb_taxonomy_species_id, "ndx_fk_tssm_tsb");

            entity.HasIndex(e => new { e.taxona_taxonomy_species_id, e.synonym_code, e.taxonb_taxonomy_species_id }, "ndx_uniq_tssm").IsUnique();

            entity.Property(e => e.synonym_code)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.taxona_taxonomy_species).WithMany(p => p.taxonomy_species_synonym_maptaxona_taxonomy_species)
                .HasForeignKey(d => d.taxona_taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tssm_tsa");

            entity.HasOne(d => d.taxonb_taxonomy_species).WithMany(p => p.taxonomy_species_synonym_maptaxonb_taxonomy_species)
                .HasForeignKey(d => d.taxonb_taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tssm_tsb");
        });

        modelBuilder.Entity<taxonomy_species_upov>(entity =>
        {
            entity.HasKey(e => e.taxonomy_species_upov_id);

            entity.Property(e => e.other_botanical_name)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.principal_botanical_name)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.upov_code).HasMaxLength(100);

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_species_upov)
                .HasForeignKey(d => d.taxonomy_species_id)
                .HasConstraintName("FK_taxonomy_species_upov_taxonomy_species");
        });

        modelBuilder.Entity<taxonomy_subfamily>(entity =>
        {
            entity.HasKey(e => e.taxonomy_subfamily_id);

            entity.Property(e => e.created_date).HasColumnType("datetime");
            entity.Property(e => e.modified_date).HasColumnType("datetime");
            entity.Property(e => e.owned_date).HasColumnType("datetime");
            entity.Property(e => e.subfamily_authority).HasMaxLength(250);
            entity.Property(e => e.subfamily_name).HasMaxLength(250);
        });

        modelBuilder.Entity<taxonomy_subtribe>(entity =>
        {
            entity.HasKey(e => e.taxonomy_subtribe_id);

            entity.Property(e => e.created_date).HasColumnType("datetime");
            entity.Property(e => e.modified_date).HasColumnType("datetime");
            entity.Property(e => e.owned_date).HasColumnType("datetime");
            entity.Property(e => e.subtribe_authority).HasMaxLength(250);
            entity.Property(e => e.subtribe_name).HasMaxLength(250);
        });

        modelBuilder.Entity<taxonomy_tribe>(entity =>
        {
            entity.HasKey(e => e.taxonomy_tribe_id);

            entity.Property(e => e.created_date).HasColumnType("datetime");
            entity.Property(e => e.modified_date).HasColumnType("datetime");
            entity.Property(e => e.owned_date).HasColumnType("datetime");
            entity.Property(e => e.tribe_authority).HasMaxLength(250);
            entity.Property(e => e.tribe_name).HasMaxLength(250);
        });

        modelBuilder.Entity<taxonomy_upov_crop_map>(entity =>
        {
            entity.HasKey(e => e.taxonomy_upov_crop_map_id);

            entity.Property(e => e.created_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.modified_date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.owned_date).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_upov_crop_map)
                .HasForeignKey(d => d.taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_taxonomy_upov_crop_map_taxonomy_species");

            entity.HasOne(d => d.taxonomy_upov_crop).WithMany(p => p.taxonomy_upov_crop_map)
                .HasForeignKey(d => d.taxonomy_upov_crop_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_taxonomy_upov_crop_map_taxonomy_ref_upov_crop");
        });

        modelBuilder.Entity<taxonomy_use>(entity =>
        {
            entity.HasKey(e => e.taxonomy_use_id);

            entity.HasIndex(e => e.created_by, "ndx_fk_tus_created");

            entity.HasIndex(e => e.modified_by, "ndx_fk_tus_modified");

            entity.HasIndex(e => e.owned_by, "ndx_fk_tus_owned");

            entity.HasIndex(e => e.taxonomy_species_id, "ndx_fk_tus_ts");

            entity.HasIndex(e => e.economic_usage_code, "ndx_tu_usage");

            entity.HasIndex(e => new { e.taxonomy_species_id, e.economic_usage_code, e.usage_type, e.citation_id }, "ndx_uniq_tu").IsUnique();

            entity.Property(e => e.economic_usage_code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.plant_part_code).HasMaxLength(20);
            entity.Property(e => e.usage_type).HasMaxLength(100);

            entity.HasOne(d => d.citation).WithMany(p => p.taxonomy_use)
                .HasForeignKey(d => d.citation_id)
                .HasConstraintName("fk_tu_cit");

            entity.HasOne(d => d.taxonomy_species).WithMany(p => p.taxonomy_use)
                .HasForeignKey(d => d.taxonomy_species_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tus_ts");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //{
    //    base.OnConfiguring(optionsBuilder.UseSqlServer(appConfig.GetConnectionString("SchoolDBLocalConnection"));
    //}
}