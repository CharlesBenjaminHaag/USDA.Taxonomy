// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace USDA.ARS.GRINGlobal.Data.Models;

public partial class gringlobalContext : DbContext
{
    public gringlobalContext(DbContextOptions<gringlobalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Accession> Accessions { get; set; }

    public virtual DbSet<AccessionAction> AccessionActions { get; set; }

    public virtual DbSet<AccessionAvailabilityLookup> AccessionAvailabilityLookups { get; set; }

    public virtual DbSet<AccessionInvAnnotation> AccessionInvAnnotations { get; set; }

    public virtual DbSet<AccessionInvAttach> AccessionInvAttaches { get; set; }

    public virtual DbSet<AccessionInvAttachValidation> AccessionInvAttachValidations { get; set; }

    public virtual DbSet<AccessionInvGroup> AccessionInvGroups { get; set; }

    public virtual DbSet<AccessionInvGroupAttach> AccessionInvGroupAttaches { get; set; }

    public virtual DbSet<AccessionInvGroupMap> AccessionInvGroupMaps { get; set; }

    public virtual DbSet<AccessionInvName> AccessionInvNames { get; set; }

    public virtual DbSet<AccessionInvVoucher> AccessionInvVouchers { get; set; }

    public virtual DbSet<AccessionInventoryAttachLookup> AccessionInventoryAttachLookups { get; set; }

    public virtual DbSet<AccessionIpr> AccessionIprs { get; set; }

    public virtual DbSet<AccessionIprOverview> AccessionIprOverviews { get; set; }

    public virtual DbSet<AccessionLookup> AccessionLookups { get; set; }

    public virtual DbSet<AccessionLookupAvailability> AccessionLookupAvailabilities { get; set; }

    public virtual DbSet<AccessionOverview> AccessionOverviews { get; set; }

    public virtual DbSet<AccessionPedigree> AccessionPedigrees { get; set; }

    public virtual DbSet<AccessionQuarantine> AccessionQuarantines { get; set; }

    public virtual DbSet<AccessionSource> AccessionSources { get; set; }

    public virtual DbSet<AccessionSourceMap> AccessionSourceMaps { get; set; }

    public virtual DbSet<AppUserItemList> AppUserItemLists { get; set; }

    public virtual DbSet<Citation> Citations { get; set; }

    public virtual DbSet<CodeValue> CodeValues { get; set; }

    public virtual DbSet<CodeValueLang> CodeValueLangs { get; set; }

    public virtual DbSet<CodeValueLookup> CodeValueLookups { get; set; }

    public virtual DbSet<Cooperator> Cooperators { get; set; }

    public virtual DbSet<CooperatorAttach> CooperatorAttaches { get; set; }

    public virtual DbSet<CooperatorGroup> CooperatorGroups { get; set; }

    public virtual DbSet<CooperatorLookup> CooperatorLookups { get; set; }

    public virtual DbSet<CooperatorMap> CooperatorMaps { get; set; }

    public virtual DbSet<CountryView> CountryViews { get; set; }

    public virtual DbSet<Crop> Crops { get; set; }

    public virtual DbSet<CropAttach> CropAttaches { get; set; }

    public virtual DbSet<CropGermplasmCommittee> CropGermplasmCommittees { get; set; }

    public virtual DbSet<CropGermplasmCommitteeCropDescriptor> CropGermplasmCommitteeCropDescriptors { get; set; }

    public virtual DbSet<CropGermplasmCommitteeDocument> CropGermplasmCommitteeDocuments { get; set; }

    public virtual DbSet<CropGermplasmCommitteeMeeting> CropGermplasmCommitteeMeetings { get; set; }

    public virtual DbSet<CropTrait> CropTraits { get; set; }

    public virtual DbSet<CropTraitAttach> CropTraitAttaches { get; set; }

    public virtual DbSet<CropTraitCode> CropTraitCodes { get; set; }

    public virtual DbSet<CropTraitCodeAttach> CropTraitCodeAttaches { get; set; }

    public virtual DbSet<CropTraitCodeLang> CropTraitCodeLangs { get; set; }

    public virtual DbSet<CropTraitLang> CropTraitLangs { get; set; }

    public virtual DbSet<CropTraitObservation> CropTraitObservations { get; set; }

    public virtual DbSet<CropTraitObservationDatum> CropTraitObservationData { get; set; }

    public virtual DbSet<Email> Emails { get; set; }

    public virtual DbSet<EmailAttach> EmailAttaches { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<Exploration> Explorations { get; set; }

    public virtual DbSet<ExplorationMap> ExplorationMaps { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<FeedbackAttach> FeedbackAttaches { get; set; }

    public virtual DbSet<FeedbackForm> FeedbackForms { get; set; }

    public virtual DbSet<FeedbackFormField> FeedbackFormFields { get; set; }

    public virtual DbSet<FeedbackFormTrait> FeedbackFormTraits { get; set; }

    public virtual DbSet<FeedbackInventory> FeedbackInventories { get; set; }

    public virtual DbSet<FeedbackReport> FeedbackReports { get; set; }

    public virtual DbSet<FeedbackReportAttach> FeedbackReportAttaches { get; set; }

    public virtual DbSet<FeedbackResult> FeedbackResults { get; set; }

    public virtual DbSet<FeedbackResultAttach> FeedbackResultAttaches { get; set; }

    public virtual DbSet<FeedbackResultField> FeedbackResultFields { get; set; }

    public virtual DbSet<FeedbackResultGroup> FeedbackResultGroups { get; set; }

    public virtual DbSet<FeedbackResultTraitOb> FeedbackResultTraitObs { get; set; }

    public virtual DbSet<GeneticAnnotation> GeneticAnnotations { get; set; }

    public virtual DbSet<GeneticMarker> GeneticMarkers { get; set; }

    public virtual DbSet<GeneticObservation> GeneticObservations { get; set; }

    public virtual DbSet<GeneticObservationDatum> GeneticObservationData { get; set; }

    public virtual DbSet<GenevaSiteInventory> GenevaSiteInventories { get; set; }

    public virtual DbSet<Geography> Geographies { get; set; }

    public virtual DbSet<GeographyRegionMap> GeographyRegionMaps { get; set; }

    public virtual DbSet<GspiSiteInventory> GspiSiteInventories { get; set; }

    public virtual DbSet<ImprovementLevelMcpdCodeMap> ImprovementLevelMcpdCodeMaps { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<InventoryAction> InventoryActions { get; set; }

    public virtual DbSet<InventoryMaintPolicy> InventoryMaintPolicies { get; set; }

    public virtual DbSet<InventoryMaintPolicySeason> InventoryMaintPolicySeasons { get; set; }

    public virtual DbSet<InventoryQualityStatus> InventoryQualityStatuses { get; set; }

    public virtual DbSet<InventoryViability> InventoryViabilities { get; set; }

    public virtual DbSet<InventoryViabilityDatum> InventoryViabilityData { get; set; }

    public virtual DbSet<InventoryViabilityRule> InventoryViabilityRules { get; set; }

    public virtual DbSet<InventoryViabilityRuleMap> InventoryViabilityRuleMaps { get; set; }

    public virtual DbSet<Literature> Literatures { get; set; }

    public virtual DbSet<Method> Methods { get; set; }

    public virtual DbSet<MethodAttach> MethodAttaches { get; set; }

    public virtual DbSet<MethodMap> MethodMaps { get; set; }

    public virtual DbSet<NameGroup> NameGroups { get; set; }

    public virtual DbSet<Nc7InventoryLocationDatum> Nc7InventoryLocationData { get; set; }

    public virtual DbSet<Nc7SiteInventory> Nc7SiteInventories { get; set; }

    public virtual DbSet<Ne9SiteInventory> Ne9SiteInventories { get; set; }

    public virtual DbSet<NsslSiteInventory> NsslSiteInventories { get; set; }

    public virtual DbSet<OpgcSiteInventory> OpgcSiteInventories { get; set; }

    public virtual DbSet<OrderRequest> OrderRequests { get; set; }

    public virtual DbSet<OrderRequestAction> OrderRequestActions { get; set; }

    public virtual DbSet<OrderRequestAttach> OrderRequestAttaches { get; set; }

    public virtual DbSet<OrderRequestItem> OrderRequestItems { get; set; }

    public virtual DbSet<OrderRequestItemAction> OrderRequestItemActions { get; set; }

    public virtual DbSet<OrderRequestPhytoLog> OrderRequestPhytoLogs { get; set; }

    public virtual DbSet<ParlSiteInventory> ParlSiteInventories { get; set; }

    public virtual DbSet<PlantImmigrantIndex> PlantImmigrantIndices { get; set; }

    public virtual DbSet<PlantInventory> PlantInventories { get; set; }

    public virtual DbSet<PlantInventoryIndex> PlantInventoryIndices { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<Rhizobium> Rhizobia { get; set; }

    public virtual DbSet<S9SiteInventory> S9SiteInventories { get; set; }

    public virtual DbSet<Site> Sites { get; set; }

    public virtual DbSet<SourceDescObservation> SourceDescObservations { get; set; }

    public virtual DbSet<SourceDescriptor> SourceDescriptors { get; set; }

    public virtual DbSet<SourceDescriptorCode> SourceDescriptorCodes { get; set; }

    public virtual DbSet<SourceDescriptorCodeLang> SourceDescriptorCodeLangs { get; set; }

    public virtual DbSet<SourceDescriptorLang> SourceDescriptorLangs { get; set; }

    public virtual DbSet<SysAppErrorLog> SysAppErrorLogs { get; set; }

    public virtual DbSet<SysDbError> SysDbErrors { get; set; }

    public virtual DbSet<SysFile> SysFiles { get; set; }

    public virtual DbSet<SysFileGroup> SysFileGroups { get; set; }

    public virtual DbSet<SysFileGroupMap> SysFileGroupMaps { get; set; }

    public virtual DbSet<SysFileLang> SysFileLangs { get; set; }

    public virtual DbSet<SysGroup> SysGroups { get; set; }

    public virtual DbSet<SysGroupLang> SysGroupLangs { get; set; }

    public virtual DbSet<SysGroupPermissionMap> SysGroupPermissionMaps { get; set; }

    public virtual DbSet<SysGroupUserMap> SysGroupUserMaps { get; set; }

    public virtual DbSet<SysLang> SysLangs { get; set; }

    public virtual DbSet<SysPermission> SysPermissions { get; set; }

    public virtual DbSet<SysPermissionField> SysPermissionFields { get; set; }

    public virtual DbSet<SysPermissionLang> SysPermissionLangs { get; set; }

    public virtual DbSet<SysTable> SysTables { get; set; }

    public virtual DbSet<SysTableField> SysTableFields { get; set; }

    public virtual DbSet<SysTableFieldLang> SysTableFieldLangs { get; set; }

    public virtual DbSet<SysTableLang> SysTableLangs { get; set; }

    public virtual DbSet<SysTableRelationship> SysTableRelationships { get; set; }

    public virtual DbSet<SysUser> SysUsers { get; set; }

    public virtual DbSet<SysUserPasswordResetToken> SysUserPasswordResetTokens { get; set; }

    public virtual DbSet<SysUserPermissionMap> SysUserPermissionMaps { get; set; }

    public virtual DbSet<TaxonomyFamily> TaxonomyFamilies { get; set; }

    public virtual DbSet<TaxonomyGenu> TaxonomyGenus { get; set; }

    public virtual DbSet<TaxonomySpecy> TaxonomySpecies { get; set; }

    public virtual DbSet<W6SiteInventory> W6SiteInventories { get; set; }

    public virtual DbSet<WebCooperator> WebCooperators { get; set; }

    public virtual DbSet<WebHelp> WebHelps { get; set; }

    public virtual DbSet<WebOrderRequest> WebOrderRequests { get; set; }

    public virtual DbSet<WebOrderRequestAction> WebOrderRequestActions { get; set; }

    public virtual DbSet<WebOrderRequestAddress> WebOrderRequestAddresses { get; set; }

    public virtual DbSet<WebOrderRequestAttach> WebOrderRequestAttaches { get; set; }

    public virtual DbSet<WebOrderRequestItem> WebOrderRequestItems { get; set; }

    public virtual DbSet<WebUser> WebUsers { get; set; }

    public virtual DbSet<WebUserCart> WebUserCarts { get; set; }

    public virtual DbSet<WebUserCartItem> WebUserCartItems { get; set; }

    public virtual DbSet<WebUserPreference> WebUserPreferences { get; set; }

    public virtual DbSet<WebUserShippingAddress> WebUserShippingAddresses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Accession>(entity =>
        {
            entity.ToTable("accession");

            entity.HasIndex(e => e.AccessionLookup, "ndx_a_accession_lookup");

            entity.HasIndex(e => e.AccessionNumberPart1, "ndx_a_part1");

            entity.HasIndex(e => e.AccessionNumberPart2, "ndx_a_part2");

            entity.HasIndex(e => e.AccessionNumberPart3, "ndx_a_part3");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_a_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_a_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_a_owned");

            entity.HasIndex(e => e.TaxonomySpeciesId, "ndx_fk_a_t");

            entity.HasIndex(e => new { e.AccessionNumberPart1, e.AccessionNumberPart2, e.AccessionNumberPart3 }, "ndx_uniq_ac").IsUnique();

            entity.HasIndex(e => e.Doi, "ndx_uniq_doi")
                .IsUnique()
                .HasFilter("([doi] IS NOT NULL)");

            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AccessionLookup)
                .HasMaxLength(132)
                .HasComputedColumnSql("(ltrim(rtrim((ltrim(coalesce([accession_number_part1],'')+' ')+ltrim(coalesce(CONVERT([varchar],[accession_number_part2]),'')+' '))+coalesce([accession_number_part3],''))))", true)
                .HasColumnName("accession_lookup");
            entity.Property(e => e.AccessionNumberPart1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("accession_number_part1");
            entity.Property(e => e.AccessionNumberPart2).HasColumnName("accession_number_part2");
            entity.Property(e => e.AccessionNumberPart3)
                .HasMaxLength(50)
                .HasColumnName("accession_number_part3");
            entity.Property(e => e.BackupLocation1SiteId).HasColumnName("backup_location1_site_id");
            entity.Property(e => e.BackupLocation2SiteId).HasColumnName("backup_location2_site_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Doi)
                .HasMaxLength(20)
                .HasColumnName("doi");
            entity.Property(e => e.ImprovementStatusCode)
                .HasMaxLength(20)
                .HasColumnName("improvement_status_code");
            entity.Property(e => e.InitialReceivedDate).HasColumnName("initial_received_date");
            entity.Property(e => e.InitialReceivedDateCode)
                .HasMaxLength(20)
                .HasColumnName("initial_received_date_code");
            entity.Property(e => e.InitialReceivedFormCode)
                .HasMaxLength(20)
                .HasColumnName("initial_received_form_code");
            entity.Property(e => e.IsBackedUp)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_backed_up");
            entity.Property(e => e.IsCore)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_core");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.LifeCycleCode)
                .HasMaxLength(20)
                .HasColumnName("life_cycle_code");
            entity.Property(e => e.LifeFormCode)
                .HasMaxLength(20)
                .HasColumnName("life_form_code");
            entity.Property(e => e.LifeHabitCode)
                .HasMaxLength(20)
                .HasColumnName("life_habit_code");
            entity.Property(e => e.LifeSexCode)
                .HasMaxLength(20)
                .HasColumnName("life_sex_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ReproductiveUniformityCode)
                .HasMaxLength(20)
                .HasColumnName("reproductive_uniformity_code");
            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.TaxonomySpeciesId).HasColumnName("taxonomy_species_id");

            entity.HasOne(d => d.BackupLocation1Site).WithMany(p => p.AccessionBackupLocation1Sites)
                .HasForeignKey(d => d.BackupLocation1SiteId)
                .HasConstraintName("fk_a_s1");

            entity.HasOne(d => d.BackupLocation2Site).WithMany(p => p.AccessionBackupLocation2Sites)
                .HasForeignKey(d => d.BackupLocation2SiteId)
                .HasConstraintName("fk_a_s2");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_a_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_a_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_a_owned");

            entity.HasOne(d => d.TaxonomySpecies).WithMany(p => p.Accessions)
                .HasForeignKey(d => d.TaxonomySpeciesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_a_t");
        });

        modelBuilder.Entity<AccessionAction>(entity =>
        {
            entity.ToTable("accession_action");

            entity.HasIndex(e => e.AccessionId, "ndx_fk_aa_a");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_aa_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aa_created");

            entity.HasIndex(e => e.MethodId, "ndx_fk_aa_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aa_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aa_owned");

            entity.HasIndex(e => new { e.AccessionId, e.ActionNameCode, e.StartedDate, e.CompletedDate }, "ndx_uniq_aa").IsUnique();

            entity.Property(e => e.AccessionActionId).HasColumnName("accession_action_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.ActionNameCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("action_name_code");
            entity.Property(e => e.CompletedDate).HasColumnName("completed_date");
            entity.Property(e => e.CompletedDateCode)
                .HasMaxLength(20)
                .HasColumnName("completed_date_code");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StartedDate).HasColumnName("started_date");
            entity.Property(e => e.StartedDateCode)
                .HasMaxLength(20)
                .HasColumnName("started_date_code");

            entity.HasOne(d => d.Accession).WithMany(p => p.AccessionActions)
                .HasForeignKey(d => d.AccessionId)
                .HasConstraintName("fk_aa_a");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.AccessionActionCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_aa_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionActionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aa_created");

            entity.HasOne(d => d.Method).WithMany(p => p.AccessionActions)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_aa_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionActionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aa_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionActionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aa_owned");
        });

        modelBuilder.Entity<AccessionAvailabilityLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("accession_availability_lookup");

            entity.Property(e => e.AvailabilityStatus)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("availability_status");
            entity.Property(e => e.Lookup)
                .HasMaxLength(132)
                .HasColumnName("lookup");
            entity.Property(e => e.TargetId)
                .ValueGeneratedOnAdd()
                .HasColumnName("target_id");
        });

        modelBuilder.Entity<AccessionInvAnnotation>(entity =>
        {
            entity.ToTable("accession_inv_annotation");

            entity.HasIndex(e => e.AnnotationCooperatorId, "ndx_fk_aian_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aian_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_aian_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aian_modified");

            entity.HasIndex(e => e.OrderRequestId, "ndx_fk_aian_or");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aian_owned");

            entity.HasIndex(e => e.NewTaxonomySpeciesId, "ndx_fk_aian_t_new");

            entity.HasIndex(e => e.OldTaxonomySpeciesId, "ndx_fk_aian_t_old");

            entity.HasIndex(e => new { e.InventoryId, e.AnnotationTypeCode, e.AnnotationDate }, "ndx_uniq_aian").IsUnique();

            entity.Property(e => e.AccessionInvAnnotationId).HasColumnName("accession_inv_annotation_id");
            entity.Property(e => e.AnnotationCooperatorId).HasColumnName("annotation_cooperator_id");
            entity.Property(e => e.AnnotationDate).HasColumnName("annotation_date");
            entity.Property(e => e.AnnotationDateCode)
                .HasMaxLength(20)
                .HasColumnName("annotation_date_code");
            entity.Property(e => e.AnnotationTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("annotation_type_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.NewTaxonomySpeciesId).HasColumnName("new_taxonomy_species_id");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OldTaxonomySpeciesId).HasColumnName("old_taxonomy_species_id");
            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.AnnotationCooperator).WithMany(p => p.AccessionInvAnnotationAnnotationCooperators)
                .HasForeignKey(d => d.AnnotationCooperatorId)
                .HasConstraintName("fk_aian_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvAnnotationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aian_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.AccessionInvAnnotations)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aian_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvAnnotationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aian_modified");

            entity.HasOne(d => d.NewTaxonomySpecies).WithMany(p => p.AccessionInvAnnotationNewTaxonomySpecies)
                .HasForeignKey(d => d.NewTaxonomySpeciesId)
                .HasConstraintName("fk_aian_t_new");

            entity.HasOne(d => d.OldTaxonomySpecies).WithMany(p => p.AccessionInvAnnotationOldTaxonomySpecies)
                .HasForeignKey(d => d.OldTaxonomySpeciesId)
                .HasConstraintName("fk_aian_t_old");

            entity.HasOne(d => d.OrderRequest).WithMany(p => p.AccessionInvAnnotations)
                .HasForeignKey(d => d.OrderRequestId)
                .HasConstraintName("fk_aian_or");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvAnnotationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aian_owned");
        });

        modelBuilder.Entity<AccessionInvAttach>(entity =>
        {
            entity.ToTable("accession_inv_attach");

            entity.HasIndex(e => e.FileExtension, "IX_accession_inv_attach_file_ext");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_aiat_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aiat_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_aiat_iid");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aiat_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aiat_owned");

            entity.HasIndex(e => new { e.InventoryId, e.VirtualPath }, "ndx_uniq_aiat").IsUnique();

            entity.Property(e => e.AccessionInvAttachId).HasColumnName("accession_inv_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("IMAGE")
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CopyrightInformation)
                .HasMaxLength(100)
                .HasColumnName("copyright_information");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.DescriptionCode)
                .HasMaxLength(20)
                .HasColumnName("description_code");
            entity.Property(e => e.FileExtension)
                .HasMaxLength(3)
                .HasComputedColumnSql("(right([virtual_path],(3)))", true)
                .HasColumnName("file_extension");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsThumbnailVirtualPathValid)
                .HasMaxLength(1)
                .HasColumnName("is_thumbnail_virtual_path_valid");
            entity.Property(e => e.IsVirtualPathValid)
                .HasMaxLength(1)
                .HasColumnName("is_virtual_path_valid");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.ValidatedDate).HasColumnName("validated_date");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.AccessionInvAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_aiat_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aiat_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.AccessionInvAttaches)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aiat_iid");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aiat_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aiat_owned");
        });

        modelBuilder.Entity<AccessionInvAttachValidation>(entity =>
        {
            entity.ToTable("accession_inv_attach_validation");

            entity.Property(e => e.AccessionInvAttachValidationId).HasColumnName("accession_inv_attach_validation_id");
            entity.Property(e => e.AccessionInvAttachId).HasColumnName("accession_inv_attach_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.IsThumbnailVirtualPathValid)
                .HasMaxLength(1)
                .HasColumnName("is_thumbnail_virtual_path_valid");
            entity.Property(e => e.IsVirtualPathValid)
                .HasMaxLength(1)
                .HasColumnName("is_virtual_path_valid");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
        });

        modelBuilder.Entity<AccessionInvGroup>(entity =>
        {
            entity.ToTable("accession_inv_group");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aig_created");

            entity.HasIndex(e => e.MethodId, "ndx_fk_aig_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aig_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aig_owned");

            entity.HasIndex(e => e.GroupName, "ndx_uniq_aig").IsUnique();

            entity.Property(e => e.AccessionInvGroupId).HasColumnName("accession_inv_group_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("group_name");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("N")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvGroupCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aig_created");

            entity.HasOne(d => d.Method).WithMany(p => p.AccessionInvGroups)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_aig_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvGroupModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aig_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvGroupOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aig_owned");
        });

        modelBuilder.Entity<AccessionInvGroupAttach>(entity =>
        {
            entity.ToTable("accession_inv_group_attach");

            entity.HasIndex(e => e.AccessionInvGroupId, "ndx_fk_aigat_aig");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_aigat_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aigat_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aigat_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aigat_owned");

            entity.HasIndex(e => new { e.AccessionInvGroupId, e.VirtualPath }, "ndx_uniq_aigat").IsUnique();

            entity.Property(e => e.AccessionInvGroupAttachId).HasColumnName("accession_inv_group_attach_id");
            entity.Property(e => e.AccessionInvGroupId).HasColumnName("accession_inv_group_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CopyrightInformation)
                .HasMaxLength(100)
                .HasColumnName("copyright_information");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AccessionInvGroup).WithMany(p => p.AccessionInvGroupAttaches)
                .HasForeignKey(d => d.AccessionInvGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigat_aig");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.AccessionInvGroupAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_aigat_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvGroupAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigat_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvGroupAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aigat_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvGroupAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigat_owned");
        });

        modelBuilder.Entity<AccessionInvGroupMap>(entity =>
        {
            entity.ToTable("accession_inv_group_map");

            entity.HasIndex(e => e.AccessionInvGroupId, "ndx_fk_aigm_ag");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aigm_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_aigm_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aigm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aigm_owned");

            entity.HasIndex(e => new { e.InventoryId, e.AccessionInvGroupId }, "ndx_uniq_aigm").IsUnique();

            entity.Property(e => e.AccessionInvGroupMapId).HasColumnName("accession_inv_group_map_id");
            entity.Property(e => e.AccessionInvGroupId).HasColumnName("accession_inv_group_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.AccessionInvGroup).WithMany(p => p.AccessionInvGroupMaps)
                .HasForeignKey(d => d.AccessionInvGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigm_aig");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvGroupMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigm_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.AccessionInvGroupMaps)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigm_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvGroupMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aigm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvGroupMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aigm_owned");
        });

        modelBuilder.Entity<AccessionInvName>(entity =>
        {
            entity.ToTable("accession_inv_name");

            entity.HasIndex(e => e.NameSourceCooperatorId, "ndx_fk_ain_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ain_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_ain_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ain_modified");

            entity.HasIndex(e => e.NameGroupId, "ndx_fk_ain_ng");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ain_owned");

            entity.HasIndex(e => new { e.InventoryId, e.PlantName, e.NameGroupId, e.CategoryCode }, "ndx_uniq_ain").IsUnique();

            entity.Property(e => e.AccessionInvNameId).HasColumnName("accession_inv_name_id");
            entity.Property(e => e.CategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.NameGroupId).HasColumnName("name_group_id");
            entity.Property(e => e.NameSourceCooperatorId).HasColumnName("name_source_cooperator_id");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PlantName)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("plant_name");
            entity.Property(e => e.PlantNameRank).HasColumnName("plant_name_rank");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvNameCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ain_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.AccessionInvNames)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ain_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvNameModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ain_modified");

            entity.HasOne(d => d.NameGroup).WithMany(p => p.AccessionInvNames)
                .HasForeignKey(d => d.NameGroupId)
                .HasConstraintName("fk_ain_ng");

            entity.HasOne(d => d.NameSourceCooperator).WithMany(p => p.AccessionInvNameNameSourceCooperators)
                .HasForeignKey(d => d.NameSourceCooperatorId)
                .HasConstraintName("fk_ain_c");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvNameOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ain_owned");
        });

        modelBuilder.Entity<AccessionInvVoucher>(entity =>
        {
            entity.ToTable("accession_inv_voucher");

            entity.HasIndex(e => e.CollectorCooperatorId, "ndx_fk_aiv_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aiv_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_aiv_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aiv_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aiv_owned");

            entity.HasIndex(e => new { e.InventoryId, e.VoucherLocation, e.VoucheredDate, e.CollectorVoucherNumber }, "ndx_uniq_aiv").IsUnique();

            entity.Property(e => e.AccessionInvVoucherId).HasColumnName("accession_inv_voucher_id");
            entity.Property(e => e.CollectorCooperatorId).HasColumnName("collector_cooperator_id");
            entity.Property(e => e.CollectorVoucherNumber)
                .HasMaxLength(40)
                .HasColumnName("collector_voucher_number");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.HerbariumBarcode)
                .HasMaxLength(20)
                .HasColumnName("herbarium_barcode");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.VoucherLocation)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("voucher_location");
            entity.Property(e => e.VoucheredDate).HasColumnName("vouchered_date");
            entity.Property(e => e.VoucheredDateCode)
                .HasMaxLength(20)
                .HasColumnName("vouchered_date_code");

            entity.HasOne(d => d.CollectorCooperator).WithMany(p => p.AccessionInvVoucherCollectorCooperators)
                .HasForeignKey(d => d.CollectorCooperatorId)
                .HasConstraintName("fk_aiv_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionInvVoucherCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aiv_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.AccessionInvVouchers)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aiv_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionInvVoucherModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aiv_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionInvVoucherOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aiv_owned");
        });

        modelBuilder.Entity<AccessionInventoryAttachLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("accession_inventory_attach_lookup");

            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AccessionInvAttachId).HasColumnName("accession_inv_attach_id");
            entity.Property(e => e.CategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CopyrightInformation)
                .HasMaxLength(100)
                .HasColumnName("copyright_information");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");
        });

        modelBuilder.Entity<AccessionIpr>(entity =>
        {
            entity.ToTable("accession_ipr");

            entity.HasIndex(e => e.ExpectedDate, "ndx_expected_date");

            entity.HasIndex(e => e.ExpiredDate, "ndx_expired_date");

            entity.HasIndex(e => e.AccessionId, "ndx_fk_ar_a");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_ar_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ar_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ar_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ar_owned");

            entity.HasIndex(e => e.IprCropName, "ndx_ipr_crop");

            entity.HasIndex(e => e.IprNumber, "ndx_ipr_number");

            entity.HasIndex(e => e.IssuedDate, "ndx_issued_date");

            entity.HasIndex(e => new { e.AccessionId, e.TypeCode, e.IprNumber }, "ndx_uniq_ipr").IsUnique();

            entity.Property(e => e.AccessionIprId).HasColumnName("accession_ipr_id");
            entity.Property(e => e.AcceptedDate).HasColumnName("accepted_date");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.ApplicationStatus)
                .HasMaxLength(3)
                .HasColumnName("application_status");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ExpectedDate).HasColumnName("expected_date");
            entity.Property(e => e.ExpiredDate).HasColumnName("expired_date");
            entity.Property(e => e.IprCropName)
                .HasMaxLength(100)
                .HasColumnName("ipr_crop_name");
            entity.Property(e => e.IprFullName)
                .HasMaxLength(2000)
                .HasColumnName("ipr_full_name");
            entity.Property(e => e.IprNumber)
                .HasMaxLength(50)
                .HasColumnName("ipr_number");
            entity.Property(e => e.IssuedDate).HasColumnName("issued_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.TypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("type_code");

            entity.HasOne(d => d.Accession).WithMany(p => p.AccessionIprs)
                .HasForeignKey(d => d.AccessionId)
                .HasConstraintName("fk_ar_a");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.AccessionIprCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_ar_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionIprCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ar_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionIprModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ar_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionIprOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ar_owned");
        });

        modelBuilder.Entity<AccessionIprOverview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("accession_ipr_overview");

            entity.Property(e => e.AcceptedDate).HasColumnName("accepted_date");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AccessionIprId).HasColumnName("accession_ipr_id");
            entity.Property(e => e.ApplicationStatus)
                .HasMaxLength(3)
                .HasColumnName("application_status");
            entity.Property(e => e.ApplicationStatusDescription)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("application_status_description");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.ExpectedDate).HasColumnName("expected_date");
            entity.Property(e => e.ExpirationStatus)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("expiration_status");
            entity.Property(e => e.ExpiredDate).HasColumnName("expired_date");
            entity.Property(e => e.IprCropName)
                .HasMaxLength(100)
                .HasColumnName("ipr_crop_name");
            entity.Property(e => e.IprFullName)
                .HasMaxLength(2000)
                .HasColumnName("ipr_full_name");
            entity.Property(e => e.IprNumber)
                .HasMaxLength(50)
                .HasColumnName("ipr_number");
            entity.Property(e => e.IssuedDate).HasColumnName("issued_date");
            entity.Property(e => e.Lookup)
                .HasMaxLength(132)
                .HasColumnName("lookup");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.TypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("type_code");
        });

        modelBuilder.Entity<AccessionLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("accession_lookup");

            entity.Property(e => e.Lookup)
                .HasMaxLength(132)
                .HasColumnName("lookup");
            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.TargetId)
                .ValueGeneratedOnAdd()
                .HasColumnName("target_id");
            entity.Property(e => e.TaxonomySpeciesId).HasColumnName("taxonomy_species_id");
        });

        modelBuilder.Entity<AccessionLookupAvailability>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("accession_lookup_availability");

            entity.Property(e => e.AvailabilityStatus)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("availability_status");
            entity.Property(e => e.Lookup)
                .HasMaxLength(132)
                .HasColumnName("lookup");
            entity.Property(e => e.TargetId)
                .ValueGeneratedOnAdd()
                .HasColumnName("target_id");
        });

        modelBuilder.Entity<AccessionOverview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("accession_overview");

            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AccessionIdentifier)
                .HasMaxLength(132)
                .HasColumnName("accession_identifier");
            entity.Property(e => e.AvailabilityStatus)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("availability_status");
            entity.Property(e => e.Doi)
                .HasMaxLength(20)
                .HasColumnName("doi");
            entity.Property(e => e.GenebankId).HasColumnName("genebank_id");
            entity.Property(e => e.GenebankName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("genebank_name");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.ImprovementLevel)
                .HasMaxLength(500)
                .HasColumnName("improvement_level");
            entity.Property(e => e.Narrative).HasColumnName("narrative");
            entity.Property(e => e.PlantName)
                .IsRequired()
                .HasMaxLength(202)
                .HasColumnName("plant_name");
            entity.Property(e => e.ReceivedDate).HasColumnName("received_date");
            entity.Property(e => e.ReceivedYear).HasColumnName("received_year");
            entity.Property(e => e.SourceCollectionSite).HasColumnName("source_collection_site");
            entity.Property(e => e.SourceCoordinates)
                .HasMaxLength(42)
                .HasColumnName("source_coordinates");
            entity.Property(e => e.SourceCountryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("source_country_code");
            entity.Property(e => e.SourceCountryName)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("source_country_name");
            entity.Property(e => e.SourceDate)
                .HasMaxLength(4000)
                .HasColumnName("source_date");
            entity.Property(e => e.SourceElevation)
                .HasMaxLength(20)
                .HasColumnName("source_elevation");
            entity.Property(e => e.SourceHabitat).HasColumnName("source_habitat");
            entity.Property(e => e.SourceType)
                .HasMaxLength(500)
                .HasColumnName("source_type");
            entity.Property(e => e.TaxonomySpeciesId).HasColumnName("taxonomy_species_id");
            entity.Property(e => e.TaxonomySpeciesName)
                .HasMaxLength(801)
                .HasColumnName("taxonomy_species_name");
        });

        modelBuilder.Entity<AccessionPedigree>(entity =>
        {
            entity.ToTable("accession_pedigree");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ap_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ap_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ap_owned");

            entity.HasIndex(e => e.AccessionId, "ndx_uniq_pd").IsUnique();

            entity.Property(e => e.AccessionPedigreeId).HasColumnName("accession_pedigree_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CrossCode)
                .HasMaxLength(20)
                .HasColumnName("cross_code");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FemaleAccessionId).HasColumnName("female_accession_id");
            entity.Property(e => e.FemaleExternalAccession)
                .HasMaxLength(50)
                .HasColumnName("female_external_accession");
            entity.Property(e => e.MaleAccessionId).HasColumnName("male_accession_id");
            entity.Property(e => e.MaleExternalAccession)
                .HasMaxLength(50)
                .HasColumnName("male_external_accession");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ReleasedDate).HasColumnName("released_date");
            entity.Property(e => e.ReleasedDateCode)
                .HasMaxLength(20)
                .HasColumnName("released_date_code");

            entity.HasOne(d => d.Accession).WithOne(p => p.AccessionPedigreeAccession)
                .HasForeignKey<AccessionPedigree>(d => d.AccessionId)
                .HasConstraintName("fk_ap_a");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionPedigreeCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ap_created");

            entity.HasOne(d => d.FemaleAccession).WithMany(p => p.AccessionPedigreeFemaleAccessions)
                .HasForeignKey(d => d.FemaleAccessionId)
                .HasConstraintName("fk_ap_a_female");

            entity.HasOne(d => d.MaleAccession).WithMany(p => p.AccessionPedigreeMaleAccessions)
                .HasForeignKey(d => d.MaleAccessionId)
                .HasConstraintName("fk_ap_a_male");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionPedigreeModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ap_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionPedigreeOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ap_owned");
        });

        modelBuilder.Entity<AccessionQuarantine>(entity =>
        {
            entity.ToTable("accession_quarantine");

            entity.HasIndex(e => e.AccessionId, "ndx_fk_aq_a");

            entity.HasIndex(e => e.CustodialCooperatorId, "ndx_fk_aq_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_aq_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_aq_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_aq_owned");

            entity.HasIndex(e => new { e.AccessionId, e.QuarantineTypeCode }, "ndx_uniq_qr").IsUnique();

            entity.Property(e => e.AccessionQuarantineId).HasColumnName("accession_quarantine_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CustodialCooperatorId).HasColumnName("custodial_cooperator_id");
            entity.Property(e => e.EnteredDate).HasColumnName("entered_date");
            entity.Property(e => e.EstablishedDate).HasColumnName("established_date");
            entity.Property(e => e.ExpectedReleaseDate).HasColumnName("expected_release_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ProgressStatusCode)
                .HasMaxLength(20)
                .HasColumnName("progress_status_code");
            entity.Property(e => e.QuarantineTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("quarantine_type_code");
            entity.Property(e => e.ReleasedDate).HasColumnName("released_date");

            entity.HasOne(d => d.Accession).WithMany(p => p.AccessionQuarantines)
                .HasForeignKey(d => d.AccessionId)
                .HasConstraintName("fk_aq_a");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionQuarantineCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aq_created");

            entity.HasOne(d => d.CustodialCooperator).WithMany(p => p.AccessionQuarantineCustodialCooperators)
                .HasForeignKey(d => d.CustodialCooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aq_c");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionQuarantineModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_aq_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionQuarantineOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_aq_owned");
        });

        modelBuilder.Entity<AccessionSource>(entity =>
        {
            entity.ToTable("accession_source");

            entity.HasIndex(e => e.AccessionId, "ndx_fk_as_a");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_as_created");

            entity.HasIndex(e => e.GeographyId, "ndx_fk_as_g");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_as_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_as_owned");

            entity.HasIndex(e => new { e.AccessionId, e.SourceTypeCode, e.SourceDate, e.GeographyId }, "ndx_uniq_sr").IsUnique();

            entity.Property(e => e.AccessionSourceId).HasColumnName("accession_source_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AcquisitionSourceCode)
                .HasMaxLength(20)
                .HasColumnName("acquisition_source_code");
            entity.Property(e => e.AssociatedSpecies).HasColumnName("associated_species");
            entity.Property(e => e.CollectedFormCode)
                .HasMaxLength(20)
                .HasColumnName("collected_form_code");
            entity.Property(e => e.CollectorVerbatimLocality).HasColumnName("collector_verbatim_locality");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ElevationMeters).HasColumnName("elevation_meters");
            entity.Property(e => e.EnvironmentDescription).HasColumnName("environment_description");
            entity.Property(e => e.FormattedLocality).HasColumnName("formatted_locality");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.GeoreferenceAnnotation).HasColumnName("georeference_annotation");
            entity.Property(e => e.GeoreferenceDatum)
                .HasMaxLength(10)
                .HasColumnName("georeference_datum");
            entity.Property(e => e.GeoreferenceProtocolCode)
                .HasMaxLength(20)
                .HasColumnName("georeference_protocol_code");
            entity.Property(e => e.IsOrigin)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_origin");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.Latitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("longitude");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberPlantsSampled).HasColumnName("number_plants_sampled");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.QuantityCollected)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("quantity_collected");
            entity.Property(e => e.SourceDate).HasColumnName("source_date");
            entity.Property(e => e.SourceDateCode)
                .HasMaxLength(20)
                .HasColumnName("source_date_code");
            entity.Property(e => e.SourceTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("source_type_code");
            entity.Property(e => e.Uncertainty).HasColumnName("uncertainty");
            entity.Property(e => e.UnitQuantityCollectedCode)
                .HasMaxLength(20)
                .HasColumnName("unit_quantity_collected_code");

            entity.HasOne(d => d.Accession).WithMany(p => p.AccessionSources)
                .HasForeignKey(d => d.AccessionId)
                .HasConstraintName("fk_as_a");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionSourceCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_as_created");

            entity.HasOne(d => d.Geography).WithMany(p => p.AccessionSources)
                .HasForeignKey(d => d.GeographyId)
                .HasConstraintName("fk_as_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionSourceModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_as_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionSourceOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_as_owned");
        });

        modelBuilder.Entity<AccessionSourceMap>(entity =>
        {
            entity.ToTable("accession_source_map");

            entity.HasIndex(e => e.AccessionSourceId, "ndx_fk_asm_as");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_asm_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_asm_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_asm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_asm_owned");

            entity.HasIndex(e => new { e.AccessionSourceId, e.CooperatorId }, "ndx_uniq_sm").IsUnique();

            entity.Property(e => e.AccessionSourceMapId).HasColumnName("accession_source_map_id");
            entity.Property(e => e.AccessionSourceId).HasColumnName("accession_source_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.AccessionSource).WithMany(p => p.AccessionSourceMaps)
                .HasForeignKey(d => d.AccessionSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_asm_as");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.AccessionSourceMapCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_asm_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AccessionSourceMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_asm_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AccessionSourceMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_asm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AccessionSourceMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_asm_owned");
        });

        modelBuilder.Entity<AppUserItemList>(entity =>
        {
            entity.ToTable("app_user_item_list");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_auil_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_auil_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_auil_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_auil_owned");

            entity.HasIndex(e => new { e.CooperatorId, e.ListName }, "ndx_uil_group");

            entity.HasIndex(e => new { e.CooperatorId, e.TabName, e.ListName }, "ndx_uil_tab");

            entity.Property(e => e.AppUserItemListId).HasColumnName("app_user_item_list_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IdNumber).HasColumnName("id_number");
            entity.Property(e => e.IdType)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("id_type");
            entity.Property(e => e.ListName)
                .IsRequired()
                .HasMaxLength(300)
                .HasColumnName("list_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Properties).HasColumnName("properties");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.TabName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("tab_name");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(1000)
                .HasColumnName("title");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.AppUserItemListCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_auil_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AppUserItemListCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_auil_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AppUserItemListModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_auil_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.AppUserItemListOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_auil_owned");
        });

        modelBuilder.Entity<Citation>(entity =>
        {
            entity.ToTable("citation");

            entity.HasIndex(e => e.AccessionId, "ndx_fk_ci_a");

            entity.HasIndex(e => e.AccessionIprId, "ndx_fk_ci_aipr");

            entity.HasIndex(e => e.AccessionPedigreeId, "ndx_fk_ci_ap");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ci_created");

            entity.HasIndex(e => e.GeneticMarkerId, "ndx_fk_ci_gm");

            entity.HasIndex(e => e.LiteratureId, "ndx_fk_ci_l");

            entity.HasIndex(e => e.MethodId, "ndx_fk_ci_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ci_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ci_owned");

            entity.HasIndex(e => e.TaxonomyFamilyId, "ndx_fk_ci_tf");

            entity.HasIndex(e => e.TaxonomyGenusId, "ndx_fk_ci_tg");

            entity.HasIndex(e => e.TaxonomySpeciesId, "ndx_fk_ci_ts");

            entity.HasIndex(e => new { e.LiteratureId, e.CitationTitle, e.AccessionId, e.MethodId, e.TaxonomySpeciesId, e.TaxonomyGenusId, e.TaxonomyFamilyId, e.AccessionIprId, e.AccessionPedigreeId, e.GeneticMarkerId, e.TypeCode, e.UniqueKey }, "ndx_uniq_cit").IsUnique();

            entity.Property(e => e.CitationId).HasColumnName("citation_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AccessionIprId).HasColumnName("accession_ipr_id");
            entity.Property(e => e.AccessionPedigreeId).HasColumnName("accession_pedigree_id");
            entity.Property(e => e.AuthorName)
                .HasMaxLength(2000)
                .HasColumnName("author_name");
            entity.Property(e => e.CitationTitle)
                .HasMaxLength(400)
                .HasColumnName("citation_title");
            entity.Property(e => e.CitationYear).HasColumnName("citation_year");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.DoiReference)
                .HasMaxLength(500)
                .HasColumnName("doi_reference");
            entity.Property(e => e.GeneticMarkerId).HasColumnName("genetic_marker_id");
            entity.Property(e => e.IsAcceptedName)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_accepted_name");
            entity.Property(e => e.LiteratureId).HasColumnName("literature_id");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Reference)
                .HasMaxLength(200)
                .HasColumnName("reference");
            entity.Property(e => e.TaxonomyFamilyId).HasColumnName("taxonomy_family_id");
            entity.Property(e => e.TaxonomyGenusId).HasColumnName("taxonomy_genus_id");
            entity.Property(e => e.TaxonomySpeciesId).HasColumnName("taxonomy_species_id");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.TypeCode)
                .HasMaxLength(20)
                .HasColumnName("type_code");
            entity.Property(e => e.UniqueKey).HasColumnName("unique_key");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .HasColumnName("url");

            entity.HasOne(d => d.Accession).WithMany(p => p.Citations)
                .HasForeignKey(d => d.AccessionId)
                .HasConstraintName("fk_ci_a");

            entity.HasOne(d => d.AccessionIpr).WithMany(p => p.Citations)
                .HasForeignKey(d => d.AccessionIprId)
                .HasConstraintName("fk_ci_aipr");

            entity.HasOne(d => d.AccessionPedigree).WithMany(p => p.Citations)
                .HasForeignKey(d => d.AccessionPedigreeId)
                .HasConstraintName("fk_ci_ap");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CitationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ci_created");

            entity.HasOne(d => d.GeneticMarker).WithMany(p => p.Citations)
                .HasForeignKey(d => d.GeneticMarkerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_ci_gm");

            entity.HasOne(d => d.Literature).WithMany(p => p.Citations)
                .HasForeignKey(d => d.LiteratureId)
                .HasConstraintName("fk_ci_l");

            entity.HasOne(d => d.Method).WithMany(p => p.Citations)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_ci_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CitationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ci_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CitationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ci_owned");

            entity.HasOne(d => d.TaxonomyFamily).WithMany(p => p.Citations)
                .HasForeignKey(d => d.TaxonomyFamilyId)
                .HasConstraintName("fk_ci_tf");

            entity.HasOne(d => d.TaxonomyGenus).WithMany(p => p.Citations)
                .HasForeignKey(d => d.TaxonomyGenusId)
                .HasConstraintName("fk_ci_tg");

            entity.HasOne(d => d.TaxonomySpecies).WithMany(p => p.Citations)
                .HasForeignKey(d => d.TaxonomySpeciesId)
                .HasConstraintName("fk_ci_ts");
        });

        modelBuilder.Entity<CodeValue>(entity =>
        {
            entity.ToTable("code_value");

            entity.HasIndex(e => e.GroupName, "ndx_fk_cdval_cdgrp");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cdval_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cdval_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cdval_owned");

            entity.HasIndex(e => new { e.GroupName, e.Value }, "ndx_uniq_cv").IsUnique();

            entity.Property(e => e.CodeValueId).HasColumnName("code_value_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("group_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CodeValueCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cdval_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CodeValueModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cdval_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CodeValueOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cdval_owned");
        });

        modelBuilder.Entity<CodeValueLang>(entity =>
        {
            entity.ToTable("code_value_lang");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cvl_created");

            entity.HasIndex(e => e.CodeValueId, "ndx_fk_cvl_cv");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cvl_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cvl_owned");

            entity.HasIndex(e => e.SysLangId, "ndx_fk_cvl_sl");

            entity.HasIndex(e => new { e.CodeValueId, e.SysLangId }, "ndx_uniq_cvl").IsUnique();

            entity.Property(e => e.CodeValueLangId).HasColumnName("code_value_lang_id");
            entity.Property(e => e.CodeValueId).HasColumnName("code_value_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CodeValue).WithMany(p => p.CodeValueLangs)
                .HasForeignKey(d => d.CodeValueId)
                .HasConstraintName("fk_cvl_cv");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CodeValueLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cvl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CodeValueLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cvl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CodeValueLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cvl_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.CodeValueLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cvl_sl");
        });

        modelBuilder.Entity<CodeValueLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("code_value_lookup");

            entity.Property(e => e.CodeValueId).HasColumnName("code_value_id");
            entity.Property(e => e.CodeValueLangId).HasColumnName("code_value_lang_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("group_name");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("value");
        });

        modelBuilder.Entity<Cooperator>(entity =>
        {
            entity.ToTable("cooperator");

            entity.HasIndex(e => e.CooperatorIdString, "id_dbo_cooperator");

            entity.HasIndex(e => new { e.LastName, e.FirstName }, "ndx_co_full_name");

            entity.HasIndex(e => e.OrganizationAbbrev, "ndx_co_org_code");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_c_created");

            entity.HasIndex(e => e.CurrentCooperatorId, "ndx_fk_c_cur_c");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_c_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_c_owned");

            entity.HasIndex(e => e.SysLangId, "ndx_fk_c_sl");

            entity.HasIndex(e => e.WebCooperatorId, "ndx_fk_c_wc");

            entity.HasIndex(e => new { e.LastName, e.FirstName, e.Organization, e.GeographyId, e.AddressLine1 }, "ndx_uniq_co").IsUnique();

            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .HasColumnName("address_line1");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .HasColumnName("address_line2");
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .HasColumnName("address_line3");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .HasColumnName("city");
            entity.Property(e => e.CooperatorIdString)
                .HasMaxLength(304)
                .HasComputedColumnSql("(Trim((((coalesce([last_name],'')+', ')+coalesce([first_name],''))+', ')+coalesce([organization],'')))", true)
                .HasColumnName("cooperator_id_string");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CurrentCooperatorId).HasColumnName("current_cooperator_id");
            entity.Property(e => e.DisciplineCode)
                .HasMaxLength(20)
                .HasColumnName("discipline_code");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(30)
                .HasColumnName("fax");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.Job)
                .HasMaxLength(100)
                .HasColumnName("job");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .HasColumnName("organization");
            entity.Property(e => e.OrganizationAbbrev)
                .HasMaxLength(10)
                .HasColumnName("organization_abbrev");
            entity.Property(e => e.OrganizationRegionCode)
                .HasMaxLength(20)
                .HasColumnName("organization_region_code");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PostalIndex)
                .HasMaxLength(100)
                .HasColumnName("postal_index");
            entity.Property(e => e.PrimaryPhone)
                .HasMaxLength(30)
                .HasColumnName("primary_phone");
            entity.Property(e => e.SecondaryAddressLine1)
                .HasMaxLength(100)
                .HasColumnName("secondary_address_line1");
            entity.Property(e => e.SecondaryAddressLine2)
                .HasMaxLength(100)
                .HasColumnName("secondary_address_line2");
            entity.Property(e => e.SecondaryAddressLine3)
                .HasMaxLength(100)
                .HasColumnName("secondary_address_line3");
            entity.Property(e => e.SecondaryCity)
                .HasMaxLength(100)
                .HasColumnName("secondary_city");
            entity.Property(e => e.SecondaryEmail)
                .HasMaxLength(100)
                .HasColumnName("secondary_email");
            entity.Property(e => e.SecondaryGeographyId).HasColumnName("secondary_geography_id");
            entity.Property(e => e.SecondaryOrganization)
                .HasMaxLength(100)
                .HasColumnName("secondary_organization");
            entity.Property(e => e.SecondaryOrganizationAbbrev)
                .HasMaxLength(10)
                .HasColumnName("secondary_organization_abbrev");
            entity.Property(e => e.SecondaryPhone)
                .HasMaxLength(30)
                .HasColumnName("secondary_phone");
            entity.Property(e => e.SecondaryPostalIndex)
                .HasMaxLength(100)
                .HasColumnName("secondary_postal_index");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .HasMaxLength(10)
                .HasColumnName("title");
            entity.Property(e => e.VettedStatus)
                .HasMaxLength(6)
                .HasColumnName("vetted_status");
            entity.Property(e => e.VettedStatusCode)
                .HasMaxLength(6)
                .HasColumnName("vetted_status_code");
            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InverseCreatedByNavigation)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_c_created");

            entity.HasOne(d => d.CurrentCooperator).WithMany(p => p.InverseCurrentCooperator)
                .HasForeignKey(d => d.CurrentCooperatorId)
                .HasConstraintName("fk_c_cur");

            entity.HasOne(d => d.Geography).WithMany(p => p.CooperatorGeographies)
                .HasForeignKey(d => d.GeographyId)
                .HasConstraintName("fk_c_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InverseModifiedByNavigation)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_c_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InverseOwnedByNavigation)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_c_owned");

            entity.HasOne(d => d.SecondaryGeography).WithMany(p => p.CooperatorSecondaryGeographies)
                .HasForeignKey(d => d.SecondaryGeographyId)
                .HasConstraintName("fk_c_g2");

            entity.HasOne(d => d.Site).WithMany(p => p.Cooperators)
                .HasForeignKey(d => d.SiteId)
                .HasConstraintName("fk_c_s");

            entity.HasOne(d => d.SysLang).WithMany(p => p.Cooperators)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_c_sl");

            entity.HasOne(d => d.WebCooperator).WithMany(p => p.Cooperators)
                .HasForeignKey(d => d.WebCooperatorId)
                .HasConstraintName("fk_c_wc");
        });

        modelBuilder.Entity<CooperatorAttach>(entity =>
        {
            entity.ToTable("cooperator_attach");

            entity.Property(e => e.CooperatorAttachId).HasColumnName("cooperator_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("IMAGE")
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CopyrightInformation)
                .HasMaxLength(100)
                .HasColumnName("copyright_information");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.DescriptionCode)
                .HasMaxLength(20)
                .HasColumnName("description_code");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.CooperatorAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_cat_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CooperatorAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cat_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CooperatorAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cat_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CooperatorAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cat_owned");
        });

        modelBuilder.Entity<CooperatorGroup>(entity =>
        {
            entity.ToTable("cooperator_group");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cg_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cg_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cg_owned");

            entity.HasIndex(e => e.Name, "ndx_uniq_cg_name").IsUnique();

            entity.Property(e => e.CooperatorGroupId).HasColumnName("cooperator_group_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GroupTag)
                .HasMaxLength(1000)
                .HasColumnName("group_tag");
            entity.Property(e => e.IsGroupActive)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_group_active");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SiteId).HasColumnName("site_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CooperatorGroupCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cg_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CooperatorGroupModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cg_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CooperatorGroupOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cg_owned");

            entity.HasOne(d => d.Site).WithMany(p => p.CooperatorGroups)
                .HasForeignKey(d => d.SiteId)
                .HasConstraintName("fk_cg_s");
        });

        modelBuilder.Entity<CooperatorLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("cooperator_lookup");

            entity.Property(e => e.Lookup)
                .HasMaxLength(304)
                .HasColumnName("lookup");
            entity.Property(e => e.TargetId)
                .ValueGeneratedOnAdd()
                .HasColumnName("target_id");
        });

        modelBuilder.Entity<CooperatorMap>(entity =>
        {
            entity.ToTable("cooperator_map");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_cm_c");

            entity.HasIndex(e => e.CooperatorGroupId, "ndx_fk_cm_cg");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cm_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cm_owned");

            entity.HasIndex(e => new { e.CooperatorId, e.CooperatorGroupId }, "ndx_uniq_cm").IsUnique();

            entity.Property(e => e.CooperatorMapId).HasColumnName("cooperator_map_id");
            entity.Property(e => e.CooperatorGroupId).HasColumnName("cooperator_group_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CooperatorGroup).WithMany(p => p.CooperatorMaps)
                .HasForeignKey(d => d.CooperatorGroupId)
                .HasConstraintName("fk_cm_cg");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.CooperatorMapCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cm_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CooperatorMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cm_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CooperatorMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CooperatorMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cm_owned");
        });

        modelBuilder.Entity<CountryView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("country_view");

            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("country_code");
            entity.Property(e => e.Countryname)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("countryname");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
        });

        modelBuilder.Entity<Crop>(entity =>
        {
            entity.ToTable("crop");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cr_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cr_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cr_owned");

            entity.HasIndex(e => e.Name, "ndx_uniq_crop").IsUnique();

            entity.Property(e => e.CropId).HasColumnName("crop_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cr_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cr_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cr_owned");
        });

        modelBuilder.Entity<CropAttach>(entity =>
        {
            entity.ToTable("crop_attach");

            entity.HasIndex(e => e.CropId, "ndx_fk_c");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_ca_co");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_owned");

            entity.HasIndex(e => new { e.CropId, e.VirtualPath }, "ndx_uniq_ca").IsUnique();

            entity.Property(e => e.CropAttachId).HasColumnName("crop_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropId).HasColumnName("crop_id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.CropAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_ca_co");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ca_created");

            entity.HasOne(d => d.Crop).WithMany(p => p.CropAttaches)
                .HasForeignKey(d => d.CropId)
                .HasConstraintName("fk_ca_c");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ca_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ca_owned");
        });

        modelBuilder.Entity<CropGermplasmCommittee>(entity =>
        {
            entity.ToTable("crop_germplasm_committee");

            entity.Property(e => e.CropGermplasmCommitteeId).HasColumnName("crop_germplasm_committee_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropGermplasmCommitteeName)
                .IsRequired()
                .HasMaxLength(80)
                .HasColumnName("crop_germplasm_committee_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.RosterUrl)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("roster_url");
        });

        modelBuilder.Entity<CropGermplasmCommitteeCropDescriptor>(entity =>
        {
            entity.HasKey(e => new { e.CropGermplasmCommitteeId, e.CropId });

            entity.ToTable("crop_germplasm_committee_crop_descriptor");

            entity.Property(e => e.CropGermplasmCommitteeId).HasColumnName("crop_germplasm_committee_id");
            entity.Property(e => e.CropId).HasColumnName("crop_id");
        });

        modelBuilder.Entity<CropGermplasmCommitteeDocument>(entity =>
        {
            entity.HasKey(e => e.CropGermplasmCommitteeDocumentId).HasName("PK_document");

            entity.ToTable("crop_germplasm_committee_document");

            entity.Property(e => e.CropGermplasmCommitteeDocumentId).HasColumnName("crop_germplasm_committee_document_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(4)
                .HasColumnName("category_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_date");
            entity.Property(e => e.CropGermplasmCommitteeId).HasColumnName("crop_germplasm_committee_id");
            entity.Property(e => e.DocumentTitle)
                .HasMaxLength(250)
                .HasColumnName("document_title");
            entity.Property(e => e.DocumentYear).HasColumnName("document_year");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("modified_date");
            entity.Property(e => e.Title)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(120)
                .HasColumnName("url");

            entity.HasOne(d => d.CropGermplasmCommittee).WithMany(p => p.CropGermplasmCommitteeDocuments)
                .HasForeignKey(d => d.CropGermplasmCommitteeId)
                .HasConstraintName("FK_crop_germplasm_committee_document_crop_germplasm_committee");
        });

        modelBuilder.Entity<CropGermplasmCommitteeMeeting>(entity =>
        {
            entity.ToTable("crop_germplasm_committee_meeting");

            entity.Property(e => e.CropGermplasmCommitteeMeetingId).HasColumnName("crop_germplasm_committee_meeting_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropGermplasmCommitteeId).HasColumnName("crop_germplasm_committee_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(80)
                .HasColumnName("title");
            entity.Property(e => e.Url)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<CropTrait>(entity =>
        {
            entity.ToTable("crop_trait");

            entity.HasIndex(e => e.CropId, "ndx_fk_ct_cr");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ct_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ct_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ct_owned");

            entity.HasIndex(e => new { e.CodedName, e.CropId }, "ndx_uniq_ct").IsUnique();

            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.CategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.CodedName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("coded_name");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropId).HasColumnName("crop_id");
            entity.Property(e => e.DataTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("data_type_code");
            entity.Property(e => e.IsArchived)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_archived");
            entity.Property(e => e.IsCoded)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_coded");
            entity.Property(e => e.IsPeerReviewed)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_peer_reviewed");
            entity.Property(e => e.MaxLength).HasColumnName("max_length");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericFormat)
                .HasMaxLength(15)
                .HasColumnName("numeric_format");
            entity.Property(e => e.NumericMaximum)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_maximum");
            entity.Property(e => e.NumericMinimum)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_minimum");
            entity.Property(e => e.OntologyUrl)
                .HasMaxLength(300)
                .HasColumnName("ontology_url");
            entity.Property(e => e.OriginalValueFormat)
                .HasMaxLength(50)
                .HasColumnName("original_value_format");
            entity.Property(e => e.OriginalValueTypeCode)
                .HasMaxLength(20)
                .HasColumnName("original_value_type_code");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ct_created");

            entity.HasOne(d => d.Crop).WithMany(p => p.CropTraits)
                .HasForeignKey(d => d.CropId)
                .HasConstraintName("fk_ct_cr");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ct_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ct_owned");
        });

        modelBuilder.Entity<CropTraitAttach>(entity =>
        {
            entity.ToTable("crop_trait_attach");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_cta_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cta_created");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_cta_ct");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cta_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cta_owned");

            entity.HasIndex(e => new { e.CropTraitId, e.VirtualPath }, "ndx_uniq_cta").IsUnique();

            entity.Property(e => e.CropTraitAttachId).HasColumnName("crop_trait_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.CropTraitAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_cta_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cta_created");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.CropTraitAttaches)
                .HasForeignKey(d => d.CropTraitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cta_ct");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cta_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cta_owned");
        });

        modelBuilder.Entity<CropTraitCode>(entity =>
        {
            entity.ToTable("crop_trait_code");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_tct_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_tct_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_tct_owned");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_tct_tr");

            entity.HasIndex(e => new { e.CropTraitId, e.Code }, "ndx_uniq_ctc").IsUnique();

            entity.Property(e => e.CropTraitCodeId).HasColumnName("crop_trait_code_id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitCodeCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tct_created");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.CropTraitCodes)
                .HasForeignKey(d => d.CropTraitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tct_tr");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitCodeModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_tct_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitCodeOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tct_owned");
        });

        modelBuilder.Entity<CropTraitCodeAttach>(entity =>
        {
            entity.ToTable("crop_trait_code_attach");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_ctca_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ctca_created");

            entity.HasIndex(e => e.CropTraitCodeId, "ndx_fk_ctca_ctc");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ctca_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ctca_owned");

            entity.HasIndex(e => new { e.CropTraitCodeId, e.VirtualPath }, "ndx_uniq_ctca").IsUnique();

            entity.Property(e => e.CropTraitCodeAttachId).HasColumnName("crop_trait_code_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitCodeId).HasColumnName("crop_trait_code_id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.CropTraitCodeAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_ctca_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitCodeAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctca_created");

            entity.HasOne(d => d.CropTraitCode).WithMany(p => p.CropTraitCodeAttaches)
                .HasForeignKey(d => d.CropTraitCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctca_ctc");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitCodeAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ctca_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitCodeAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctca_owned");
        });

        modelBuilder.Entity<CropTraitCodeLang>(entity =>
        {
            entity.ToTable("crop_trait_code_lang");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ctcl_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ctcl_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ctcl_owned");

            entity.HasIndex(e => e.SysLangId, "ndx_fk_ctcl_sl");

            entity.HasIndex(e => e.CropTraitCodeId, "ndx_fk_ctcl_tc");

            entity.HasIndex(e => new { e.CropTraitCodeId, e.SysLangId }, "ndx_uniq_ctcl").IsUnique();

            entity.Property(e => e.CropTraitCodeLangId).HasColumnName("crop_trait_code_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitCodeId).HasColumnName("crop_trait_code_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitCodeLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctcl_created");

            entity.HasOne(d => d.CropTraitCode).WithMany(p => p.CropTraitCodeLangs)
                .HasForeignKey(d => d.CropTraitCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctcl_tc");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitCodeLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ctcl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitCodeLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctcl_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.CropTraitCodeLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctcl_sl");
        });

        modelBuilder.Entity<CropTraitLang>(entity =>
        {
            entity.ToTable("crop_trait_lang");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ctl_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ctl_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ctl_owned");

            entity.HasIndex(e => e.SysLangId, "ndx_fk_ctl_sl");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_ctl_t");

            entity.HasIndex(e => new { e.CropTraitId, e.SysLangId }, "ndx_uniq_ctl").IsUnique();

            entity.Property(e => e.CropTraitLangId).HasColumnName("crop_trait_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctl_created");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.CropTraitLangs)
                .HasForeignKey(d => d.CropTraitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctl_t");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ctl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctl_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.CropTraitLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctl_sl");
        });

        modelBuilder.Entity<CropTraitObservation>(entity =>
        {
            entity.ToTable("crop_trait_observation");

            entity.HasIndex(e => new { e.CropTraitId, e.CropTraitCodeId, e.IsArchived }, "ndx_cto_maize");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_cto_created");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_cto_ct");

            entity.HasIndex(e => e.CropTraitCodeId, "ndx_fk_cto_ctc");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_cto_i");

            entity.HasIndex(e => e.MethodId, "ndx_fk_cto_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_cto_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_cto_owned");

            entity.HasIndex(e => new { e.InventoryId, e.CropTraitId, e.CropTraitCodeId, e.NumericValue, e.StringValue, e.MethodId }, "ndx_uniq_cto").IsUnique();

            entity.Property(e => e.CropTraitObservationId).HasColumnName("crop_trait_observation_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitCodeId).HasColumnName("crop_trait_code_id");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.DataQualityCode)
                .HasMaxLength(20)
                .HasColumnName("data_quality_code");
            entity.Property(e => e.Frequency)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("frequency");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsArchived)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_archived");
            entity.Property(e => e.MaximumValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("maximum_value");
            entity.Property(e => e.MeanValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("mean_value");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.MinimumValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("minimum_value");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_value");
            entity.Property(e => e.OriginalValue)
                .HasMaxLength(30)
                .HasColumnName("original_value");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.SampleSize).HasColumnName("sample_size");
            entity.Property(e => e.StandardDeviation)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("standard_deviation");
            entity.Property(e => e.StringValue)
                .HasMaxLength(255)
                .HasColumnName("string_value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitObservationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cto_created");

            entity.HasOne(d => d.CropTraitCode).WithMany(p => p.CropTraitObservations)
                .HasForeignKey(d => d.CropTraitCodeId)
                .HasConstraintName("fk_cto_ctc");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.CropTraitObservations)
                .HasForeignKey(d => d.CropTraitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cto_ct");

            entity.HasOne(d => d.Inventory).WithMany(p => p.CropTraitObservations)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cto_i");

            entity.HasOne(d => d.Method).WithMany(p => p.CropTraitObservations)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cto_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitObservationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_cto_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitObservationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cto_owned");
        });

        modelBuilder.Entity<CropTraitObservationDatum>(entity =>
        {
            entity.HasKey(e => e.CropTraitObservationDataId);

            entity.ToTable("crop_trait_observation_data");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ctod_created");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_ctod_ct");

            entity.HasIndex(e => e.CropTraitCodeId, "ndx_fk_ctod_ctc");

            entity.HasIndex(e => e.CropTraitObservationId, "ndx_fk_ctod_cto");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_ctod_i");

            entity.HasIndex(e => e.MethodId, "ndx_fk_ctod_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ctod_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ctod_owned");

            entity.HasIndex(e => new { e.CropTraitObservationId, e.InventoryId, e.CropTraitId, e.CropTraitCodeId, e.NumericValue, e.StringValue, e.MethodId, e.Individual }, "ndx_uniq_ctod").IsUnique();

            entity.Property(e => e.CropTraitObservationDataId).HasColumnName("crop_trait_observation_data_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitCodeId).HasColumnName("crop_trait_code_id");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.CropTraitObservationId).HasColumnName("crop_trait_observation_id");
            entity.Property(e => e.Individual).HasColumnName("individual");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_value");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StringValue)
                .HasMaxLength(255)
                .HasColumnName("string_value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CropTraitObservationDatumCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctod_created");

            entity.HasOne(d => d.CropTraitCode).WithMany(p => p.CropTraitObservationData)
                .HasForeignKey(d => d.CropTraitCodeId)
                .HasConstraintName("fk_ctod_ctc");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.CropTraitObservationData)
                .HasForeignKey(d => d.CropTraitId)
                .HasConstraintName("fk_ctod_ct");

            entity.HasOne(d => d.CropTraitObservation).WithMany(p => p.CropTraitObservationData)
                .HasForeignKey(d => d.CropTraitObservationId)
                .HasConstraintName("fk_ctod_cto");

            entity.HasOne(d => d.Inventory).WithMany(p => p.CropTraitObservationData)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctod_i");

            entity.HasOne(d => d.Method).WithMany(p => p.CropTraitObservationData)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctod_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CropTraitObservationDatumModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ctod_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.CropTraitObservationDatumOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ctod_owned");
        });

        modelBuilder.Entity<Email>(entity =>
        {
            entity.ToTable("email");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_e_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_e_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_e_owned");

            entity.Property(e => e.EmailId).HasColumnName("email_id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EmailBcc)
                .HasMaxLength(1000)
                .HasColumnName("email_bcc");
            entity.Property(e => e.EmailCc)
                .HasMaxLength(1000)
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom)
                .HasMaxLength(200)
                .HasColumnName("email_from");
            entity.Property(e => e.EmailReplyTo)
                .HasMaxLength(200)
                .HasColumnName("email_reply_to");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(1000)
                .HasColumnName("email_to");
            entity.Property(e => e.IdNumber).HasColumnName("id_number");
            entity.Property(e => e.IdType)
                .HasMaxLength(100)
                .HasColumnName("id_type");
            entity.Property(e => e.IsHtml)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_html");
            entity.Property(e => e.LastRetryDate).HasColumnName("last_retry_date");
            entity.Property(e => e.LastRetryErrorMessage).HasColumnName("last_retry_error_message");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.RetryCount).HasColumnName("retry_count");
            entity.Property(e => e.SentDate).HasColumnName("sent_date");
            entity.Property(e => e.Subject)
                .HasMaxLength(500)
                .HasColumnName("subject");
            entity.Property(e => e.ToBeSentDate).HasColumnName("to_be_sent_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmailCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_e_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.EmailModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_e_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.EmailOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_e_owned");
        });

        modelBuilder.Entity<EmailAttach>(entity =>
        {
            entity.ToTable("email_attach");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ea_created");

            entity.HasIndex(e => e.EmailId, "ndx_fk_ea_e");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ea_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ea_owned");

            entity.HasIndex(e => new { e.EmailId, e.VirtualPath }, "ndx_uniq_ea").IsUnique();

            entity.Property(e => e.EmailAttachId).HasColumnName("email_attach_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.EmailId).HasColumnName("email_id");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmailAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ea_created");

            entity.HasOne(d => d.Email).WithMany(p => p.EmailAttaches)
                .HasForeignKey(d => d.EmailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ea_e");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.EmailAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ea_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.EmailAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ea_owned");
        });

        modelBuilder.Entity<EmailTemplate>(entity =>
        {
            entity.ToTable("email_template");

            entity.Property(e => e.EmailTemplateId).HasColumnName("email_template_id");
            entity.Property(e => e.ActionCode)
                .HasMaxLength(20)
                .HasColumnName("action_code");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(3)
                .HasColumnName("category_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EmailBcc)
                .HasMaxLength(1000)
                .HasColumnName("email_bcc");
            entity.Property(e => e.EmailCc)
                .HasMaxLength(1000)
                .HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom)
                .HasMaxLength(200)
                .HasColumnName("email_from");
            entity.Property(e => e.EmailReplyTo)
                .HasMaxLength(200)
                .HasColumnName("email_reply_to");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(1000)
                .HasColumnName("email_to");
            entity.Property(e => e.IsHtml)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_html");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Subject)
                .HasMaxLength(500)
                .HasColumnName("subject");
            entity.Property(e => e.Title)
                .HasMaxLength(120)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmailTemplateCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_et_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.EmailTemplateModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_et_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.EmailTemplateOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_et_owned");
        });

        modelBuilder.Entity<Exploration>(entity =>
        {
            entity.ToTable("exploration");

            entity.HasIndex(e => e.HostCooperatorId, "ndx_fk_ex_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ex_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ex_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ex_owned");

            entity.HasIndex(e => e.ExplorationNumber, "ndx_uniq_ex").IsUnique();

            entity.Property(e => e.ExplorationId).HasColumnName("exploration_id");
            entity.Property(e => e.BeganDate).HasColumnName("began_date");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ExplorationNumber)
                .IsRequired()
                .HasMaxLength(40)
                .HasColumnName("exploration_number");
            entity.Property(e => e.FinishedDate).HasColumnName("finished_date");
            entity.Property(e => e.FiscalYear).HasColumnName("fiscal_year");
            entity.Property(e => e.FundingAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("funding_amount");
            entity.Property(e => e.FundingSource)
                .HasMaxLength(100)
                .HasColumnName("funding_source");
            entity.Property(e => e.HostCooperatorId).HasColumnName("host_cooperator_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Permits)
                .HasMaxLength(240)
                .HasColumnName("permits");
            entity.Property(e => e.Restrictions)
                .HasMaxLength(60)
                .HasColumnName("restrictions");
            entity.Property(e => e.TargetSpecies)
                .HasMaxLength(200)
                .HasColumnName("target_species");
            entity.Property(e => e.Title)
                .HasMaxLength(240)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ExplorationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ex_created");

            entity.HasOne(d => d.HostCooperator).WithMany(p => p.ExplorationHostCooperators)
                .HasForeignKey(d => d.HostCooperatorId)
                .HasConstraintName("fk_ex_c");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ExplorationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ex_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.ExplorationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ex_owned");
        });

        modelBuilder.Entity<ExplorationMap>(entity =>
        {
            entity.ToTable("exploration_map");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_exm_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_exm_created");

            entity.HasIndex(e => e.ExplorationId, "ndx_fk_exm_ex");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_exm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_exm_owned");

            entity.HasIndex(e => new { e.ExplorationId, e.CooperatorId }, "ndx_uniq_exm").IsUnique();

            entity.Property(e => e.ExplorationMapId).HasColumnName("exploration_map_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ExplorationId).HasColumnName("exploration_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.ExplorationMapCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_exm_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ExplorationMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_exm_created");

            entity.HasOne(d => d.Exploration).WithMany(p => p.ExplorationMaps)
                .HasForeignKey(d => d.ExplorationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_exm_ex");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ExplorationMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_exm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.ExplorationMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_exm_owned");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.ToTable("feedback");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_f_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_f_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_f_owned");

            entity.HasIndex(e => e.Title, "ndx_uniq_f").IsUnique();

            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IsRestrictedByInventory)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_restricted_by_inventory");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_f_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_f_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_f_owned");
        });

        modelBuilder.Entity<FeedbackAttach>(entity =>
        {
            entity.ToTable("feedback_attach");

            entity.Property(e => e.FeedbackAttachId).HasColumnName("feedback_attach_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.Feedback).WithMany(p => p.FeedbackAttaches)
                .HasForeignKey(d => d.FeedbackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fa_f");
        });

        modelBuilder.Entity<FeedbackForm>(entity =>
        {
            entity.ToTable("feedback_form");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ff_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ff_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ff_owned");

            entity.HasIndex(e => e.Title, "ndx_uniq_ff").IsUnique();

            entity.Property(e => e.FeedbackFormId).HasColumnName("feedback_form_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackFormCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ff_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackFormModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ff_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackFormOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ff_owned");
        });

        modelBuilder.Entity<FeedbackFormField>(entity =>
        {
            entity.ToTable("feedback_form_field");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fff_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fff_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fff_owned");

            entity.HasIndex(e => new { e.FeedbackFormId, e.Title }, "ndx_uniq_fff").IsUnique();

            entity.Property(e => e.FeedbackFormFieldId).HasColumnName("feedback_form_field_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(100)
                .HasColumnName("default_value");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FeedbackFormId).HasColumnName("feedback_form_id");
            entity.Property(e => e.FieldTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("field_type_code");
            entity.Property(e => e.ForeignKeyDataviewName)
                .HasMaxLength(50)
                .HasColumnName("foreign_key_dataview_name");
            entity.Property(e => e.GroupName)
                .HasMaxLength(100)
                .HasColumnName("group_name");
            entity.Property(e => e.GuiHint)
                .HasMaxLength(100)
                .HasColumnName("gui_hint");
            entity.Property(e => e.IsReadonly)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_readonly");
            entity.Property(e => e.IsRequired)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_required");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ReferencesTag)
                .HasMaxLength(50)
                .HasColumnName("references_tag");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackFormFieldCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fff_created");

            entity.HasOne(d => d.FeedbackForm).WithMany(p => p.FeedbackFormFields)
                .HasForeignKey(d => d.FeedbackFormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fff_ff");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackFormFieldModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fff_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackFormFieldOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fff_owned");
        });

        modelBuilder.Entity<FeedbackFormTrait>(entity =>
        {
            entity.ToTable("feedback_form_trait");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fft_created");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_fft_ct");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fft_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fft_owned");

            entity.HasIndex(e => new { e.FeedbackFormId, e.CropTraitId }, "ndx_uniq_fft").IsUnique();

            entity.Property(e => e.FeedbackFormTraitId).HasColumnName("feedback_form_trait_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.FeedbackFormId).HasColumnName("feedback_form_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ReferencesTag)
                .HasMaxLength(50)
                .HasColumnName("references_tag");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackFormTraitCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fft_created");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.FeedbackFormTraits)
                .HasForeignKey(d => d.CropTraitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fft_ct");

            entity.HasOne(d => d.FeedbackForm).WithMany(p => p.FeedbackFormTraits)
                .HasForeignKey(d => d.FeedbackFormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fft_ff");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackFormTraitModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fft_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackFormTraitOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fft_owned");
        });

        modelBuilder.Entity<FeedbackInventory>(entity =>
        {
            entity.ToTable("feedback_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fi_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fi_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fi_owned");

            entity.HasIndex(e => new { e.FeedbackId, e.InventoryId }, "ndx_uniq_fi").IsUnique();

            entity.Property(e => e.FeedbackInventoryId).HasColumnName("feedback_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fi_created");

            entity.HasOne(d => d.Feedback).WithMany(p => p.FeedbackInventories)
                .HasForeignKey(d => d.FeedbackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fi_f");

            entity.HasOne(d => d.Inventory).WithMany(p => p.FeedbackInventories)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fi_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fi_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fi_owned");
        });

        modelBuilder.Entity<FeedbackReport>(entity =>
        {
            entity.ToTable("feedback_report");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fr_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fr_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fr_owned");

            entity.HasIndex(e => e.Title, "ndx_uniq_fr").IsUnique();

            entity.Property(e => e.FeedbackReportId).HasColumnName("feedback_report_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CustomDueDate).HasColumnName("custom_due_date");
            entity.Property(e => e.DueInterval).HasColumnName("due_interval");
            entity.Property(e => e.FeedbackFormId).HasColumnName("feedback_form_id");
            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.InitialEmailSubject)
                .HasMaxLength(500)
                .HasColumnName("initial_email_subject");
            entity.Property(e => e.InitialEmailText).HasColumnName("initial_email_text");
            entity.Property(e => e.IntervalLengthCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("interval_length_code");
            entity.Property(e => e.IntervalTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("interval_type_code");
            entity.Property(e => e.IsNotified15daysPrior)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_notified_15days_prior");
            entity.Property(e => e.IsNotified30daysPrior)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_notified_30days_prior");
            entity.Property(e => e.IsNotifiedInitially)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_notified_initially");
            entity.Property(e => e.IsObservationData)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_observation_data");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Prior15EmailSubject)
                .HasMaxLength(500)
                .HasColumnName("prior15_email_subject");
            entity.Property(e => e.Prior15EmailText).HasColumnName("prior15_email_text");
            entity.Property(e => e.Prior30EmailSubject)
                .HasMaxLength(500)
                .HasColumnName("prior30_email_subject");
            entity.Property(e => e.Prior30EmailText).HasColumnName("prior30_email_text");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackReportCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fr_created");

            entity.HasOne(d => d.FeedbackForm).WithMany(p => p.FeedbackReports)
                .HasForeignKey(d => d.FeedbackFormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fr_ff");

            entity.HasOne(d => d.Feedback).WithMany(p => p.FeedbackReports)
                .HasForeignKey(d => d.FeedbackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fr_f");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackReportModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fr_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackReportOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fr_owned");
        });

        modelBuilder.Entity<FeedbackReportAttach>(entity =>
        {
            entity.ToTable("feedback_report_attach");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fa_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fa_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fa_owned");

            entity.HasIndex(e => e.FeedbackReportId, "ndx_fk_frepa");

            entity.HasIndex(e => new { e.FeedbackReportId, e.VirtualPath }, "ndx_uniq_fa").IsUnique();

            entity.Property(e => e.FeedbackReportAttachId).HasColumnName("feedback_report_attach_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.FeedbackReportId).HasColumnName("feedback_report_id");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackReportAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fa_created");

            entity.HasOne(d => d.FeedbackReport).WithMany(p => p.FeedbackReportAttaches)
                .HasForeignKey(d => d.FeedbackReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_frepa_frep");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackReportAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fa_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackReportAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fa_owned");
        });

        modelBuilder.Entity<FeedbackResult>(entity =>
        {
            entity.ToTable("feedback_result");

            entity.HasIndex(e => e.FeedbackResultGroupId, "ndf_fk_fres_fresg");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fres_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_fres_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fres_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fres_owned");

            entity.Property(e => e.FeedbackResultId).HasColumnName("feedback_result_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FeedbackResultGroupId).HasColumnName("feedback_result_group_id");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackResultCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fres_created");

            entity.HasOne(d => d.FeedbackResultGroup).WithMany(p => p.FeedbackResults)
                .HasForeignKey(d => d.FeedbackResultGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fres_fresg");

            entity.HasOne(d => d.Inventory).WithMany(p => p.FeedbackResults)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fres_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackResultModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fres_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackResultOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fres_owned");
        });

        modelBuilder.Entity<FeedbackResultAttach>(entity =>
        {
            entity.ToTable("feedback_result_attach");

            entity.HasIndex(e => e.FeedbackResultId, "ndx_fk_fresa");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fresa_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fresa_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fresa_owned");

            entity.HasIndex(e => new { e.FeedbackResultId, e.VirtualPath }, "ndx_uniq_fresa").IsUnique();

            entity.Property(e => e.FeedbackResultAttachId).HasColumnName("feedback_result_attach_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.FeedbackResultId).HasColumnName("feedback_result_id");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackResultAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresa_created");

            entity.HasOne(d => d.FeedbackResult).WithMany(p => p.FeedbackResultAttaches)
                .HasForeignKey(d => d.FeedbackResultId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresa_fres");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackResultAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fresa_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackResultAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresa_owned");
        });

        modelBuilder.Entity<FeedbackResultField>(entity =>
        {
            entity.ToTable("feedback_result_field");

            entity.HasIndex(e => e.FeedbackFormFieldId, "fk_fresf_fff");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fresf_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fresf_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fresf_owned");

            entity.HasIndex(e => new { e.FeedbackResultId, e.FeedbackFormFieldId }, "ndx_uniq_fresf").IsUnique();

            entity.Property(e => e.FeedbackResultFieldId).HasColumnName("feedback_result_field_id");
            entity.Property(e => e.AdminValue)
                .HasMaxLength(500)
                .HasColumnName("admin_value");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FeedbackFormFieldId).HasColumnName("feedback_form_field_id");
            entity.Property(e => e.FeedbackResultId).HasColumnName("feedback_result_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StringValue)
                .HasMaxLength(500)
                .HasColumnName("string_value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackResultFieldCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresf_created");

            entity.HasOne(d => d.FeedbackFormField).WithMany(p => p.FeedbackResultFields)
                .HasForeignKey(d => d.FeedbackFormFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresf_fff");

            entity.HasOne(d => d.FeedbackResult).WithMany(p => p.FeedbackResultFields)
                .HasForeignKey(d => d.FeedbackResultId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresf_fres");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackResultFieldModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fresf_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackResultFieldOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresf_owned");
        });

        modelBuilder.Entity<FeedbackResultGroup>(entity =>
        {
            entity.ToTable("feedback_result_group");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_frg_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_frg_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_frg_owned");

            entity.HasIndex(e => e.ParticipantCooperatorId, "ndx_frg_c");

            entity.HasIndex(e => new { e.FeedbackReportId, e.ParticipantCooperatorId, e.OrderRequestId }, "ndx_uniq_fres").IsUnique();

            entity.Property(e => e.FeedbackResultGroupId).HasColumnName("feedback_result_group_id");
            entity.Property(e => e.AcceptedDate).HasColumnName("accepted_date");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DueDate).HasColumnName("due_date");
            entity.Property(e => e.FeedbackReportId).HasColumnName("feedback_report_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ParticipantCooperatorId).HasColumnName("participant_cooperator_id");
            entity.Property(e => e.RejectedDate).HasColumnName("rejected_date");
            entity.Property(e => e.StartedDate).HasColumnName("started_date");
            entity.Property(e => e.SubmittedDate).HasColumnName("submitted_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackResultGroupCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_frg_created");

            entity.HasOne(d => d.FeedbackReport).WithMany(p => p.FeedbackResultGroups)
                .HasForeignKey(d => d.FeedbackReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_frg_fr");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackResultGroupModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_frg_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackResultGroupOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_frg_owned");
        });

        modelBuilder.Entity<FeedbackResultTraitOb>(entity =>
        {
            entity.HasKey(e => e.FeedbackResultTraitObsId);

            entity.ToTable("feedback_result_trait_obs");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_fresto_created");

            entity.HasIndex(e => e.CropTraitId, "ndx_fk_fresto_ct");

            entity.HasIndex(e => e.CropTraitCodeId, "ndx_fk_fresto_ctc");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_fresto_i");

            entity.HasIndex(e => e.MethodId, "ndx_fk_fresto_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_fresto_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_fresto_owned");

            entity.HasIndex(e => new { e.FeedbackResultId, e.InventoryId, e.CropTraitId, e.CropTraitCodeId, e.NumericValue, e.StringValue, e.MethodId }, "ndx_uniq_fresto").IsUnique();

            entity.Property(e => e.FeedbackResultTraitObsId).HasColumnName("feedback_result_trait_obs_id");
            entity.Property(e => e.AdminValue)
                .HasMaxLength(255)
                .HasColumnName("admin_value");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropTraitCodeId).HasColumnName("crop_trait_code_id");
            entity.Property(e => e.CropTraitId).HasColumnName("crop_trait_id");
            entity.Property(e => e.DataQualityCode)
                .HasMaxLength(20)
                .HasColumnName("data_quality_code");
            entity.Property(e => e.FeedbackFormTraitId).HasColumnName("feedback_form_trait_id");
            entity.Property(e => e.FeedbackResultId).HasColumnName("feedback_result_id");
            entity.Property(e => e.Frequency)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("frequency");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsArchived)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_archived");
            entity.Property(e => e.MaximumValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("maximum_value");
            entity.Property(e => e.MeanValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("mean_value");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.MinimumValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("minimum_value");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_value");
            entity.Property(e => e.OriginalValue)
                .HasMaxLength(30)
                .HasColumnName("original_value");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.SampleSize).HasColumnName("sample_size");
            entity.Property(e => e.StandardDeviation)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("standard_deviation");
            entity.Property(e => e.StringValue)
                .HasMaxLength(255)
                .HasColumnName("string_value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FeedbackResultTraitObCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresto_created");

            entity.HasOne(d => d.CropTraitCode).WithMany(p => p.FeedbackResultTraitObs)
                .HasForeignKey(d => d.CropTraitCodeId)
                .HasConstraintName("fk_fresto_ctc");

            entity.HasOne(d => d.CropTrait).WithMany(p => p.FeedbackResultTraitObs)
                .HasForeignKey(d => d.CropTraitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresto_ct");

            entity.HasOne(d => d.FeedbackResult).WithMany(p => p.FeedbackResultTraitObs)
                .HasForeignKey(d => d.FeedbackResultId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresto_fr");

            entity.HasOne(d => d.Inventory).WithMany(p => p.FeedbackResultTraitObs)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresto_i");

            entity.HasOne(d => d.Method).WithMany(p => p.FeedbackResultTraitObs)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_fresto_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FeedbackResultTraitObModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_fresto_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.FeedbackResultTraitObOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_fresto_owned");
        });

        modelBuilder.Entity<GeneticAnnotation>(entity =>
        {
            entity.ToTable("genetic_annotation");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ga_created");

            entity.HasIndex(e => e.GeneticMarkerId, "ndx_fk_ga_gm");

            entity.HasIndex(e => e.MethodId, "ndx_fk_ga_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ga_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ga_owned");

            entity.HasIndex(e => new { e.GeneticMarkerId, e.MethodId }, "ndx_uniq_ga").IsUnique();

            entity.Property(e => e.GeneticAnnotationId).HasColumnName("genetic_annotation_id");
            entity.Property(e => e.AssayMethod).HasColumnName("assay_method");
            entity.Property(e => e.ControlValues).HasColumnName("control_values");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GeneticMarkerId).HasColumnName("genetic_marker_id");
            entity.Property(e => e.MaxGobAlleles).HasColumnName("max_gob_alleles");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ObservationAllelesCount).HasColumnName("observation_alleles_count");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ScoringMethod).HasColumnName("scoring_method");
            entity.Property(e => e.SizeAlleles)
                .HasMaxLength(100)
                .HasColumnName("size_alleles");
            entity.Property(e => e.UnusualAlleles)
                .HasMaxLength(100)
                .HasColumnName("unusual_alleles");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GeneticAnnotationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ga_created");

            entity.HasOne(d => d.GeneticMarker).WithMany(p => p.GeneticAnnotations)
                .HasForeignKey(d => d.GeneticMarkerId)
                .HasConstraintName("fk_ga_gm");

            entity.HasOne(d => d.Method).WithMany(p => p.GeneticAnnotations)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ga_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GeneticAnnotationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ga_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GeneticAnnotationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ga_owned");
        });

        modelBuilder.Entity<GeneticMarker>(entity =>
        {
            entity.ToTable("genetic_marker");

            entity.HasIndex(e => e.CropId, "ndx_fk_gm_cr");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_gm_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_gm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_gm_owned");

            entity.HasIndex(e => new { e.CropId, e.Name }, "ndx_uniq_gm_crop").IsUnique();

            entity.Property(e => e.GeneticMarkerId).HasColumnName("genetic_marker_id");
            entity.Property(e => e.AssayConditions)
                .HasMaxLength(4000)
                .HasColumnName("assay_conditions");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CropId).HasColumnName("crop_id");
            entity.Property(e => e.GenbankNumber)
                .HasMaxLength(20)
                .HasColumnName("genbank_number");
            entity.Property(e => e.KnownStandards).HasColumnName("known_standards");
            entity.Property(e => e.MapLocation)
                .HasMaxLength(100)
                .HasColumnName("map_location");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PolyTypeCode)
                .HasMaxLength(20)
                .HasColumnName("poly_type_code");
            entity.Property(e => e.Position)
                .HasMaxLength(1000)
                .HasColumnName("position");
            entity.Property(e => e.Primers)
                .HasMaxLength(200)
                .HasColumnName("primers");
            entity.Property(e => e.RangeProducts)
                .HasMaxLength(60)
                .HasColumnName("range_products");
            entity.Property(e => e.RepeatMotif)
                .HasMaxLength(100)
                .HasColumnName("repeat_motif");
            entity.Property(e => e.Synonyms)
                .HasMaxLength(200)
                .HasColumnName("synonyms");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GeneticMarkerCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gm_created");

            entity.HasOne(d => d.Crop).WithMany(p => p.GeneticMarkers)
                .HasForeignKey(d => d.CropId)
                .HasConstraintName("fk_gm_cr");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GeneticMarkerModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_gm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GeneticMarkerOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gm_owned");
        });

        modelBuilder.Entity<GeneticObservation>(entity =>
        {
            entity.ToTable("genetic_observation");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_go_created");

            entity.HasIndex(e => e.GeneticAnnotationId, "ndx_fk_go_ga");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_go_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_go_owned");

            entity.HasIndex(e => new { e.InventoryId, e.GeneticAnnotationId }, "ndx_uniq_go").IsUnique();

            entity.Property(e => e.GeneticObservationId).HasColumnName("genetic_observation_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DataQualityCode)
                .HasMaxLength(20)
                .HasColumnName("data_quality_code");
            entity.Property(e => e.Frequency)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("frequency");
            entity.Property(e => e.GeneticAnnotationId).HasColumnName("genetic_annotation_id");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsArchived)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_archived");
            entity.Property(e => e.MaximumValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("maximum_value");
            entity.Property(e => e.MeanValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("mean_value");
            entity.Property(e => e.MinimumValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("minimum_value");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.SampleSize).HasColumnName("sample_size");
            entity.Property(e => e.StandardDeviation)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("standard_deviation");
            entity.Property(e => e.Value)
                .HasMaxLength(1000)
                .HasColumnName("value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GeneticObservationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_go_created");

            entity.HasOne(d => d.GeneticAnnotation).WithMany(p => p.GeneticObservations)
                .HasForeignKey(d => d.GeneticAnnotationId)
                .HasConstraintName("fk_go_ga");

            entity.HasOne(d => d.Inventory).WithMany(p => p.GeneticObservations)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_go_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GeneticObservationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_go_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GeneticObservationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_go_owned");
        });

        modelBuilder.Entity<GeneticObservationDatum>(entity =>
        {
            entity.HasKey(e => e.GeneticObservationDataId);

            entity.ToTable("genetic_observation_data");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_god_created");

            entity.HasIndex(e => e.GeneticAnnotationId, "ndx_fk_god_ga");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_god_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_god_modified");

            entity.HasIndex(e => e.GeneticObservationId, "ndx_fk_god_ob");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_god_owned");

            entity.HasIndex(e => new { e.GeneticAnnotationId, e.InventoryId, e.Individual, e.IndividualAlleleNumber }, "ndx_uniq_god").IsUnique();

            entity.Property(e => e.GeneticObservationDataId).HasColumnName("genetic_observation_data_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GeneticAnnotationId).HasColumnName("genetic_annotation_id");
            entity.Property(e => e.GeneticObservationId).HasColumnName("genetic_observation_id");
            entity.Property(e => e.Individual).HasColumnName("individual");
            entity.Property(e => e.IndividualAlleleNumber).HasColumnName("individual_allele_number");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(1000)
                .HasColumnName("value");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GeneticObservationDatumCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_god_created");

            entity.HasOne(d => d.GeneticAnnotation).WithMany(p => p.GeneticObservationData)
                .HasForeignKey(d => d.GeneticAnnotationId)
                .HasConstraintName("fk_god_ga");

            entity.HasOne(d => d.GeneticObservation).WithMany(p => p.GeneticObservationData)
                .HasForeignKey(d => d.GeneticObservationId)
                .HasConstraintName("fk_god_ob");

            entity.HasOne(d => d.Inventory).WithMany(p => p.GeneticObservationData)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_god_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GeneticObservationDatumModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_god_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GeneticObservationDatumOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_god_owned");
        });

        modelBuilder.Entity<GenevaSiteInventory>(entity =>
        {
            entity.ToTable("geneva_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_gsi_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_gsi_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_gsi_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_gsi_owned");

            entity.Property(e => e.GenevaSiteInventoryId).HasColumnName("geneva_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FlowerTypeCode)
                .HasMaxLength(20)
                .HasColumnName("flower_type_code");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.RestrictionCode)
                .HasMaxLength(20)
                .HasColumnName("restriction_code");
            entity.Property(e => e.TruenessToTypeCode)
                .HasMaxLength(20)
                .HasColumnName("trueness_to_type_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GenevaSiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gsi_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.GenevaSiteInventory)
                .HasForeignKey<GenevaSiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gsi_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GenevaSiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_gsi_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GenevaSiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gsi_owned");
        });

        modelBuilder.Entity<Geography>(entity =>
        {
            entity.ToTable("geography");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_g_created");

            entity.HasIndex(e => e.CurrentGeographyId, "ndx_fk_g_cur_g");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_g_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_g_owned");

            entity.HasIndex(e => e.Adm1, "ndx_g_adm1");

            entity.HasIndex(e => e.Adm2, "ndx_g_adm2");

            entity.HasIndex(e => e.Adm3, "ndx_g_adm3");

            entity.HasIndex(e => e.Adm4, "ndx_g_adm4");

            entity.HasIndex(e => e.CountryCode, "ndx_g_country_code");

            entity.HasIndex(e => new { e.CountryCode, e.Adm1, e.Adm1TypeCode, e.Adm2, e.Adm3, e.Adm4 }, "ndx_uniq_geo").IsUnique();

            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.Adm1)
                .HasMaxLength(100)
                .HasColumnName("adm1");
            entity.Property(e => e.Adm1Abbrev)
                .HasMaxLength(10)
                .HasColumnName("adm1_abbrev");
            entity.Property(e => e.Adm1TypeCode)
                .HasMaxLength(20)
                .HasColumnName("adm1_type_code");
            entity.Property(e => e.Adm2)
                .HasMaxLength(50)
                .HasColumnName("adm2");
            entity.Property(e => e.Adm2Abbrev)
                .HasMaxLength(10)
                .HasColumnName("adm2_abbrev");
            entity.Property(e => e.Adm2TypeCode)
                .HasMaxLength(20)
                .HasColumnName("adm2_type_code");
            entity.Property(e => e.Adm3)
                .HasMaxLength(50)
                .HasColumnName("adm3");
            entity.Property(e => e.Adm3Abbrev)
                .HasMaxLength(10)
                .HasColumnName("adm3_abbrev");
            entity.Property(e => e.Adm3TypeCode)
                .HasMaxLength(20)
                .HasColumnName("adm3_type_code");
            entity.Property(e => e.Adm4)
                .HasMaxLength(50)
                .HasColumnName("adm4");
            entity.Property(e => e.Adm4Abbrev)
                .HasMaxLength(10)
                .HasColumnName("adm4_abbrev");
            entity.Property(e => e.Adm4TypeCode)
                .HasMaxLength(20)
                .HasColumnName("adm4_type_code");
            entity.Property(e => e.ChangedDate).HasColumnName("changed_date");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("country_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CurrentGeographyId).HasColumnName("current_geography_id");
            entity.Property(e => e.IsValid)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_valid");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GeographyCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_g_created");

            entity.HasOne(d => d.CurrentGeography).WithMany(p => p.InverseCurrentGeography)
                .HasForeignKey(d => d.CurrentGeographyId)
                .HasConstraintName("fk_g_cur_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GeographyModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_g_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GeographyOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_g_owned");
        });

        modelBuilder.Entity<GeographyRegionMap>(entity =>
        {
            entity.ToTable("geography_region_map");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_grm_created");

            entity.HasIndex(e => e.GeographyId, "ndx_fk_grm_g");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_grm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_grm_owned");

            entity.HasIndex(e => e.RegionId, "ndx_fk_grm_r");

            entity.HasIndex(e => new { e.GeographyId, e.RegionId }, "ndx_uniq_grm").IsUnique();

            entity.Property(e => e.GeographyRegionMapId).HasColumnName("geography_region_map_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.RegionId).HasColumnName("region_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GeographyRegionMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_grm_created");

            entity.HasOne(d => d.Geography).WithMany(p => p.GeographyRegionMaps)
                .HasForeignKey(d => d.GeographyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_grm_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GeographyRegionMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_grm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GeographyRegionMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_grm_owned");

            entity.HasOne(d => d.Region).WithMany(p => p.GeographyRegionMaps)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fo_grm_r");
        });

        modelBuilder.Entity<GspiSiteInventory>(entity =>
        {
            entity.ToTable("gspi_site_inventory");

            entity.HasIndex(e => e.SplitInventoryId, "ndx_fk_gspiivsi_i");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_gspisi_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_gspisi_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_gspisi_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_gspisi_owned");

            entity.Property(e => e.GspiSiteInventoryId).HasColumnName("gspi_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.IncreaseLocation)
                .HasMaxLength(20)
                .HasColumnName("increase_location");
            entity.Property(e => e.IncreaseYear)
                .HasMaxLength(4)
                .HasColumnName("increase_year");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.LotTypeCode)
                .HasMaxLength(20)
                .HasColumnName("lot_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note)
                .HasMaxLength(240)
                .HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Plot)
                .HasMaxLength(30)
                .HasColumnName("plot");
            entity.Property(e => e.PollenEnvironment)
                .HasMaxLength(20)
                .HasColumnName("pollen_environment");
            entity.Property(e => e.PollenProcedureCode)
                .HasMaxLength(20)
                .HasColumnName("pollen_procedure_code");
            entity.Property(e => e.PollenVectorCode)
                .HasMaxLength(20)
                .HasColumnName("pollen_vector_code");
            entity.Property(e => e.SeedAge)
                .HasMaxLength(20)
                .HasColumnName("seed_age");
            entity.Property(e => e.SeedQuantity).HasColumnName("seed_quantity");
            entity.Property(e => e.SplitInventoryId).HasColumnName("split_inventory_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.GspiSiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gspisi_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.GspiSiteInventoryInventory)
                .HasForeignKey<GspiSiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gspisi_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.GspiSiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_gspisi_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.GspiSiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_gspisi_owned");

            entity.HasOne(d => d.SplitInventory).WithMany(p => p.GspiSiteInventorySplitInventories)
                .HasForeignKey(d => d.SplitInventoryId)
                .HasConstraintName("fk_gspiivsi_i");
        });

        modelBuilder.Entity<ImprovementLevelMcpdCodeMap>(entity =>
        {
            entity.ToTable("improvement_level_mcpd_code_map");

            entity.Property(e => e.ImprovementLevelMcpdCodeMapId).HasColumnName("improvement_level_mcpd_code_map_id");
            entity.Property(e => e.ImprovementLevelCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("improvement_level_code");
            entity.Property(e => e.McpdCode)
                .HasMaxLength(20)
                .HasColumnName("mcpd_code");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.ToTable("inventory");

            entity.HasIndex(e => e.InventoryIdString, "id_dbo_inventory");

            entity.HasIndex(e => e.AccessionId, "ndx_fk_i_a");

            entity.HasIndex(e => e.BackupInventoryId, "ndx_fk_i_backup_i");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_i_created");

            entity.HasIndex(e => e.ProductionLocationGeographyId, "ndx_fk_i_g");

            entity.HasIndex(e => e.InventoryMaintPolicyId, "ndx_fk_i_im");

            entity.HasIndex(e => e.PreservationMethodId, "ndx_fk_i_m1");

            entity.HasIndex(e => e.RegenerationMethodId, "ndx_fk_i_m2");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_i_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_i_owned");

            entity.HasIndex(e => e.ParentInventoryId, "ndx_fk_i_parent_i");

            entity.HasIndex(e => e.InventoryNumberPart2, "ndx_inv_number");

            entity.HasIndex(e => e.InventoryNumberPart3, "ndx_inv_part3");

            entity.HasIndex(e => e.InventoryNumberPart1, "ndx_inv_prefix");

            entity.HasIndex(e => new { e.InventoryNumberPart1, e.InventoryNumberPart2, e.InventoryNumberPart3, e.FormTypeCode }, "ndx_uniq_inv").IsUnique();

            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.AvailabilityEndDate).HasColumnName("availability_end_date");
            entity.Property(e => e.AvailabilityStartDate).HasColumnName("availability_start_date");
            entity.Property(e => e.AvailabilityStatusCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("availability_status_code");
            entity.Property(e => e.AvailabilityStatusNote).HasColumnName("availability_status_note");
            entity.Property(e => e.BackupInventoryId).HasColumnName("backup_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DigitalObjectIdentifier)
                .HasMaxLength(200)
                .HasColumnName("digital_object_identifier");
            entity.Property(e => e.DistributionCriticalQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("distribution_critical_quantity");
            entity.Property(e => e.DistributionDefaultFormCode)
                .HasMaxLength(20)
                .HasColumnName("distribution_default_form_code");
            entity.Property(e => e.DistributionDefaultQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("distribution_default_quantity");
            entity.Property(e => e.DistributionUnitCode)
                .HasMaxLength(20)
                .HasColumnName("distribution_unit_code");
            entity.Property(e => e.Doi)
                .HasMaxLength(20)
                .HasColumnName("doi");
            entity.Property(e => e.FormTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("form_type_code");
            entity.Property(e => e.HundredSeedWeight)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("hundred_seed_weight");
            entity.Property(e => e.InventoryIdString)
                .HasMaxLength(153)
                .HasComputedColumnSql("(((([inventory_number_part1]+coalesce(' '+CONVERT([nvarchar],[inventory_number_part2]),''))+coalesce(' '+[inventory_number_part3],''))+' ')+[form_type_code])", true)
                .HasColumnName("inventory_id_string");
            entity.Property(e => e.InventoryMaintPolicyId).HasColumnName("inventory_maint_policy_id");
            entity.Property(e => e.InventoryNumberPart1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("inventory_number_part1");
            entity.Property(e => e.InventoryNumberPart2).HasColumnName("inventory_number_part2");
            entity.Property(e => e.InventoryNumberPart3)
                .HasMaxLength(50)
                .HasColumnName("inventory_number_part3");
            entity.Property(e => e.IsAutoDeducted)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_auto_deducted");
            entity.Property(e => e.IsAvailable)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_available");
            entity.Property(e => e.IsDistributable)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_distributable");
            entity.Property(e => e.Latitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("longitude");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ParentInventoryId).HasColumnName("parent_inventory_id");
            entity.Property(e => e.PathogenStatusCode)
                .HasMaxLength(20)
                .HasColumnName("pathogen_status_code");
            entity.Property(e => e.PlantSexCode)
                .HasMaxLength(20)
                .HasColumnName("plant_sex_code");
            entity.Property(e => e.PollinationMethodCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_method_code");
            entity.Property(e => e.PollinationVectorCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_vector_code");
            entity.Property(e => e.PreservationMethodId).HasColumnName("preservation_method_id");
            entity.Property(e => e.ProductionLocationGeographyId).HasColumnName("production_location_geography_id");
            entity.Property(e => e.PropagationDate).HasColumnName("propagation_date");
            entity.Property(e => e.PropagationDateCode)
                .HasMaxLength(20)
                .HasColumnName("propagation_date_code");
            entity.Property(e => e.PropagationTechniqueCode)
                .HasMaxLength(20)
                .HasColumnName("propagation_technique_code");
            entity.Property(e => e.QuantityOnHand)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("quantity_on_hand");
            entity.Property(e => e.QuantityOnHandUnitCode)
                .HasMaxLength(20)
                .HasColumnName("quantity_on_hand_unit_code");
            entity.Property(e => e.RegenerationCriticalQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("regeneration_critical_quantity");
            entity.Property(e => e.RegenerationMethodId).HasColumnName("regeneration_method_id");
            entity.Property(e => e.Rootstock)
                .HasMaxLength(200)
                .HasColumnName("rootstock");
            entity.Property(e => e.StorageLocationPart1)
                .HasMaxLength(20)
                .HasColumnName("storage_location_part1");
            entity.Property(e => e.StorageLocationPart2)
                .HasMaxLength(20)
                .HasColumnName("storage_location_part2");
            entity.Property(e => e.StorageLocationPart3)
                .HasMaxLength(20)
                .HasColumnName("storage_location_part3");
            entity.Property(e => e.StorageLocationPart4)
                .HasMaxLength(20)
                .HasColumnName("storage_location_part4");
            entity.Property(e => e.WebAvailabilityNote).HasColumnName("web_availability_note");

            entity.HasOne(d => d.Accession).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.AccessionId)
                .HasConstraintName("fk_i_a");

            entity.HasOne(d => d.BackupInventory).WithMany(p => p.InverseBackupInventory)
                .HasForeignKey(d => d.BackupInventoryId)
                .HasConstraintName("fk_i_backup_i");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_i_created");

            entity.HasOne(d => d.InventoryMaintPolicy).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.InventoryMaintPolicyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_i_im");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_i_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_i_owned");

            entity.HasOne(d => d.ParentInventory).WithMany(p => p.InverseParentInventory)
                .HasForeignKey(d => d.ParentInventoryId)
                .HasConstraintName("fk_i_parent_i");

            entity.HasOne(d => d.PreservationMethod).WithMany(p => p.InventoryPreservationMethods)
                .HasForeignKey(d => d.PreservationMethodId)
                .HasConstraintName("fk_i_m1");

            entity.HasOne(d => d.ProductionLocationGeography).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.ProductionLocationGeographyId)
                .HasConstraintName("fk_i_g");

            entity.HasOne(d => d.RegenerationMethod).WithMany(p => p.InventoryRegenerationMethods)
                .HasForeignKey(d => d.RegenerationMethodId)
                .HasConstraintName("fk_i_m2");
        });

        modelBuilder.Entity<InventoryAction>(entity =>
        {
            entity.ToTable("inventory_action");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_ia_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ia_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_ia_i");

            entity.HasIndex(e => e.MethodId, "ndx_fk_ia_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ia_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ia_owned");

            entity.HasIndex(e => new { e.InventoryId, e.ActionNameCode, e.StartedDate, e.CompletedDate, e.FormCode, e.Quantity, e.MethodId, e.CooperatorId }, "ndx_uniq_ia").IsUnique();

            entity.Property(e => e.InventoryActionId).HasColumnName("inventory_action_id");
            entity.Property(e => e.ActionNameCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("action_name_code");
            entity.Property(e => e.CompletedDate).HasColumnName("completed_date");
            entity.Property(e => e.CompletedDateCode)
                .HasMaxLength(20)
                .HasColumnName("completed_date_code");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FormCode)
                .HasMaxLength(20)
                .HasColumnName("form_code");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Quantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("quantity");
            entity.Property(e => e.QuantityUnitCode)
                .HasMaxLength(20)
                .HasColumnName("quantity_unit_code");
            entity.Property(e => e.StartedDate).HasColumnName("started_date");
            entity.Property(e => e.StartedDateCode)
                .HasMaxLength(20)
                .HasColumnName("started_date_code");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.InventoryActionCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_ia_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryActionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ia_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryActions)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ia_i");

            entity.HasOne(d => d.Method).WithMany(p => p.InventoryActions)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_ia_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryActionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ia_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryActionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ia_owned");
        });

        modelBuilder.Entity<InventoryMaintPolicy>(entity =>
        {
            entity.ToTable("inventory_maint_policy");

            entity.HasIndex(e => e.CuratorCooperatorId, "ndx_fk_im_co");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_im_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_im_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_im_owned");

            entity.HasIndex(e => e.MaintenanceName, "ndx_uniq_im").IsUnique();

            entity.Property(e => e.InventoryMaintPolicyId).HasColumnName("inventory_maint_policy_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CuratorCooperatorId).HasColumnName("curator_cooperator_id");
            entity.Property(e => e.DistributionCriticalQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("distribution_critical_quantity");
            entity.Property(e => e.DistributionDefaultFormCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("distribution_default_form_code");
            entity.Property(e => e.DistributionDefaultQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("distribution_default_quantity");
            entity.Property(e => e.DistributionUnitCode)
                .HasMaxLength(20)
                .HasColumnName("distribution_unit_code");
            entity.Property(e => e.FormTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("form_type_code");
            entity.Property(e => e.IsAutoDeducted)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_auto_deducted");
            entity.Property(e => e.MaintenanceName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("maintenance_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.QuantityOnHandUnitCode)
                .HasMaxLength(20)
                .HasColumnName("quantity_on_hand_unit_code");
            entity.Property(e => e.RegenerationCriticalQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("regeneration_critical_quantity");
            entity.Property(e => e.RegenerationMethodCode)
                .HasMaxLength(20)
                .HasColumnName("regeneration_method_code");
            entity.Property(e => e.WebAvailabilityNote).HasColumnName("web_availability_note");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryMaintPolicyCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_im_created");

            entity.HasOne(d => d.CuratorCooperator).WithMany(p => p.InventoryMaintPolicyCuratorCooperators)
                .HasForeignKey(d => d.CuratorCooperatorId)
                .HasConstraintName("fk_im_co");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryMaintPolicyModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_im_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryMaintPolicyOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_im_owned");
        });

        modelBuilder.Entity<InventoryMaintPolicySeason>(entity =>
        {
            entity.ToTable("inventory_maint_policy_season");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_imps_created");

            entity.HasIndex(e => e.InventoryMaintPolicyId, "ndx_fk_imps_im");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_imps_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_imps_owned");

            entity.HasIndex(e => new { e.InventoryMaintPolicyId, e.DistributionFormTypeCode }, "ndx_uniq_imps").IsUnique();

            entity.Property(e => e.InventoryMaintPolicySeasonId).HasColumnName("inventory_maint_policy_season_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DistributionFormTypeCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("distribution_form_type_code");
            entity.Property(e => e.DistributionQuantity)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("distribution_quantity");
            entity.Property(e => e.DistributionUnitCode)
                .HasMaxLength(20)
                .HasColumnName("distribution_unit_code");
            entity.Property(e => e.InventoryMaintPolicyId).HasColumnName("inventory_maint_policy_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SeasonalEndDate).HasColumnName("seasonal_end_date");
            entity.Property(e => e.SeasonalStartDate).HasColumnName("seasonal_start_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryMaintPolicySeasonCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_imps_created");

            entity.HasOne(d => d.InventoryMaintPolicy).WithMany(p => p.InventoryMaintPolicySeasons)
                .HasForeignKey(d => d.InventoryMaintPolicyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_imps_imp");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryMaintPolicySeasonModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_imps_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryMaintPolicySeasonOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_imps_owned");
        });

        modelBuilder.Entity<InventoryQualityStatus>(entity =>
        {
            entity.ToTable("inventory_quality_status");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_iqs_created");

            entity.HasIndex(e => e.TesterCooperatorId, "ndx_fk_iqs_cur");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_iqs_i");

            entity.HasIndex(e => e.MethodId, "ndx_fk_iqs_me");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_iqs_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_iqs_owned");

            entity.HasIndex(e => new { e.TestTypeCode, e.ContaminantCode }, "ndx_iqs_test");

            entity.HasIndex(e => new { e.InventoryId, e.TestTypeCode, e.ContaminantCode, e.StartedDate, e.PlantPartTestedCode, e.TestResultsScoreTypeCode, e.Replicate }, "ndx_uniq_iqs").IsUnique();

            entity.Property(e => e.InventoryQualityStatusId).HasColumnName("inventory_quality_status_id");
            entity.Property(e => e.CompletedCount).HasColumnName("completed_count");
            entity.Property(e => e.CompletedDate).HasColumnName("completed_date");
            entity.Property(e => e.CompletedDateCode)
                .HasMaxLength(20)
                .HasColumnName("completed_date_code");
            entity.Property(e => e.ContaminantCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("contaminant_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.NegativeControl)
                .HasColumnType("decimal(10, 5)")
                .HasColumnName("negative_control");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PlantPartTestedCode)
                .HasMaxLength(20)
                .HasColumnName("plant_part_tested_code");
            entity.Property(e => e.PlateOrAssayNumber)
                .HasMaxLength(40)
                .HasColumnName("plate_or_assay_number");
            entity.Property(e => e.PositiveControl)
                .HasColumnType("decimal(10, 5)")
                .HasColumnName("positive_control");
            entity.Property(e => e.Replicate).HasColumnName("replicate");
            entity.Property(e => e.RequiredReplicationCount).HasColumnName("required_replication_count");
            entity.Property(e => e.StartedCount).HasColumnName("started_count");
            entity.Property(e => e.StartedDate).HasColumnName("started_date");
            entity.Property(e => e.StartedDateCode)
                .HasMaxLength(20)
                .HasColumnName("started_date_code");
            entity.Property(e => e.TestResultCode)
                .HasMaxLength(20)
                .HasColumnName("test_result_code");
            entity.Property(e => e.TestResultsScore)
                .HasMaxLength(40)
                .HasColumnName("test_results_score");
            entity.Property(e => e.TestResultsScoreTypeCode)
                .HasMaxLength(20)
                .HasColumnName("test_results_score_type_code");
            entity.Property(e => e.TestTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("test_type_code");
            entity.Property(e => e.TesterCooperatorId).HasColumnName("tester_cooperator_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryQualityStatusCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_iqs_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryQualityStatuses)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_iqs_i");

            entity.HasOne(d => d.Method).WithMany(p => p.InventoryQualityStatuses)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_iqs_me");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryQualityStatusModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_iqs_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryQualityStatusOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_iqs_owned");

            entity.HasOne(d => d.TesterCooperator).WithMany(p => p.InventoryQualityStatusTesterCooperators)
                .HasForeignKey(d => d.TesterCooperatorId)
                .HasConstraintName("fk_iqs_cur");
        });

        modelBuilder.Entity<InventoryViability>(entity =>
        {
            entity.ToTable("inventory_viability");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_iv_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_iv_i");

            entity.HasIndex(e => e.InventoryViabilityRuleId, "ndx_fk_iv_ivr");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_iv_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_iv_owned");

            entity.HasIndex(e => new { e.InventoryId, e.InventoryViabilityRuleId, e.TestedDate, e.TestedDateCode }, "ndx_uniq_iv").IsUnique();

            entity.Property(e => e.InventoryViabilityId).HasColumnName("inventory_viability_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.InventoryViabilityRuleId).HasColumnName("inventory_viability_rule_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PercentAbnormal).HasColumnName("percent_abnormal");
            entity.Property(e => e.PercentDead).HasColumnName("percent_dead");
            entity.Property(e => e.PercentDormant).HasColumnName("percent_dormant");
            entity.Property(e => e.PercentEmpty).HasColumnName("percent_empty");
            entity.Property(e => e.PercentHard).HasColumnName("percent_hard");
            entity.Property(e => e.PercentInfested).HasColumnName("percent_infested");
            entity.Property(e => e.PercentNormal).HasColumnName("percent_normal");
            entity.Property(e => e.PercentUnknown).HasColumnName("percent_unknown");
            entity.Property(e => e.PercentViable).HasColumnName("percent_viable");
            entity.Property(e => e.ReplicationCount).HasColumnName("replication_count");
            entity.Property(e => e.TestedDate).HasColumnName("tested_date");
            entity.Property(e => e.TestedDateCode)
                .HasMaxLength(20)
                .HasColumnName("tested_date_code");
            entity.Property(e => e.TotalTestedCount).HasColumnName("total_tested_count");
            entity.Property(e => e.VigorRatingCode)
                .HasMaxLength(20)
                .HasColumnName("vigor_rating_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryViabilityCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_iv_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryViabilities)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_iv_i");

            entity.HasOne(d => d.InventoryViabilityRule).WithMany(p => p.InventoryViabilities)
                .HasForeignKey(d => d.InventoryViabilityRuleId)
                .HasConstraintName("fk_iv_ivr");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryViabilityModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_iv_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryViabilityOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_iv_owned");
        });

        modelBuilder.Entity<InventoryViabilityDatum>(entity =>
        {
            entity.HasKey(e => e.InventoryViabilityDataId);

            entity.ToTable("inventory_viability_data");

            entity.HasIndex(e => e.CounterCooperatorId, "ndx_fk_ivd_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ivd_created");

            entity.HasIndex(e => e.InventoryViabilityId, "ndx_fk_ivd_iv");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ivd_modified");

            entity.HasIndex(e => e.OrderRequestItemId, "ndx_fk_ivd_ori");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ivd_owned");

            entity.HasIndex(e => new { e.InventoryViabilityId, e.ReplicationNumber, e.CountNumber }, "ndx_uniq_ivd").IsUnique();

            entity.Property(e => e.InventoryViabilityDataId).HasColumnName("inventory_viability_data_id");
            entity.Property(e => e.AbnormalCount).HasColumnName("abnormal_count");
            entity.Property(e => e.ConfirmedDormantCount).HasColumnName("confirmed_dormant_count");
            entity.Property(e => e.CountDate).HasColumnName("count_date");
            entity.Property(e => e.CountNumber).HasColumnName("count_number");
            entity.Property(e => e.CounterCooperatorId).HasColumnName("counter_cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DeadCount).HasColumnName("dead_count");
            entity.Property(e => e.DormantCount).HasColumnName("dormant_count");
            entity.Property(e => e.EmptyCount).HasColumnName("empty_count");
            entity.Property(e => e.EstimatedDormantCount).HasColumnName("estimated_dormant_count");
            entity.Property(e => e.HardCount).HasColumnName("hard_count");
            entity.Property(e => e.InfestedCount).HasColumnName("infested_count");
            entity.Property(e => e.InventoryViabilityId).HasColumnName("inventory_viability_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.NormalCount).HasColumnName("normal_count");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderRequestItemId).HasColumnName("order_request_item_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ReplicationCount).HasColumnName("replication_count");
            entity.Property(e => e.ReplicationNumber).HasColumnName("replication_number");
            entity.Property(e => e.TreatedDormantCount).HasColumnName("treated_dormant_count");
            entity.Property(e => e.UnknownCount).HasColumnName("unknown_count");

            entity.HasOne(d => d.CounterCooperator).WithMany(p => p.InventoryViabilityDatumCounterCooperators)
                .HasForeignKey(d => d.CounterCooperatorId)
                .HasConstraintName("fk_ivd_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryViabilityDatumCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivd_created");

            entity.HasOne(d => d.InventoryViability).WithMany(p => p.InventoryViabilityData)
                .HasForeignKey(d => d.InventoryViabilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivd_iv");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryViabilityDatumModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ivd_modified");

            entity.HasOne(d => d.OrderRequestItem).WithMany(p => p.InventoryViabilityData)
                .HasForeignKey(d => d.OrderRequestItemId)
                .HasConstraintName("fk_ivd_ori");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryViabilityDatumOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivd_owned");
        });

        modelBuilder.Entity<InventoryViabilityRule>(entity =>
        {
            entity.ToTable("inventory_viability_rule");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ivr_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ivr_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ivr_owned");

            entity.HasIndex(e => e.Name, "ndx_uniq_ivr").IsUnique();

            entity.Property(e => e.InventoryViabilityRuleId).HasColumnName("inventory_viability_rule_id");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.CountRegimeDays)
                .HasMaxLength(100)
                .HasColumnName("count_regime_days");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Lighting)
                .HasMaxLength(100)
                .HasColumnName("lighting");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Moisture)
                .HasMaxLength(100)
                .HasColumnName("moisture");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberOfReplicates).HasColumnName("number_of_replicates");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Prechill)
                .HasMaxLength(100)
                .HasColumnName("prechill");
            entity.Property(e => e.Requirements).HasColumnName("requirements");
            entity.Property(e => e.SeedsPerReplicate).HasColumnName("seeds_per_replicate");
            entity.Property(e => e.Substrata)
                .HasMaxLength(100)
                .HasColumnName("substrata");
            entity.Property(e => e.TemperatureRange)
                .HasMaxLength(100)
                .HasColumnName("temperature_range");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryViabilityRuleCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivr_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryViabilityRuleModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ivr_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryViabilityRuleOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivr_owned");
        });

        modelBuilder.Entity<InventoryViabilityRuleMap>(entity =>
        {
            entity.ToTable("inventory_viability_rule_map");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ivrm_created");

            entity.HasIndex(e => e.InventoryViabilityRuleId, "ndx_fk_ivrm_ivr");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ivrm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ivrm_owned");

            entity.HasIndex(e => e.TaxonomySpeciesId, "ndx_fk_ivrm_ts");

            entity.HasIndex(e => new { e.TaxonomySpeciesId, e.InventoryViabilityRuleId }, "ndx_uniq_ivrm").IsUnique();

            entity.Property(e => e.InventoryViabilityRuleMapId).HasColumnName("inventory_viability_rule_map_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.InventoryViabilityRuleId).HasColumnName("inventory_viability_rule_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.TaxonomySpeciesId).HasColumnName("taxonomy_species_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InventoryViabilityRuleMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivrm_created");

            entity.HasOne(d => d.InventoryViabilityRule).WithMany(p => p.InventoryViabilityRuleMaps)
                .HasForeignKey(d => d.InventoryViabilityRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivrm_ivr");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InventoryViabilityRuleMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ivrm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.InventoryViabilityRuleMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivrm_owned");

            entity.HasOne(d => d.TaxonomySpecies).WithMany(p => p.InventoryViabilityRuleMaps)
                .HasForeignKey(d => d.TaxonomySpeciesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ivrm_ts");
        });

        modelBuilder.Entity<Literature>(entity =>
        {
            entity.ToTable("literature");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_l_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_l_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_l_owned");

            entity.HasIndex(e => e.Abbreviation, "ndx_uniq_l").IsUnique();

            entity.Property(e => e.LiteratureId).HasColumnName("literature_id");
            entity.Property(e => e.Abbreviation)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("abbreviation");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EditorAuthorName)
                .HasMaxLength(2000)
                .HasColumnName("editor_author_name");
            entity.Property(e => e.LiteratureTypeCode)
                .HasMaxLength(20)
                .HasColumnName("literature_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PublicationYear)
                .HasMaxLength(50)
                .HasColumnName("publication_year");
            entity.Property(e => e.PublisherLocation)
                .HasMaxLength(2000)
                .HasColumnName("publisher_location");
            entity.Property(e => e.PublisherName)
                .HasMaxLength(2000)
                .HasColumnName("publisher_name");
            entity.Property(e => e.ReferenceTitle)
                .HasMaxLength(2000)
                .HasColumnName("reference_title");
            entity.Property(e => e.StandardAbbreviation)
                .HasMaxLength(2000)
                .HasColumnName("standard_abbreviation");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .HasColumnName("url");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.LiteratureCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_l_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.LiteratureModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_l_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.LiteratureOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_l_owned");
        });

        modelBuilder.Entity<Method>(entity =>
        {
            entity.ToTable("method");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_m_created");

            entity.HasIndex(e => e.GeographyId, "ndx_fk_m_g");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_m_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_m_owned");

            entity.HasIndex(e => e.Name, "ndx_uniq_m").IsUnique();

            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ElevationMeters).HasColumnName("elevation_meters");
            entity.Property(e => e.FormattedLocality).HasColumnName("formatted_locality");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.GeoreferenceAnnotation).HasColumnName("georeference_annotation");
            entity.Property(e => e.GeoreferenceDatum)
                .HasMaxLength(10)
                .HasColumnName("georeference_datum");
            entity.Property(e => e.GeoreferenceProtocolCode)
                .HasMaxLength(20)
                .HasColumnName("georeference_protocol_code");
            entity.Property(e => e.Latitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("longitude");
            entity.Property(e => e.MaterialsAndMethods).HasColumnName("materials_and_methods");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StudyReasonCode)
                .HasMaxLength(20)
                .HasColumnName("study_reason_code");
            entity.Property(e => e.Uncertainty).HasColumnName("uncertainty");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MethodCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_m_created");

            entity.HasOne(d => d.Geography).WithMany(p => p.Methods)
                .HasForeignKey(d => d.GeographyId)
                .HasConstraintName("fk_m_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.MethodModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_m_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.MethodOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_m_owned");
        });

        modelBuilder.Entity<MethodAttach>(entity =>
        {
            entity.ToTable("method_attach");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_mat_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_mat_created");

            entity.HasIndex(e => e.MethodId, "ndx_fk_mat_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_mat_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_mat_owned");

            entity.HasIndex(e => new { e.MethodId, e.VirtualPath }, "ndx_uniq_mat").IsUnique();

            entity.Property(e => e.MethodAttachId).HasColumnName("method_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CopyrightInformation)
                .HasMaxLength(100)
                .HasColumnName("copyright_information");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.MethodAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_mat_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MethodAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mat_created");

            entity.HasOne(d => d.Method).WithMany(p => p.MethodAttaches)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mat_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.MethodAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_mat_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.MethodAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mat_owned");
        });

        modelBuilder.Entity<MethodMap>(entity =>
        {
            entity.ToTable("method_map");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_mm_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_mm_created");

            entity.HasIndex(e => e.MethodId, "ndx_fk_mm_m");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_mm_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_mm_owned");

            entity.HasIndex(e => new { e.CooperatorId, e.MethodId }, "ndx_uniq_mm").IsUnique();

            entity.Property(e => e.MethodMapId).HasColumnName("method_map_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.MethodMapCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mm_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MethodMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mm_created");

            entity.HasOne(d => d.Method).WithMany(p => p.MethodMaps)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mm_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.MethodMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_mm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.MethodMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_mm_owned");
        });

        modelBuilder.Entity<NameGroup>(entity =>
        {
            entity.ToTable("name_group");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ng_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ng_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ng_owned");

            entity.HasIndex(e => e.GroupName, "ndx_uniq_ng").IsUnique();

            entity.Property(e => e.NameGroupId).HasColumnName("name_group_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("group_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Url)
                .HasMaxLength(2000)
                .HasColumnName("url");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.NameGroupCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ng_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.NameGroupModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ng_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.NameGroupOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ng_owned");
        });

        modelBuilder.Entity<Nc7InventoryLocationDatum>(entity =>
        {
            entity.HasKey(e => e.Nc7InventoryLocationDataId);

            entity.ToTable("nc7_inventory_location_data");

            entity.Property(e => e.Nc7InventoryLocationDataId).HasColumnName("nc7_inventory_location_data_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DataDate).HasColumnName("data_date");
            entity.Property(e => e.DataDateCode)
                .HasMaxLength(20)
                .HasColumnName("data_date_code");
            entity.Property(e => e.DataDateNumber).HasColumnName("data_date_number");
            entity.Property(e => e.DataType1Code)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("data_type1_code");
            entity.Property(e => e.DataType2Code)
                .HasMaxLength(20)
                .HasColumnName("data_type2_code");
            entity.Property(e => e.DataType3Code)
                .HasMaxLength(20)
                .HasColumnName("data_type3_code");
            entity.Property(e => e.DataType4Code)
                .HasMaxLength(20)
                .HasColumnName("data_type4_code");
            entity.Property(e => e.GridLocationCode)
                .HasMaxLength(20)
                .HasColumnName("grid_location_code");
            entity.Property(e => e.GridLocationX).HasColumnName("grid_location_x");
            entity.Property(e => e.GridLocationY).HasColumnName("grid_location_y");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.LocationNumber).HasColumnName("location_number");
            entity.Property(e => e.LocationString)
                .HasMaxLength(50)
                .HasColumnName("location_string");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_value");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StringValue)
                .HasMaxLength(255)
                .HasColumnName("string_value");
            entity.Property(e => e.SublocationNumber).HasColumnName("sublocation_number");
            entity.Property(e => e.SublocationString)
                .HasMaxLength(50)
                .HasColumnName("sublocation_string");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.Nc7InventoryLocationDatumCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_nild_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Nc7InventoryLocationDatumCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nild_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.Nc7InventoryLocationData)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nild_i");

            entity.HasOne(d => d.Method).WithMany(p => p.Nc7InventoryLocationData)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("fk_nild_m");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.Nc7InventoryLocationDatumModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_nild_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.Nc7InventoryLocationDatumOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nild_owned");
        });

        modelBuilder.Entity<Nc7SiteInventory>(entity =>
        {
            entity.ToTable("nc7_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_nc7si_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_nc7si_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_nc7si_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_nc7si_owned");

            entity.Property(e => e.Nc7SiteInventoryId).HasColumnName("nc7_site_inventory_id");
            entity.Property(e => e.CoordinatesApplyToCode)
                .HasMaxLength(20)
                .HasColumnName("coordinates_apply_to_code");
            entity.Property(e => e.CoordinatesComment).HasColumnName("coordinates_comment");
            entity.Property(e => e.CoordinatesVoucherLocation)
                .HasMaxLength(500)
                .HasColumnName("coordinates_voucher_location");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FarmFieldIdentifierCode)
                .HasMaxLength(20)
                .HasColumnName("farm_field_identifier_code");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.InventoryDatumCode)
                .HasMaxLength(20)
                .HasColumnName("inventory_datum_code");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.InventoryLocation1Latitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("inventory_location1_latitude");
            entity.Property(e => e.InventoryLocation1Longitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("inventory_location1_longitude");
            entity.Property(e => e.InventoryLocation1Precision).HasColumnName("inventory_location1_precision");
            entity.Property(e => e.InventoryLocation2Latitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("inventory_location2_latitude");
            entity.Property(e => e.InventoryLocation2Longitude)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("inventory_location2_longitude");
            entity.Property(e => e.InventoryLocation2Precision).HasColumnName("inventory_location2_precision");
            entity.Property(e => e.InventorySiteNote).HasColumnName("inventory_site_note");
            entity.Property(e => e.IrregularInventoryLocation)
                .HasMaxLength(500)
                .HasColumnName("irregular_inventory_location");
            entity.Property(e => e.IsIncreaseSuccessFlag)
                .HasMaxLength(1)
                .HasColumnName("is_increase_success_flag");
            entity.Property(e => e.LocationHigh)
                .HasMaxLength(10)
                .HasColumnName("location_high");
            entity.Property(e => e.LocationLow)
                .HasMaxLength(10)
                .HasColumnName("location_low");
            entity.Property(e => e.LocationTypeCode)
                .HasMaxLength(20)
                .HasColumnName("location_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OldInventoryIdentifier)
                .HasMaxLength(30)
                .HasColumnName("old_inventory_identifier");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PollinationControlCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_control_code");
            entity.Property(e => e.ReasonUnsuccessfull1Code)
                .HasMaxLength(20)
                .HasColumnName("reason_unsuccessfull1_code");
            entity.Property(e => e.ReasonUnsuccessfull2Code)
                .HasMaxLength(20)
                .HasColumnName("reason_unsuccessfull2_code");
            entity.Property(e => e.ReasonUnsuccessfull3Code)
                .HasMaxLength(20)
                .HasColumnName("reason_unsuccessfull3_code");
            entity.Property(e => e.ReasonUnsuccessfullNote).HasColumnName("reason_unsuccessfull_note");
            entity.Property(e => e.SublocationHigh)
                .HasMaxLength(10)
                .HasColumnName("sublocation_high");
            entity.Property(e => e.SublocationLow)
                .HasMaxLength(10)
                .HasColumnName("sublocation_low");
            entity.Property(e => e.SublocationTypeCode)
                .HasMaxLength(20)
                .HasColumnName("sublocation_type_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Nc7SiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nc7si_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.Nc7SiteInventory)
                .HasForeignKey<Nc7SiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nc7si_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.Nc7SiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_nc7si_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.Nc7SiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nc7si_owned");
        });

        modelBuilder.Entity<Ne9SiteInventory>(entity =>
        {
            entity.ToTable("ne9_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ne9si_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_ne9si_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ne9si_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ne9si_owned");

            entity.Property(e => e.Ne9SiteInventoryId).HasColumnName("ne9_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.InventoryPurposeCode)
                .HasMaxLength(20)
                .HasColumnName("inventory_purpose_code");
            entity.Property(e => e.LotTypeCode)
                .HasMaxLength(20)
                .HasColumnName("lot_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Parent2)
                .HasMaxLength(25)
                .HasColumnName("parent_2");
            entity.Property(e => e.Parent3)
                .HasMaxLength(25)
                .HasColumnName("parent_3");
            entity.Property(e => e.Parent4)
                .HasMaxLength(25)
                .HasColumnName("parent_4");
            entity.Property(e => e.Parent5)
                .HasMaxLength(25)
                .HasColumnName("parent_5");
            entity.Property(e => e.PollinationEnvCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_env_code");
            entity.Property(e => e.PollinationProcCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_proc_code");
            entity.Property(e => e.PollinationVectorCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_vector_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Ne9SiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ne9si_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.Ne9SiteInventory)
                .HasForeignKey<Ne9SiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ne9si_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.Ne9SiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ne9si_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.Ne9SiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ne9si_owned");
        });

        modelBuilder.Entity<NsslSiteInventory>(entity =>
        {
            entity.ToTable("nssl_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_nsslsi_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_nsslsi_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_nsslsi_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_nsslsi_owned");

            entity.Property(e => e.NsslSiteInventoryId).HasColumnName("nssl_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EstimatedInLn2).HasColumnName("estimated_in_LN2");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Moisture1)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("moisture_1");
            entity.Property(e => e.Moisture1Date).HasColumnName("moisture_1_date");
            entity.Property(e => e.Moisture1TypeCode)
                .HasMaxLength(20)
                .HasColumnName("moisture_1_type_code");
            entity.Property(e => e.Moisture2)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("moisture_2");
            entity.Property(e => e.Moisture2Date).HasColumnName("moisture_2_date");
            entity.Property(e => e.Moisture2TypeCode)
                .HasMaxLength(20)
                .HasColumnName("moisture_2_type_code");
            entity.Property(e => e.Moisture3)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("moisture_3");
            entity.Property(e => e.Moisture3Date).HasColumnName("moisture_3_date");
            entity.Property(e => e.Moisture3TypeCode)
                .HasMaxLength(20)
                .HasColumnName("moisture_3_type_code");
            entity.Property(e => e.Moisture4)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("moisture_4");
            entity.Property(e => e.Moisture4Date).HasColumnName("moisture_4_date");
            entity.Property(e => e.Moisture4TypeCode)
                .HasMaxLength(20)
                .HasColumnName("moisture_4_type_code");
            entity.Property(e => e.Moisture5)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("moisture_5");
            entity.Property(e => e.Moisture5Date).HasColumnName("moisture_5_date");
            entity.Property(e => e.Moisture5TypeCode)
                .HasMaxLength(20)
                .HasColumnName("moisture_5_type_code");
            entity.Property(e => e.NextTest)
                .HasMaxLength(10)
                .HasColumnName("next_test");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PercentCleanout)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("percent_cleanout");
            entity.Property(e => e.ShootsPerVial).HasColumnName("shoots_per_vial");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.NsslSiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nsslsi_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.NsslSiteInventory)
                .HasForeignKey<NsslSiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nsslsi_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.NsslSiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_nsslsi_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.NsslSiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nsslsi_owned");
        });

        modelBuilder.Entity<OpgcSiteInventory>(entity =>
        {
            entity.ToTable("opgc_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_opgcsi_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_opgcsi_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_opgcsi_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_opgcsi_owned");

            entity.Property(e => e.OpgcSiteInventoryId).HasColumnName("opgc_site_inventory_id");
            entity.Property(e => e.CageGreenhouse).HasColumnName("cage_greenhouse");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FarmFieldIdentifierCode)
                .HasMaxLength(20)
                .HasColumnName("farm_field_identifier_code");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.LocationCode)
                .HasMaxLength(20)
                .HasColumnName("location_code");
            entity.Property(e => e.LocationTypeCode)
                .HasMaxLength(20)
                .HasColumnName("location_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OldInventoryIdentifier)
                .HasMaxLength(30)
                .HasColumnName("old_inventory_identifier");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PollinationControlCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_control_code");
            entity.Property(e => e.TechniqueCode)
                .HasMaxLength(20)
                .HasColumnName("technique_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OpgcSiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_opgcsi_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.OpgcSiteInventory)
                .HasForeignKey<OpgcSiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_opgcsi_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OpgcSiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_opgcsi_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OpgcSiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_opgcsi_owned");
        });

        modelBuilder.Entity<OrderRequest>(entity =>
        {
            entity.ToTable("order_request");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_or_created");

            entity.HasIndex(e => e.FinalRecipientCooperatorId, "ndx_fk_or_final_c");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_or_modified");

            entity.HasIndex(e => e.OriginalOrderRequestId, "ndx_fk_or_original_or");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_or_owned");

            entity.HasIndex(e => e.RequestorCooperatorId, "ndx_fk_or_requestor_c");

            entity.HasIndex(e => e.ShipToCooperatorId, "ndx_fk_or_ship_to_c");

            entity.HasIndex(e => e.FeedbackId, "ndx_fk_oreq_f");

            entity.HasIndex(e => e.OrderObtainedVia, "ndx_or_obtained");

            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.CompletedDate).HasColumnName("completed_date");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.FinalRecipientCooperatorId).HasColumnName("final_recipient_cooperator_id");
            entity.Property(e => e.IntendedUseCode)
                .HasMaxLength(20)
                .HasColumnName("intended_use_code");
            entity.Property(e => e.IntendedUseNote).HasColumnName("intended_use_note");
            entity.Property(e => e.LocalNumber)
                .HasMaxLength(50)
                .HasColumnName("local_number");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderObtainedVia)
                .HasMaxLength(20)
                .HasColumnName("order_obtained_via");
            entity.Property(e => e.OrderTypeCode)
                .HasMaxLength(20)
                .HasColumnName("order_type_code");
            entity.Property(e => e.OrderedDate).HasColumnName("ordered_date");
            entity.Property(e => e.OriginalOrderRequestId).HasColumnName("original_order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.RequestorCooperatorId).HasColumnName("requestor_cooperator_id");
            entity.Property(e => e.ShipToCooperatorId).HasColumnName("ship_to_cooperator_id");
            entity.Property(e => e.SpecialInstruction).HasColumnName("special_instruction");
            entity.Property(e => e.WebOrderRequestId).HasColumnName("web_order_request_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderRequestCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_or_created");

            entity.HasOne(d => d.Feedback).WithMany(p => p.OrderRequests)
                .HasForeignKey(d => d.FeedbackId)
                .HasConstraintName("fk_oreq_f");

            entity.HasOne(d => d.FinalRecipientCooperator).WithMany(p => p.OrderRequestFinalRecipientCooperators)
                .HasForeignKey(d => d.FinalRecipientCooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_or_final_c");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrderRequestModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_or_modified");

            entity.HasOne(d => d.OriginalOrderRequest).WithMany(p => p.InverseOriginalOrderRequest)
                .HasForeignKey(d => d.OriginalOrderRequestId)
                .HasConstraintName("fk_or_original_or");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OrderRequestOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_or_owned");

            entity.HasOne(d => d.RequestorCooperator).WithMany(p => p.OrderRequestRequestorCooperators)
                .HasForeignKey(d => d.RequestorCooperatorId)
                .HasConstraintName("fk_or_requestor_c");

            entity.HasOne(d => d.ShipToCooperator).WithMany(p => p.OrderRequestShipToCooperators)
                .HasForeignKey(d => d.ShipToCooperatorId)
                .HasConstraintName("fk_or_ship_to_c");

            entity.HasOne(d => d.WebOrderRequest).WithMany(p => p.OrderRequests)
                .HasForeignKey(d => d.WebOrderRequestId)
                .HasConstraintName("fk_or_wor");
        });

        modelBuilder.Entity<OrderRequestAction>(entity =>
        {
            entity.ToTable("order_request_action");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_ora_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ora_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ora_modified");

            entity.HasIndex(e => e.OrderRequestId, "ndx_fk_ora_or");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ora_owned");

            entity.HasIndex(e => new { e.OrderRequestId, e.ActionNameCode, e.StartedDate }, "ndx_uniq_ora").IsUnique();

            entity.Property(e => e.OrderRequestActionId).HasColumnName("order_request_action_id");
            entity.Property(e => e.ActionCost)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("action_cost");
            entity.Property(e => e.ActionInformation).HasColumnName("action_information");
            entity.Property(e => e.ActionNameCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("action_name_code");
            entity.Property(e => e.CompletedDate).HasColumnName("completed_date");
            entity.Property(e => e.CompletedDateCode)
                .HasMaxLength(20)
                .HasColumnName("completed_date_code");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StartedDate).HasColumnName("started_date");
            entity.Property(e => e.StartedDateCode)
                .HasMaxLength(20)
                .HasColumnName("started_date_code");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.OrderRequestActionCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_ora_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderRequestActionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ora_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrderRequestActionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ora_modified");

            entity.HasOne(d => d.OrderRequest).WithMany(p => p.OrderRequestActions)
                .HasForeignKey(d => d.OrderRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ora_or");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OrderRequestActionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ora_owned");
        });

        modelBuilder.Entity<OrderRequestAttach>(entity =>
        {
            entity.ToTable("order_request_attach");

            entity.HasIndex(e => e.OrderRequestId, "ndx_fk_oat_or");

            entity.HasIndex(e => e.AttachCooperatorId, "ndx_fk_orat_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_orat_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_orat_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_orat_owned");

            entity.HasIndex(e => new { e.OrderRequestId, e.VirtualPath }, "ndx_uniq_orat").IsUnique();

            entity.Property(e => e.OrderRequestAttachId).HasColumnName("order_request_attach_id");
            entity.Property(e => e.AttachCooperatorId).HasColumnName("attach_cooperator_id");
            entity.Property(e => e.AttachDate).HasColumnName("attach_date");
            entity.Property(e => e.AttachDateCode)
                .HasMaxLength(20)
                .HasColumnName("attach_date_code");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CopyrightInformation)
                .HasMaxLength(100)
                .HasColumnName("copyright_information");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.ThumbnailVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("thumbnail_virtual_path");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");

            entity.HasOne(d => d.AttachCooperator).WithMany(p => p.OrderRequestAttachAttachCooperators)
                .HasForeignKey(d => d.AttachCooperatorId)
                .HasConstraintName("fk_orat_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderRequestAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_orat_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrderRequestAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_orat_modified");

            entity.HasOne(d => d.OrderRequest).WithMany(p => p.OrderRequestAttaches)
                .HasForeignKey(d => d.OrderRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_orat_or");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OrderRequestAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_orat_owned");
        });

        modelBuilder.Entity<OrderRequestItem>(entity =>
        {
            entity.ToTable("order_request_item");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ori_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_ori_i");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ori_modified");

            entity.HasIndex(e => e.OrderRequestId, "ndx_fk_ori_or");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ori_owned");

            entity.HasIndex(e => e.SourceCooperatorId, "ndx_fk_ori_sc");

            entity.HasIndex(e => e.WebOrderRequestItemId, "ndx_fk_ori_wori");

            entity.HasIndex(e => new { e.OrderRequestId, e.Name }, "ndx_ori_item");

            entity.Property(e => e.OrderRequestItemId).HasColumnName("order_request_item_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DistributionFormCode)
                .HasMaxLength(20)
                .HasColumnName("distribution_form_code");
            entity.Property(e => e.ExternalTaxonomy)
                .HasMaxLength(100)
                .HasColumnName("external_taxonomy");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsSmtaRestricted)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("N")
                .HasColumnName("is_smta_restricted");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.QuantityShipped)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("quantity_shipped");
            entity.Property(e => e.QuantityShippedUnitCode)
                .HasMaxLength(20)
                .HasColumnName("quantity_shipped_unit_code");
            entity.Property(e => e.SequenceNumber).HasColumnName("sequence_number");
            entity.Property(e => e.SourceCooperatorId).HasColumnName("source_cooperator_id");
            entity.Property(e => e.StatusCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.StatusDate).HasColumnName("status_date");
            entity.Property(e => e.WebOrderRequestItemId).HasColumnName("web_order_request_item_id");
            entity.Property(e => e.WebUserNote).HasColumnName("web_user_note");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderRequestItemCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ori_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.OrderRequestItems)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ori_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrderRequestItemModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ori_modified");

            entity.HasOne(d => d.OrderRequest).WithMany(p => p.OrderRequestItems)
                .HasForeignKey(d => d.OrderRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ori_or");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OrderRequestItemOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ori_owned");

            entity.HasOne(d => d.SourceCooperator).WithMany(p => p.OrderRequestItemSourceCooperators)
                .HasForeignKey(d => d.SourceCooperatorId)
                .HasConstraintName("fk_ori_sc");

            entity.HasOne(d => d.WebOrderRequestItem).WithMany(p => p.OrderRequestItems)
                .HasForeignKey(d => d.WebOrderRequestItemId)
                .HasConstraintName("fk_ori_wori");
        });

        modelBuilder.Entity<OrderRequestItemAction>(entity =>
        {
            entity.ToTable("order_request_item_action");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_oria_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_oria_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_oria_modified");

            entity.HasIndex(e => e.OrderRequestItemId, "ndx_fk_oria_ori");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_oria_owned");

            entity.HasIndex(e => new { e.OrderRequestItemId, e.ActionNameCode, e.StartedDate }, "ndx_uniq_oria").IsUnique();

            entity.Property(e => e.OrderRequestItemActionId).HasColumnName("order_request_item_action_id");
            entity.Property(e => e.ActionCost)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("action_cost");
            entity.Property(e => e.ActionInformation).HasColumnName("action_information");
            entity.Property(e => e.ActionNameCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("action_name_code");
            entity.Property(e => e.CompletedDate).HasColumnName("completed_date");
            entity.Property(e => e.CompletedDateCode)
                .HasMaxLength(20)
                .HasColumnName("completed_date_code");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderRequestItemId).HasColumnName("order_request_item_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.StartedDate).HasColumnName("started_date");
            entity.Property(e => e.StartedDateCode)
                .HasMaxLength(20)
                .HasColumnName("started_date_code");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.OrderRequestItemActionCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_oria_c");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderRequestItemActionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_oria_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrderRequestItemActionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_oria_modified");

            entity.HasOne(d => d.OrderRequestItem).WithMany(p => p.OrderRequestItemActions)
                .HasForeignKey(d => d.OrderRequestItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_oria_ori");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OrderRequestItemActionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_oria_owned");
        });

        modelBuilder.Entity<OrderRequestPhytoLog>(entity =>
        {
            entity.ToTable("order_request_phyto_log");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_orpl_created");

            entity.HasIndex(e => e.InspectedByCooperatorId, "ndx_fk_orpl_inspected_c");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_orpl_modified");

            entity.HasIndex(e => e.OrderRequestId, "ndx_fk_orpl_or");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_orpl_owned");

            entity.HasIndex(e => new { e.OrderRequestId, e.PhytoCertificateTypeCode, e.PhytoCertificateIdentifier }, "ndx_uniq_orpl").IsUnique();

            entity.Property(e => e.OrderRequestPhytoLogId).HasColumnName("order_request_phyto_log_id");
            entity.Property(e => e.CertificateCost).HasColumnName("certificate_cost");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Delivered)
                .HasMaxLength(1)
                .HasColumnName("delivered");
            entity.Property(e => e.DeliveredDate).HasColumnName("delivered_date");
            entity.Property(e => e.ImportPermitIdentifier)
                .HasMaxLength(60)
                .HasColumnName("import_permit_identifier");
            entity.Property(e => e.InspectedByCooperatorId).HasColumnName("inspected_by_cooperator_id");
            entity.Property(e => e.InspectedDate).HasColumnName("inspected_date");
            entity.Property(e => e.MajorGenus)
                .HasMaxLength(100)
                .HasColumnName("major_genus");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberOfItems).HasColumnName("number_of_items");
            entity.Property(e => e.NumberOfPackages)
                .HasMaxLength(20)
                .HasColumnName("number_of_packages");
            entity.Property(e => e.OpenedDate).HasColumnName("opened_date");
            entity.Property(e => e.OrderRequestId).HasColumnName("order_request_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PassedInspection)
                .HasMaxLength(1)
                .HasColumnName("passed_inspection");
            entity.Property(e => e.PhytoCertificateIdentifier)
                .HasMaxLength(60)
                .HasColumnName("phyto_certificate_identifier");
            entity.Property(e => e.PhytoCertificateTypeCode)
                .HasMaxLength(20)
                .HasColumnName("phyto_certificate_type_code");
            entity.Property(e => e.ReceivedDate).HasColumnName("received_date");
            entity.Property(e => e.SetupInspectionDate).HasColumnName("setup_inspection_date");
            entity.Property(e => e.ShippedDate).HasColumnName("shipped_date");
            entity.Property(e => e.ShippingCarrier)
                .HasMaxLength(60)
                .HasColumnName("shipping_carrier");
            entity.Property(e => e.TrackingIdentifier)
                .HasMaxLength(100)
                .HasColumnName("tracking_identifier");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderRequestPhytoLogCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_orpl_created");

            entity.HasOne(d => d.InspectedByCooperator).WithMany(p => p.OrderRequestPhytoLogInspectedByCooperators)
                .HasForeignKey(d => d.InspectedByCooperatorId)
                .HasConstraintName("fk_orpl_inspected_c");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrderRequestPhytoLogModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_orpl_modified");

            entity.HasOne(d => d.OrderRequest).WithMany(p => p.OrderRequestPhytoLogs)
                .HasForeignKey(d => d.OrderRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_orpl_or");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.OrderRequestPhytoLogOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_orpl_owned");
        });

        modelBuilder.Entity<ParlSiteInventory>(entity =>
        {
            entity.ToTable("parl_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_parlsi_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_parlsi_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_parlsi_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_parlsi_owned");

            entity.Property(e => e.ParlSiteInventoryId).HasColumnName("parl_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.IncreaseLocation)
                .HasMaxLength(20)
                .HasColumnName("increase_location");
            entity.Property(e => e.IncreaseYear).HasColumnName("increase_year");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.LotTypeCode)
                .HasMaxLength(20)
                .HasColumnName("lot_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Plot)
                .HasMaxLength(20)
                .HasColumnName("plot");
            entity.Property(e => e.PollinationEnvironment)
                .HasMaxLength(20)
                .HasColumnName("pollination_environment");
            entity.Property(e => e.PollinationProcedureCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_procedure_code");
            entity.Property(e => e.PollinationVectorCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_vector_code");
            entity.Property(e => e.SeedAge)
                .HasMaxLength(20)
                .HasColumnName("seed_age");
            entity.Property(e => e.SeedQuantity).HasColumnName("seed_quantity");
            entity.Property(e => e.SeedQuantityType).HasColumnName("seed_quantity_type");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ParlSiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_parlsi_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.ParlSiteInventory)
                .HasForeignKey<ParlSiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_parlsi_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ParlSiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_parlsi_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.ParlSiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_parlsi_owned");
        });

        modelBuilder.Entity<PlantImmigrantIndex>(entity =>
        {
            entity.HasKey(e => e.PlantImmigrantIndexId).HasName("PK_plant_immigrant_index_id");

            entity.ToTable("plant_immigrant_index");

            entity.Property(e => e.PlantImmigrantIndexId).HasColumnName("plant_immigrant_index_id");
            entity.Property(e => e.FirstNumber).HasColumnName("first_number");
            entity.Property(e => e.LastNumber).HasColumnName("last_number");
            entity.Property(e => e.PlantImmigrantPage).HasColumnName("plant_immigrant_page");
            entity.Property(e => e.PlantImmigrantVolumn).HasColumnName("plant_immigrant_volumn");
        });

        modelBuilder.Entity<PlantInventory>(entity =>
        {
            entity.HasKey(e => e.PlantInventoryId).HasName("PK_plant_inventory_id");

            entity.ToTable("plant_inventory");

            entity.Property(e => e.PlantInventoryId).HasColumnName("plant_inventory_id");
            entity.Property(e => e.PlantInventoryVolumn).HasColumnName("plant_inventory_volumn");
            entity.Property(e => e.PlantInventoryYear).HasColumnName("plant_inventory_year");
            entity.Property(e => e.StartingPiNumber).HasColumnName("starting_pi_number");
        });

        modelBuilder.Entity<PlantInventoryIndex>(entity =>
        {
            entity.HasKey(e => e.PlantInventoryIndexId).HasName("PK_plant_inventory_index_id");

            entity.ToTable("plant_inventory_index");

            entity.Property(e => e.PlantInventoryIndexId).HasColumnName("plant_inventory_index_id");
            entity.Property(e => e.FirstNumber).HasColumnName("first_number");
            entity.Property(e => e.LastNumber).HasColumnName("last_number");
            entity.Property(e => e.PageOffset).HasColumnName("page_offset");
            entity.Property(e => e.PlantInventoryPage).HasColumnName("plant_inventory_page");
            entity.Property(e => e.PlantInventoryVolumn).HasColumnName("plant_inventory_volumn");
            entity.Property(e => e.VolumnSuffix)
                .IsRequired()
                .HasMaxLength(6)
                .HasColumnName("volumn_suffix");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.ToTable("region");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_r_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_r_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_r_owned");

            entity.HasIndex(e => new { e.Continent, e.Subcontinent }, "ndx_uniq_re").IsUnique();

            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.Continent)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("continent");
            entity.Property(e => e.ContinentAbbreviation)
                .HasMaxLength(20)
                .HasColumnName("continent_abbreviation");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SequenceNumber).HasColumnName("sequence_number");
            entity.Property(e => e.Subcontinent)
                .HasMaxLength(30)
                .HasColumnName("subcontinent");
            entity.Property(e => e.SubcontinentAbbreviation)
                .HasMaxLength(20)
                .HasColumnName("subcontinent_abbreviation");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.RegionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_r_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.RegionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_r_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.RegionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_r_owned");
        });

        modelBuilder.Entity<Rhizobium>(entity =>
        {
            entity.ToTable("rhizobium");

            entity.HasIndex(e => e.CommonName, "ndx_rhizobium_common_name");

            entity.HasIndex(e => e.UsdaAccessionCode, "ndx_rhizobium_usda_accession");

            entity.Property(e => e.RhizobiumId).HasColumnName("rhizobium_id");
            entity.Property(e => e.CommonName)
                .HasMaxLength(250)
                .HasColumnName("common_name");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("date")
                .HasColumnName("created_date");
            entity.Property(e => e.GenusSpp)
                .HasMaxLength(250)
                .HasColumnName("genus_spp");
            entity.Property(e => e.GeoSource)
                .HasMaxLength(250)
                .HasColumnName("geo_source");
            entity.Property(e => e.HostPlant)
                .HasMaxLength(250)
                .HasColumnName("host_plant");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("date")
                .HasColumnName("modified_date");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .HasColumnName("note");
            entity.Property(e => e.Source)
                .HasMaxLength(250)
                .HasColumnName("source");
            entity.Property(e => e.UsdaAccessionCode)
                .HasMaxLength(250)
                .HasColumnName("usda_accession_code");
        });

        modelBuilder.Entity<S9SiteInventory>(entity =>
        {
            entity.ToTable("s9_site_inventory");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_s9si_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_s9si_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_s9si_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_s9si_owned");

            entity.Property(e => e.S9SiteInventoryId).HasColumnName("s9_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.IncreaseLocationCode)
                .HasMaxLength(20)
                .HasColumnName("increase_location_code");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PlotNumber)
                .HasMaxLength(20)
                .HasColumnName("plot_number");
            entity.Property(e => e.PollinationProcedureCode)
                .HasMaxLength(20)
                .HasColumnName("pollination_procedure_code");
            entity.Property(e => e.VirusStatusCode)
                .HasMaxLength(20)
                .HasColumnName("virus_status_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.S9SiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_s9si_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.S9SiteInventory)
                .HasForeignKey<S9SiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_s9si_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.S9SiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_s9si_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.S9SiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_s9si_owned");
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.ToTable("site");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_s_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_s_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_s_owned");

            entity.HasIndex(e => new { e.SiteShortName, e.SiteLongName, e.OrganizationAbbrev, e.FaoInstituteNumber }, "ndx_uniq_s").IsUnique();

            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FaoInstituteNumber)
                .HasMaxLength(20)
                .HasColumnName("fao_institute_number");
            entity.Property(e => e.IsDistributionSite)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_distribution_site");
            entity.Property(e => e.IsInternal)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_internal");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrganizationAbbrev)
                .HasMaxLength(20)
                .HasColumnName("organization_abbrev");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PrimaryUrl).HasColumnName("primary_url");
            entity.Property(e => e.ProviderIdentifier)
                .HasMaxLength(6)
                .HasColumnName("provider_identifier");
            entity.Property(e => e.SecondaryUrl)
                .HasMaxLength(500)
                .HasColumnName("secondary_url");
            entity.Property(e => e.SiteLongName)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("site_long_name");
            entity.Property(e => e.SiteShortName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("site_short_name");
            entity.Property(e => e.TypeCode)
                .HasMaxLength(20)
                .HasColumnName("type_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SiteCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_s_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SiteModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_s_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SiteOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_s_owned");
        });

        modelBuilder.Entity<SourceDescObservation>(entity =>
        {
            entity.ToTable("source_desc_observation");

            entity.HasIndex(e => e.AccessionSourceId, "ndx_fk_sodo_as");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sodo_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sodo_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sodo_owned");

            entity.HasIndex(e => e.SourceDescriptorId, "ndx_fk_sodo_sd");

            entity.HasIndex(e => e.SourceDescriptorCodeId, "ndx_fk_sodo_sodc");

            entity.HasIndex(e => new { e.AccessionSourceId, e.SourceDescriptorId, e.SourceDescriptorCodeId, e.NumericValue, e.StringValue }, "ndx_uniq_sodo").IsUnique();

            entity.Property(e => e.SourceDescObservationId).HasColumnName("source_desc_observation_id");
            entity.Property(e => e.AccessionSourceId).HasColumnName("accession_source_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericValue)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_value");
            entity.Property(e => e.OriginalValue)
                .HasMaxLength(30)
                .HasColumnName("original_value");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SourceDescriptorCodeId).HasColumnName("source_descriptor_code_id");
            entity.Property(e => e.SourceDescriptorId).HasColumnName("source_descriptor_id");
            entity.Property(e => e.StringValue)
                .HasMaxLength(255)
                .HasColumnName("string_value");

            entity.HasOne(d => d.AccessionSource).WithMany(p => p.SourceDescObservations)
                .HasForeignKey(d => d.AccessionSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodo_as");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SourceDescObservationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodo_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SourceDescObservationModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sodo_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SourceDescObservationOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodo_owned");

            entity.HasOne(d => d.SourceDescriptorCode).WithMany(p => p.SourceDescObservations)
                .HasForeignKey(d => d.SourceDescriptorCodeId)
                .HasConstraintName("fk_sodo_sodc");

            entity.HasOne(d => d.SourceDescriptor).WithMany(p => p.SourceDescObservations)
                .HasForeignKey(d => d.SourceDescriptorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodo_sd");
        });

        modelBuilder.Entity<SourceDescriptor>(entity =>
        {
            entity.ToTable("source_descriptor");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sd_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sd_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sd_owned");

            entity.HasIndex(e => e.CodedName, "ndx_uniq_sd").IsUnique();

            entity.Property(e => e.SourceDescriptorId).HasColumnName("source_descriptor_id");
            entity.Property(e => e.CategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("category_code");
            entity.Property(e => e.CodedName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("coded_name");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DataTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("data_type_code");
            entity.Property(e => e.IsCoded)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_coded");
            entity.Property(e => e.MaxLength).HasColumnName("max_length");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumericFormat)
                .HasMaxLength(15)
                .HasColumnName("numeric_format");
            entity.Property(e => e.NumericMaximum)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_maximum");
            entity.Property(e => e.NumericMinimum)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("numeric_minimum");
            entity.Property(e => e.OntologyUrl)
                .HasMaxLength(300)
                .HasColumnName("ontology_url");
            entity.Property(e => e.OriginalValueFormat)
                .HasMaxLength(50)
                .HasColumnName("original_value_format");
            entity.Property(e => e.OriginalValueTypeCode)
                .HasMaxLength(20)
                .HasColumnName("original_value_type_code");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SourceDescriptorCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sd_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SourceDescriptorModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sd_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SourceDescriptorOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sd_owned");
        });

        modelBuilder.Entity<SourceDescriptorCode>(entity =>
        {
            entity.ToTable("source_descriptor_code");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sodc_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sodc_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sodc_owned");

            entity.HasIndex(e => e.SourceDescriptorId, "ndx_fk_sodc_sd");

            entity.HasIndex(e => new { e.SourceDescriptorId, e.Code }, "ndx_uniq_sodc").IsUnique();

            entity.Property(e => e.SourceDescriptorCodeId).HasColumnName("source_descriptor_code_id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SourceDescriptorId).HasColumnName("source_descriptor_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SourceDescriptorCodeCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodc_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SourceDescriptorCodeModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sodc_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SourceDescriptorCodeOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodc_owned");

            entity.HasOne(d => d.SourceDescriptor).WithMany(p => p.SourceDescriptorCodes)
                .HasForeignKey(d => d.SourceDescriptorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodc_sd");
        });

        modelBuilder.Entity<SourceDescriptorCodeLang>(entity =>
        {
            entity.ToTable("source_descriptor_code_lang");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sodcl_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sodcl_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sodcl_owned");

            entity.HasIndex(e => e.SysLangId, "ndx_fk_sodcl_sl");

            entity.HasIndex(e => e.SourceDescriptorCodeId, "ndx_fk_sodcl_sodc");

            entity.HasIndex(e => new { e.SourceDescriptorCodeId, e.SysLangId }, "ndx_uniq_sodcl").IsUnique();

            entity.Property(e => e.SourceDescriptorCodeLangId).HasColumnName("source_descriptor_code_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SourceDescriptorCodeId).HasColumnName("source_descriptor_code_id");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SourceDescriptorCodeLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodcl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SourceDescriptorCodeLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sodcl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SourceDescriptorCodeLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodcl_owned");

            entity.HasOne(d => d.SourceDescriptorCode).WithMany(p => p.SourceDescriptorCodeLangs)
                .HasForeignKey(d => d.SourceDescriptorCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodcl_sodc");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SourceDescriptorCodeLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodcl_sl");
        });

        modelBuilder.Entity<SourceDescriptorLang>(entity =>
        {
            entity.ToTable("source_descriptor_lang");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sodl_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sodl_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sodl_owned");

            entity.HasIndex(e => e.SourceDescriptorId, "ndx_fk_sodl_sd");

            entity.HasIndex(e => e.SysLangId, "ndx_fk_sodl_sl");

            entity.HasIndex(e => new { e.SourceDescriptorId, e.SysLangId }, "ndx_uniq_sodl").IsUnique();

            entity.Property(e => e.SourceDescriptorLangId).HasColumnName("source_descriptor_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SourceDescriptorId).HasColumnName("source_descriptor_id");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SourceDescriptorLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SourceDescriptorLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sodl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SourceDescriptorLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodl_owned");

            entity.HasOne(d => d.SourceDescriptor).WithMany(p => p.SourceDescriptorLangs)
                .HasForeignKey(d => d.SourceDescriptorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodl_sd");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SourceDescriptorLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sodl_sl");
        });

        modelBuilder.Entity<SysAppErrorLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sys_app___3214EC27C83DD1AC");

            entity.ToTable("sys_app_error_log");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(20);
            entity.Property(e => e.ErrorLevel).HasMaxLength(10);
            entity.Property(e => e.Logger).HasMaxLength(255);
            entity.Property(e => e.Url).HasMaxLength(255);
        });

        modelBuilder.Entity<SysDbError>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sys_db_error");

            entity.Property(e => e.ErrorDateTime).HasColumnType("datetime");
            entity.Property(e => e.ErrorId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ErrorID");
            entity.Property(e => e.ErrorMessage).IsUnicode(false);
            entity.Property(e => e.ErrorProcedure).IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SysFile>(entity =>
        {
            entity.ToTable("sys_file");

            entity.HasIndex(e => e.VirtualFilePath, "ndx_uniq_sf").IsUnique();

            entity.Property(e => e.SysFileId).HasColumnName("sys_file_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(255)
                .HasColumnName("display_name");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasColumnName("file_name");
            entity.Property(e => e.FileSize)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("file_size");
            entity.Property(e => e.FileVersion)
                .HasMaxLength(255)
                .HasColumnName("file_version");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.VirtualFilePath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_file_path");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysFileCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sf_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysFileModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sf_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysFileOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sf_owned");
        });

        modelBuilder.Entity<SysFileGroup>(entity =>
        {
            entity.ToTable("sys_file_group");

            entity.HasIndex(e => e.GroupName, "ndx_uniq_sfg").IsUnique();

            entity.Property(e => e.SysFileGroupId).HasColumnName("sys_file_group_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("group_name");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.VersionName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("version_name");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysFileGroupCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sfg_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysFileGroupModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sfg_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysFileGroupOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sfg_owned");
        });

        modelBuilder.Entity<SysFileGroupMap>(entity =>
        {
            entity.ToTable("sys_file_group_map");

            entity.HasIndex(e => new { e.SysFileGroupId, e.SysFileId }, "ndx_sfgm").IsUnique();

            entity.Property(e => e.SysFileGroupMapId).HasColumnName("sys_file_group_map_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysFileGroupId).HasColumnName("sys_file_group_id");
            entity.Property(e => e.SysFileId).HasColumnName("sys_file_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysFileGroupMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sfgm_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysFileGroupMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sfgm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysFileGroupMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sfgm_owned");

            entity.HasOne(d => d.SysFileGroup).WithMany(p => p.SysFileGroupMaps)
                .HasForeignKey(d => d.SysFileGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sfgm_sfg");

            entity.HasOne(d => d.SysFile).WithMany(p => p.SysFileGroupMaps)
                .HasForeignKey(d => d.SysFileId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sfgm_sf");
        });

        modelBuilder.Entity<SysFileLang>(entity =>
        {
            entity.ToTable("sys_file_lang");

            entity.HasIndex(e => new { e.SysFileId, e.SysLangId }, "ndx_uniq_sfl").IsUnique();

            entity.Property(e => e.SysFileLangId).HasColumnName("sys_file_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysFileId).HasColumnName("sys_file_id");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysFileLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sfl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysFileLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sfl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysFileLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sfl_owned");

            entity.HasOne(d => d.SysFile).WithMany(p => p.SysFileLangs)
                .HasForeignKey(d => d.SysFileId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sec_file_lang_sec_file");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SysFileLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sfl_sf");
        });

        modelBuilder.Entity<SysGroup>(entity =>
        {
            entity.ToTable("sys_group");

            entity.Property(e => e.SysGroupId).HasColumnName("sys_group_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GroupTag)
                .IsRequired()
                .HasMaxLength(1000)
                .HasColumnName("group_tag");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysGroupCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sg_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysGroupModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sg_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysGroupOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sg_owned");
        });

        modelBuilder.Entity<SysGroupLang>(entity =>
        {
            entity.ToTable("sys_group_lang");

            entity.HasIndex(e => new { e.SysGroupId, e.SysLangId }, "ndx_uniq_sgl").IsUnique();

            entity.Property(e => e.SysGroupLangId).HasColumnName("sys_group_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysGroupId).HasColumnName("sys_group_id");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysGroupLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sgl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysGroupLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sgl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysGroupLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sgl_owned");

            entity.HasOne(d => d.SysGroup).WithMany(p => p.SysGroupLangs)
                .HasForeignKey(d => d.SysGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sgl_sg");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SysGroupLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sgl_sl");
        });

        modelBuilder.Entity<SysGroupPermissionMap>(entity =>
        {
            entity.ToTable("sys_group_permission_map");

            entity.HasIndex(e => new { e.SysGroupId, e.SysPermissionId }, "ndx_uniq_sgpm").IsUnique();

            entity.Property(e => e.SysGroupPermissionMapId).HasColumnName("sys_group_permission_map_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysGroupId).HasColumnName("sys_group_id");
            entity.Property(e => e.SysPermissionId).HasColumnName("sys_permission_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysGroupPermissionMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sgpm_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysGroupPermissionMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sgpm_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysGroupPermissionMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sgpm_owned");

            entity.HasOne(d => d.SysGroup).WithMany(p => p.SysGroupPermissionMaps)
                .HasForeignKey(d => d.SysGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sgpm_sg");

            entity.HasOne(d => d.SysPermission).WithMany(p => p.SysGroupPermissionMaps)
                .HasForeignKey(d => d.SysPermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sgpm_sp");
        });

        modelBuilder.Entity<SysGroupUserMap>(entity =>
        {
            entity.ToTable("sys_group_user_map");

            entity.HasIndex(e => new { e.SysGroupId, e.SysUserId }, "ndx_uniq_sgum").IsUnique();

            entity.Property(e => e.SysGroupUserMapId).HasColumnName("sys_group_user_map_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysGroupId).HasColumnName("sys_group_id");
            entity.Property(e => e.SysUserId).HasColumnName("sys_user_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysGroupUserMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sgum_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysGroupUserMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_sgum_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysGroupUserMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_sgum_owned");

            entity.HasOne(d => d.SysGroup).WithMany(p => p.SysGroupUserMaps)
                .HasForeignKey(d => d.SysGroupId)
                .HasConstraintName("fk_sgum_sg");

            entity.HasOne(d => d.SysUser).WithMany(p => p.SysGroupUserMaps)
                .HasForeignKey(d => d.SysUserId)
                .HasConstraintName("fk_sgum_su");
        });

        modelBuilder.Entity<SysLang>(entity =>
        {
            entity.ToTable("sys_lang");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sl_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sl_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sl_owned");

            entity.HasIndex(e => e.IetfTag, "ndx_uniq_sl_tag").IsUnique();

            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IetfTag)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("ietf_tag");
            entity.Property(e => e.IsWebVisible).HasColumnName("is_web_visible");
            entity.Property(e => e.Iso6393Tag)
                .IsRequired()
                .HasMaxLength(5)
                .HasColumnName("iso_639_3_tag");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ScriptDirection)
                .HasMaxLength(3)
                .HasColumnName("script_direction");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sl_owned");
        });

        modelBuilder.Entity<SysPermission>(entity =>
        {
            entity.ToTable("sys_permission");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sp_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sp_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sp_owned");

            entity.Property(e => e.SysPermissionId).HasColumnName("sys_permission_id");
            entity.Property(e => e.CreatePermission)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("create_permission");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DeletePermission)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("delete_permission");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PermissionTag)
                .HasMaxLength(1000)
                .HasColumnName("permission_tag");
            entity.Property(e => e.ReadPermission)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("read_permission");
            entity.Property(e => e.SysDataviewId).HasColumnName("sys_dataview_id");
            entity.Property(e => e.SysTableId).HasColumnName("sys_table_id");
            entity.Property(e => e.UpdatePermission)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("update_permission");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysPermissionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sp_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysPermissionModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sp_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysPermissionOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sp_owned");

            entity.HasOne(d => d.SysTable).WithMany(p => p.SysPermissions)
                .HasForeignKey(d => d.SysTableId)
                .HasConstraintName("fk_sp_st");
        });

        modelBuilder.Entity<SysPermissionField>(entity =>
        {
            entity.ToTable("sys_permission_field");

            entity.HasIndex(e => new { e.SysPermissionId, e.SysDataviewFieldId, e.SysTableFieldId, e.CompareMode, e.CompareOperator, e.ParentCompareOperator }, "ndx_uniq_spf").IsUnique();

            entity.Property(e => e.SysPermissionFieldId).HasColumnName("sys_permission_field_id");
            entity.Property(e => e.CompareMode)
                .HasMaxLength(20)
                .HasColumnName("compare_mode");
            entity.Property(e => e.CompareOperator)
                .HasMaxLength(20)
                .HasColumnName("compare_operator");
            entity.Property(e => e.CompareValue).HasColumnName("compare_value");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FieldType)
                .HasMaxLength(20)
                .HasColumnName("field_type");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.ParentCompareOperator)
                .HasMaxLength(20)
                .HasColumnName("parent_compare_operator");
            entity.Property(e => e.ParentCompareValue).HasColumnName("parent_compare_value");
            entity.Property(e => e.ParentFieldType)
                .HasMaxLength(20)
                .HasColumnName("parent_field_type");
            entity.Property(e => e.ParentTableFieldId).HasColumnName("parent_table_field_id");
            entity.Property(e => e.SysDataviewFieldId).HasColumnName("sys_dataview_field_id");
            entity.Property(e => e.SysPermissionId).HasColumnName("sys_permission_id");
            entity.Property(e => e.SysTableFieldId).HasColumnName("sys_table_field_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysPermissionFieldCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spf_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysPermissionFieldModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_spf_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysPermissionFieldOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spf_owned");

            entity.HasOne(d => d.ParentTableField).WithMany(p => p.SysPermissionFieldParentTableFields)
                .HasForeignKey(d => d.ParentTableFieldId)
                .HasConstraintName("fk_spf_stf");

            entity.HasOne(d => d.SysPermission).WithMany(p => p.SysPermissionFields)
                .HasForeignKey(d => d.SysPermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spf_sp");

            entity.HasOne(d => d.SysTableField).WithMany(p => p.SysPermissionFieldSysTableFields)
                .HasForeignKey(d => d.SysTableFieldId)
                .HasConstraintName("fk_sp_stf");
        });

        modelBuilder.Entity<SysPermissionLang>(entity =>
        {
            entity.ToTable("sys_permission_lang");

            entity.HasIndex(e => new { e.SysPermissionId, e.SysLangId }, "ndx_uniq_spl").IsUnique();

            entity.Property(e => e.SysPermissionLangId).HasColumnName("sys_permission_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.SysPermissionId).HasColumnName("sys_permission_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysPermissionLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_spl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysPermissionLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("ndx_fk_spl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysPermissionLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ndx_fk_spl_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SysPermissionLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spl_sl");

            entity.HasOne(d => d.SysPermission).WithMany(p => p.SysPermissionLangs)
                .HasForeignKey(d => d.SysPermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spl_sp");
        });

        modelBuilder.Entity<SysTable>(entity =>
        {
            entity.ToTable("sys_table");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_st_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_st_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_st_owned");

            entity.HasIndex(e => e.TableName, "ndx_uniq_st").IsUnique();

            entity.Property(e => e.SysTableId).HasColumnName("sys_table_id");
            entity.Property(e => e.AuditsCreated)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("audits_created");
            entity.Property(e => e.AuditsModified)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("audits_modified");
            entity.Property(e => e.AuditsOwned)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("audits_owned");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DatabaseAreaCode)
                .HasMaxLength(100)
                .HasColumnName("database_area_code");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.IsReadonly)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_readonly");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("table_name");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysTableCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_st_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysTableModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_st_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysTableOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_st_owned");
        });

        modelBuilder.Entity<SysTableField>(entity =>
        {
            entity.ToTable("sys_table_field");

            entity.HasIndex(e => e.GroupName, "ndx_fk_stf_cdgrp");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_stf_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_stf_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_stf_owned");

            entity.HasIndex(e => e.SysTableId, "ndx_fk_stf_st");

            entity.HasIndex(e => new { e.SysTableId, e.FieldName }, "ndx_uniq_stf").IsUnique();

            entity.Property(e => e.SysTableFieldId).HasColumnName("sys_table_field_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(50)
                .HasColumnName("default_value");
            entity.Property(e => e.FieldName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("field_name");
            entity.Property(e => e.FieldOrdinal).HasColumnName("field_ordinal");
            entity.Property(e => e.FieldPurpose)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("field_purpose");
            entity.Property(e => e.FieldType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("field_type");
            entity.Property(e => e.ForeignKeyDataviewName)
                .HasMaxLength(100)
                .HasColumnName("foreign_key_dataview_name");
            entity.Property(e => e.ForeignKeyTableFieldId).HasColumnName("foreign_key_table_field_id");
            entity.Property(e => e.GroupName)
                .HasMaxLength(100)
                .HasColumnName("group_name");
            entity.Property(e => e.GuiHint)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("gui_hint");
            entity.Property(e => e.IsAutoincrement)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_autoincrement");
            entity.Property(e => e.IsForeignKey)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_foreign_key");
            entity.Property(e => e.IsNullable)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_nullable");
            entity.Property(e => e.IsPrimaryKey)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_primary_key");
            entity.Property(e => e.IsReadonly)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_readonly");
            entity.Property(e => e.MaxLength).HasColumnName("max_length");
            entity.Property(e => e.MinLength).HasColumnName("min_length");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.NumericPrecision).HasColumnName("numeric_precision");
            entity.Property(e => e.NumericScale).HasColumnName("numeric_scale");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysTableId).HasColumnName("sys_table_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysTableFieldCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stf_created");

            entity.HasOne(d => d.ForeignKeyTableField).WithMany(p => p.InverseForeignKeyTableField)
                .HasForeignKey(d => d.ForeignKeyTableFieldId)
                .HasConstraintName("fk_stf_stffk");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysTableFieldModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_stf_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysTableFieldOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stf_owned");

            entity.HasOne(d => d.SysTable).WithMany(p => p.SysTableFields)
                .HasForeignKey(d => d.SysTableId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stf_st");
        });

        modelBuilder.Entity<SysTableFieldLang>(entity =>
        {
            entity.ToTable("sys_table_field_lang");

            entity.HasIndex(e => new { e.SysTableFieldId, e.SysLangId }, "ndk_uniq_stfl").IsUnique();

            entity.Property(e => e.SysTableFieldLangId).HasColumnName("sys_table_field_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.SysTableFieldId).HasColumnName("sys_table_field_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysTableFieldLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stfl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysTableFieldLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_stfl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysTableFieldLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stfl_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SysTableFieldLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stfl_sl");

            entity.HasOne(d => d.SysTableField).WithMany(p => p.SysTableFieldLangs)
                .HasForeignKey(d => d.SysTableFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stfl_stf");
        });

        modelBuilder.Entity<SysTableLang>(entity =>
        {
            entity.ToTable("sys_table_lang");

            entity.HasIndex(e => new { e.SysTableId, e.SysLangId }, "ndx_uniq_stl").IsUnique();

            entity.Property(e => e.SysTableLangId).HasColumnName("sys_table_lang_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.SysTableId).HasColumnName("sys_table_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysTableLangCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stl_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysTableLangModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_stl_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysTableLangOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stl_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.SysTableLangs)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stl_sl");

            entity.HasOne(d => d.SysTable).WithMany(p => p.SysTableLangs)
                .HasForeignKey(d => d.SysTableId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_stl_st");
        });

        modelBuilder.Entity<SysTableRelationship>(entity =>
        {
            entity.ToTable("sys_table_relationship");

            entity.HasIndex(e => new { e.SysTableFieldId, e.RelationshipTypeTag, e.OtherTableFieldId }, "ndx_uniq_str").IsUnique();

            entity.Property(e => e.SysTableRelationshipId).HasColumnName("sys_table_relationship_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OtherTableFieldId).HasColumnName("other_table_field_id");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.RelationshipTypeTag)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("relationship_type_tag");
            entity.Property(e => e.SysTableFieldId).HasColumnName("sys_table_field_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysTableRelationshipCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_str_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysTableRelationshipModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_str_modified");

            entity.HasOne(d => d.OtherTableField).WithMany(p => p.SysTableRelationshipOtherTableFields)
                .HasForeignKey(d => d.OtherTableFieldId)
                .HasConstraintName("fk_str_stf_other");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysTableRelationshipOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_str_owned");

            entity.HasOne(d => d.SysTableField).WithMany(p => p.SysTableRelationshipSysTableFields)
                .HasForeignKey(d => d.SysTableFieldId)
                .HasConstraintName("fk_str_stf");
        });

        modelBuilder.Entity<SysUser>(entity =>
        {
            entity.ToTable("sys_user");

            entity.HasIndex(e => e.CooperatorId, "ndx_fk_su_co");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_su_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_su_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_su_owned");

            entity.HasIndex(e => e.UserName, "ndx_uniq_su_name").IsUnique();

            entity.Property(e => e.SysUserId).HasColumnName("sys_user_id");
            entity.Property(e => e.CooperatorId).HasColumnName("cooperator_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(2000)
                .HasColumnName("password");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("user_name");

            entity.HasOne(d => d.Cooperator).WithMany(p => p.SysUserCooperators)
                .HasForeignKey(d => d.CooperatorId)
                .HasConstraintName("fk_su_co");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysUserCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_su_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysUserModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_su_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysUserOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_su_owned");
        });

        modelBuilder.Entity<SysUserPasswordResetToken>(entity =>
        {
            entity.HasKey(e => e.SysUserPasswordResetTokenId).HasName("PK_sys_user_password_reset");

            entity.ToTable("sys_user_password_reset_token");

            entity.Property(e => e.SysUserPasswordResetTokenId).HasColumnName("sys_user_password_reset_token_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.PasswordResetToken).HasColumnName("password_reset_token");
            entity.Property(e => e.SysUserId).HasColumnName("sys_user_id");
        });

        modelBuilder.Entity<SysUserPermissionMap>(entity =>
        {
            entity.ToTable("sys_user_permission_map");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_sup_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_sup_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_sup_owned");

            entity.HasIndex(e => e.SysPermissionId, "ndx_fk_sup_sp");

            entity.HasIndex(e => e.SysUserId, "ndx_fk_sup_su");

            entity.HasIndex(e => new { e.SysPermissionId, e.SysUserId }, "ndx_uniq_sup").IsUnique();

            entity.Property(e => e.SysUserPermissionMapId).HasColumnName("sys_user_permission_map_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysPermissionId).HasColumnName("sys_permission_id");
            entity.Property(e => e.SysUserId).HasColumnName("sys_user_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SysUserPermissionMapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sup_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SysUserPermissionMapModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_sup_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.SysUserPermissionMapOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sup_owned");

            entity.HasOne(d => d.SysPermission).WithMany(p => p.SysUserPermissionMaps)
                .HasForeignKey(d => d.SysPermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sup_sp");

            entity.HasOne(d => d.SysUser).WithMany(p => p.SysUserPermissionMaps)
                .HasForeignKey(d => d.SysUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sup_su");
        });

        modelBuilder.Entity<TaxonomyFamily>(entity =>
        {
            entity.ToTable("taxonomy_family");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_tf_created");

            entity.HasIndex(e => e.CurrentTaxonomyFamilyId, "ndx_fk_tf_cur_tf");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_tf_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_tf_owned");

            entity.HasIndex(e => e.AlternateName, "ndx_tf_alt_name");

            entity.HasIndex(e => e.FamilyName, "ndx_tf_name");

            entity.HasIndex(e => new { e.FamilyName, e.FamilyAuthority, e.SubfamilyName, e.TribeName, e.SubtribeName }, "ndx_uniq_tf").IsUnique();

            entity.Property(e => e.TaxonomyFamilyId).HasColumnName("taxonomy_family_id");
            entity.Property(e => e.AlternateName)
                .HasMaxLength(25)
                .HasColumnName("alternate_name");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CurrentTaxonomyFamilyId).HasColumnName("current_taxonomy_family_id");
            entity.Property(e => e.FamilyAuthority)
                .HasMaxLength(100)
                .HasColumnName("family_authority");
            entity.Property(e => e.FamilyName)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("family_name");
            entity.Property(e => e.FamilyTypeCode)
                .HasMaxLength(20)
                .HasColumnName("family_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SubfamilyName)
                .HasMaxLength(25)
                .HasColumnName("subfamily_name");
            entity.Property(e => e.SubtribeName)
                .HasMaxLength(25)
                .HasColumnName("subtribe_name");
            entity.Property(e => e.SuprafamilyRankCode)
                .HasMaxLength(20)
                .HasColumnName("suprafamily_rank_code");
            entity.Property(e => e.SuprafamilyRankName)
                .HasMaxLength(100)
                .HasColumnName("suprafamily_rank_name");
            entity.Property(e => e.TaxonomyClassificationId).HasColumnName("taxonomy_classification_id");
            entity.Property(e => e.TribeName)
                .HasMaxLength(25)
                .HasColumnName("tribe_name");
            entity.Property(e => e.TypeTaxonomyGenusId).HasColumnName("type_taxonomy_genus_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TaxonomyFamilyCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tf_created");

            entity.HasOne(d => d.CurrentTaxonomyFamily).WithMany(p => p.InverseCurrentTaxonomyFamily)
                .HasForeignKey(d => d.CurrentTaxonomyFamilyId)
                .HasConstraintName("fk_tf_cur_tf");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TaxonomyFamilyModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_tf_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.TaxonomyFamilyOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tf_owned");

            entity.HasOne(d => d.TypeTaxonomyGenus).WithMany(p => p.TaxonomyFamilies)
                .HasForeignKey(d => d.TypeTaxonomyGenusId)
                .HasConstraintName("fk_tf_tg");
        });

        modelBuilder.Entity<TaxonomyGenu>(entity =>
        {
            entity.HasKey(e => e.TaxonomyGenusId);

            entity.ToTable("taxonomy_genus");

            entity.HasIndex(e => e.CurrentTaxonomyGenusId, "fk_tg_cur_tg");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_tg_created");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_tg_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_tg_owned");

            entity.HasIndex(e => e.TaxonomyFamilyId, "ndx_fk_tg_tf");

            entity.HasIndex(e => e.GenusName, "ndx_tg_name");

            entity.HasIndex(e => new { e.TaxonomyFamilyId, e.GenusName, e.GenusAuthority, e.SubgenusName, e.SectionName, e.SubsectionName, e.SeriesName, e.SubseriesName }, "ndx_uniq_tg").IsUnique();

            entity.Property(e => e.TaxonomyGenusId).HasColumnName("taxonomy_genus_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CurrentTaxonomyGenusId).HasColumnName("current_taxonomy_genus_id");
            entity.Property(e => e.GenusAuthority)
                .HasMaxLength(100)
                .HasColumnName("genus_authority");
            entity.Property(e => e.GenusName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("genus_name");
            entity.Property(e => e.HybridCode)
                .HasMaxLength(20)
                .HasColumnName("hybrid_code");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.QualifyingCode)
                .HasMaxLength(20)
                .HasColumnName("qualifying_code");
            entity.Property(e => e.SectionName)
                .HasMaxLength(30)
                .HasColumnName("section_name");
            entity.Property(e => e.SeriesName)
                .HasMaxLength(30)
                .HasColumnName("series_name");
            entity.Property(e => e.SubgenusName)
                .HasMaxLength(30)
                .HasColumnName("subgenus_name");
            entity.Property(e => e.SubsectionName)
                .HasMaxLength(30)
                .HasColumnName("subsection_name");
            entity.Property(e => e.SubseriesName)
                .HasMaxLength(30)
                .HasColumnName("subseries_name");
            entity.Property(e => e.TaxonomyFamilyId).HasColumnName("taxonomy_family_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TaxonomyGenuCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tg_created");

            entity.HasOne(d => d.CurrentTaxonomyGenus).WithMany(p => p.InverseCurrentTaxonomyGenus)
                .HasForeignKey(d => d.CurrentTaxonomyGenusId)
                .HasConstraintName("fk_tg_cur_tgt");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TaxonomyGenuModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_tg_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.TaxonomyGenuOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tg_owned");

            entity.HasOne(d => d.TaxonomyFamily).WithMany(p => p.TaxonomyGenus)
                .HasForeignKey(d => d.TaxonomyFamilyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tg_tf");
        });

        modelBuilder.Entity<TaxonomySpecy>(entity =>
        {
            entity.HasKey(e => e.TaxonomySpeciesId);

            entity.ToTable("taxonomy_species");

            entity.HasIndex(e => e.VerifierCooperatorId, "ndx_fk_ts_c");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_ts_created");

            entity.HasIndex(e => e.CurrentTaxonomySpeciesId, "ndx_fk_ts_cur_t");

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_ts_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_ts_owned");

            entity.HasIndex(e => e.Priority1SiteId, "ndx_fk_ts_s");

            entity.HasIndex(e => e.Priority2SiteId, "ndx_fk_ts_s2");

            entity.HasIndex(e => e.TaxonomyGenusId, "ndx_fk_ts_tg");

            entity.HasIndex(e => e.Name, "ndx_ts_name");

            entity.HasIndex(e => e.NomenNumber, "ndx_ts_nomen");

            entity.HasIndex(e => e.SpeciesName, "ndx_ts_s_name");

            entity.HasIndex(e => new { e.TaxonomyGenusId, e.Name, e.NameAuthority, e.Protologue, e.SynonymCode }, "ndx_uniq_ts").IsUnique();

            entity.Property(e => e.TaxonomySpeciesId).HasColumnName("taxonomy_species_id");
            entity.Property(e => e.AlternateName)
                .HasMaxLength(2000)
                .HasColumnName("alternate_name");
            entity.Property(e => e.CommonFertilizationCode)
                .HasMaxLength(20)
                .HasColumnName("common_fertilization_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Curator1CooperatorId).HasColumnName("curator1_cooperator_id");
            entity.Property(e => e.Curator2CooperatorId).HasColumnName("curator2_cooperator_id");
            entity.Property(e => e.CurrentTaxonomySpeciesId).HasColumnName("current_taxonomy_species_id");
            entity.Property(e => e.FormaAuthority)
                .HasMaxLength(100)
                .HasColumnName("forma_authority");
            entity.Property(e => e.FormaName)
                .HasMaxLength(30)
                .HasColumnName("forma_name");
            entity.Property(e => e.FormaRankType)
                .HasMaxLength(30)
                .HasColumnName("forma_rank_type");
            entity.Property(e => e.HybridParentage)
                .HasMaxLength(500)
                .HasColumnName("hybrid_parentage");
            entity.Property(e => e.IsFormaHybrid)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_forma_hybrid");
            entity.Property(e => e.IsNamePending)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_name_pending");
            entity.Property(e => e.IsSpecificHybrid)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_specific_hybrid");
            entity.Property(e => e.IsSubspecificHybrid)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_subspecific_hybrid");
            entity.Property(e => e.IsSubvarietalHybrid)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_subvarietal_hybrid");
            entity.Property(e => e.IsVarietalHybrid)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_varietal_hybrid");
            entity.Property(e => e.IsWebVisible)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_web_visible");
            entity.Property(e => e.LifeFormCode)
                .HasMaxLength(20)
                .HasColumnName("life_form_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.NameAuthority)
                .HasMaxLength(100)
                .HasColumnName("name_authority");
            entity.Property(e => e.NameVerifiedDate).HasColumnName("name_verified_date");
            entity.Property(e => e.NomenNumber).HasColumnName("nomen_number");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Priority1SiteId).HasColumnName("priority1_site_id");
            entity.Property(e => e.Priority2SiteId).HasColumnName("priority2_site_id");
            entity.Property(e => e.Protologue)
                .HasMaxLength(500)
                .HasColumnName("protologue");
            entity.Property(e => e.ProtologueVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("protologue_virtual_path");
            entity.Property(e => e.RestrictionCode)
                .HasMaxLength(20)
                .HasColumnName("restriction_code");
            entity.Property(e => e.SiteNote).HasColumnName("site_note");
            entity.Property(e => e.SpeciesAuthority)
                .HasMaxLength(100)
                .HasColumnName("species_authority");
            entity.Property(e => e.SpeciesName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("species_name");
            entity.Property(e => e.SubspeciesAuthority)
                .HasMaxLength(100)
                .HasColumnName("subspecies_authority");
            entity.Property(e => e.SubspeciesName)
                .HasMaxLength(30)
                .HasColumnName("subspecies_name");
            entity.Property(e => e.SubvarietyAuthority)
                .HasMaxLength(100)
                .HasColumnName("subvariety_authority");
            entity.Property(e => e.SubvarietyName)
                .HasMaxLength(30)
                .HasColumnName("subvariety_name");
            entity.Property(e => e.SynonymCode)
                .HasMaxLength(20)
                .HasColumnName("synonym_code");
            entity.Property(e => e.TaxonomyGenusId).HasColumnName("taxonomy_genus_id");
            entity.Property(e => e.VarietyAuthority)
                .HasMaxLength(100)
                .HasColumnName("variety_authority");
            entity.Property(e => e.VarietyName)
                .HasMaxLength(30)
                .HasColumnName("variety_name");
            entity.Property(e => e.VerifierCooperatorId).HasColumnName("verifier_cooperator_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TaxonomySpecyCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ts_created");

            entity.HasOne(d => d.Curator1Cooperator).WithMany(p => p.TaxonomySpecyCurator1Cooperators)
                .HasForeignKey(d => d.Curator1CooperatorId)
                .HasConstraintName("fk_ts_curator1");

            entity.HasOne(d => d.Curator2Cooperator).WithMany(p => p.TaxonomySpecyCurator2Cooperators)
                .HasForeignKey(d => d.Curator2CooperatorId)
                .HasConstraintName("fk_ts_curator2");

            entity.HasOne(d => d.CurrentTaxonomySpecies).WithMany(p => p.InverseCurrentTaxonomySpecies)
                .HasForeignKey(d => d.CurrentTaxonomySpeciesId)
                .HasConstraintName("FK_taxonomy_species_taxonomy_species");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TaxonomySpecyModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_ts_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.TaxonomySpecyOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ts_owned");

            entity.HasOne(d => d.Priority1Site).WithMany(p => p.TaxonomySpecyPriority1Sites)
                .HasForeignKey(d => d.Priority1SiteId)
                .HasConstraintName("fk_ts_s");

            entity.HasOne(d => d.Priority2Site).WithMany(p => p.TaxonomySpecyPriority2Sites)
                .HasForeignKey(d => d.Priority2SiteId)
                .HasConstraintName("fk_ts_s2");

            entity.HasOne(d => d.TaxonomyGenus).WithMany(p => p.TaxonomySpecies)
                .HasForeignKey(d => d.TaxonomyGenusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ts_tg");

            entity.HasOne(d => d.VerifierCooperator).WithMany(p => p.TaxonomySpecyVerifierCooperators)
                .HasForeignKey(d => d.VerifierCooperatorId)
                .HasConstraintName("fk_ts_c");
        });

        modelBuilder.Entity<W6SiteInventory>(entity =>
        {
            entity.ToTable("w6_site_inventory");

            entity.HasIndex(e => e.SplitInventoryId, "ndx_fk_w6ivsi_i");

            entity.HasIndex(e => e.CreatedBy, "ndx_fk_w6si_created");

            entity.HasIndex(e => e.InventoryId, "ndx_fk_w6si_i").IsUnique();

            entity.HasIndex(e => e.ModifiedBy, "ndx_fk_w6si_modified");

            entity.HasIndex(e => e.OwnedBy, "ndx_fk_w6si_owned");

            entity.Property(e => e.W6SiteInventoryId).HasColumnName("w6_site_inventory_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.HundredWeight)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("hundred_weight");
            entity.Property(e => e.IncreaseLocation)
                .HasMaxLength(20)
                .HasColumnName("increase_location");
            entity.Property(e => e.IncreaseYear)
                .HasMaxLength(4)
                .HasColumnName("increase_year");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.LotTypeCode)
                .HasMaxLength(20)
                .HasColumnName("lot_type_code");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note)
                .HasMaxLength(240)
                .HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Plot)
                .HasMaxLength(30)
                .HasColumnName("plot");
            entity.Property(e => e.PollenEnvironment)
                .HasMaxLength(20)
                .HasColumnName("pollen_environment");
            entity.Property(e => e.PollenProcedureCode)
                .HasMaxLength(20)
                .HasColumnName("pollen_procedure_code");
            entity.Property(e => e.PollenVectorCode)
                .HasMaxLength(20)
                .HasColumnName("pollen_vector_code");
            entity.Property(e => e.SeedAge)
                .HasMaxLength(20)
                .HasColumnName("seed_age");
            entity.Property(e => e.SeedQuantity).HasColumnName("seed_quantity");
            entity.Property(e => e.SplitInventoryId).HasColumnName("split_inventory_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.W6SiteInventoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_w6si_created");

            entity.HasOne(d => d.Inventory).WithOne(p => p.W6SiteInventoryInventory)
                .HasForeignKey<W6SiteInventory>(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_w6si_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.W6SiteInventoryModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_w6si_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.W6SiteInventoryOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_w6si_owned");

            entity.HasOne(d => d.SplitInventory).WithMany(p => p.W6SiteInventorySplitInventories)
                .HasForeignKey(d => d.SplitInventoryId)
                .HasConstraintName("fk_w6ivsi_i");
        });

        modelBuilder.Entity<WebCooperator>(entity =>
        {
            entity.ToTable("web_cooperator");

            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .HasColumnName("address_line1");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .HasColumnName("address_line2");
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .HasColumnName("address_line3");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(4)
                .HasColumnName("category_code");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .HasColumnName("city");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Discipline)
                .HasMaxLength(50)
                .HasColumnName("discipline");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(30)
                .HasColumnName("fax");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.Initials)
                .HasMaxLength(10)
                .HasColumnName("initials");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_active");
            entity.Property(e => e.Job)
                .HasMaxLength(100)
                .HasColumnName("job");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .HasColumnName("organization");
            entity.Property(e => e.OrganizationCode)
                .HasMaxLength(10)
                .HasColumnName("organization_code");
            entity.Property(e => e.OrganizationRegion)
                .HasMaxLength(20)
                .HasColumnName("organization_region");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PostalIndex)
                .HasMaxLength(100)
                .HasColumnName("postal_index");
            entity.Property(e => e.PrimaryPhone)
                .HasMaxLength(30)
                .HasColumnName("primary_phone");
            entity.Property(e => e.SecondaryPhone)
                .HasMaxLength(30)
                .HasColumnName("secondary_phone");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.Title)
                .HasMaxLength(10)
                .HasColumnName("title");
            entity.Property(e => e.VettedStatusCode)
                .HasMaxLength(20)
                .HasColumnName("vetted_status_code");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebCooperatorCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wc_created");

            entity.HasOne(d => d.Geography).WithMany(p => p.WebCooperators)
                .HasForeignKey(d => d.GeographyId)
                .HasConstraintName("fk_wc_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebCooperatorModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wc_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebCooperatorOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wc_owned");
        });

        modelBuilder.Entity<WebHelp>(entity =>
        {
            entity.ToTable("web_help");

            entity.Property(e => e.WebHelpId).HasColumnName("web_help_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Heading)
                .HasMaxLength(50)
                .HasColumnName("heading");
            entity.Property(e => e.HelpTextHtml).HasColumnName("help_text_html");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .HasMaxLength(255)
                .HasColumnName("virtual_path");
            entity.Property(e => e.WebHelpTag)
                .HasMaxLength(100)
                .HasColumnName("web_help_tag");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebHelpCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wh_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebHelpModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wh_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebHelpOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wh_owned");

            entity.HasOne(d => d.SysLang).WithMany(p => p.WebHelps)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wh_sl");
        });

        modelBuilder.Entity<WebOrderRequest>(entity =>
        {
            entity.ToTable("web_order_request");

            entity.HasIndex(e => e.StatusCode, "ndx-status-code");

            entity.HasIndex(e => new { e.WebCooperatorId, e.OrderedDate }, "ndx_uniq_wor").IsUnique();

            entity.Property(e => e.WebOrderRequestId).HasColumnName("web_order_request_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EmailSent)
                .HasDefaultValue(false)
                .HasColumnName("email_sent");
            entity.Property(e => e.IntendedUseCode)
                .HasMaxLength(20)
                .HasColumnName("intended_use_code");
            entity.Property(e => e.IntendedUseNote).HasColumnName("intended_use_note");
            entity.Property(e => e.IsLocked)
                .HasDefaultValue(false)
                .HasColumnName("is_locked");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderedDate).HasColumnName("ordered_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.SpecialInstruction).HasColumnName("special_instruction");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebOrderRequestCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wor_created");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebOrderRequestOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wor_owned");

            entity.HasOne(d => d.WebCooperator).WithMany(p => p.WebOrderRequests)
                .HasForeignKey(d => d.WebCooperatorId)
                .HasConstraintName("fk_wor_wc");
        });

        modelBuilder.Entity<WebOrderRequestAction>(entity =>
        {
            entity.ToTable("web_order_request_action");

            entity.HasIndex(e => new { e.WebOrderRequestId, e.WebCooperatorId, e.ActedDate }, "ndx_uniq_wora").IsUnique();

            entity.Property(e => e.WebOrderRequestActionId).HasColumnName("web_order_request_action_id");
            entity.Property(e => e.ActedDate).HasColumnName("acted_date");
            entity.Property(e => e.ActionCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("action_code");
            entity.Property(e => e.ActionForId).HasColumnName("action_for_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");
            entity.Property(e => e.WebOrderRequestId).HasColumnName("web_order_request_id");

            entity.HasOne(d => d.WebOrderRequest).WithMany(p => p.WebOrderRequestActions)
                .HasForeignKey(d => d.WebOrderRequestId)
                .HasConstraintName("fk_wora_wor");
        });

        modelBuilder.Entity<WebOrderRequestAddress>(entity =>
        {
            entity.ToTable("web_order_request_address");

            entity.Property(e => e.WebOrderRequestAddressId).HasColumnName("web_order_request_address_id");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .HasColumnName("address_line1");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .HasColumnName("address_line2");
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .HasColumnName("address_line3");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("carrier");
            entity.Property(e => e.CarrierAccount)
                .HasMaxLength(50)
                .HasColumnName("carrier_account");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .HasColumnName("city");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PostalIndex)
                .HasMaxLength(100)
                .HasColumnName("postal_index");
            entity.Property(e => e.WebOrderRequestId).HasColumnName("web_order_request_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebOrderRequestAddressCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_worad_created");

            entity.HasOne(d => d.Geography).WithMany(p => p.WebOrderRequestAddresses)
                .HasForeignKey(d => d.GeographyId)
                .HasConstraintName("fk_worad_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebOrderRequestAddressModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wurad_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebOrderRequestAddressOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_worad_owned");

            entity.HasOne(d => d.WebOrderRequest).WithMany(p => p.WebOrderRequestAddresses)
                .HasForeignKey(d => d.WebOrderRequestId)
                .HasConstraintName("fk_worad_wor");
        });

        modelBuilder.Entity<WebOrderRequestAttach>(entity =>
        {
            entity.ToTable("web_order_request_attach");

            entity.HasIndex(e => e.VirtualPath, "ndx_uniq_worat").IsUnique();

            entity.Property(e => e.WebOrderRequestAttachId).HasColumnName("web_order_request_attach_id");
            entity.Property(e => e.ContentType)
                .HasMaxLength(100)
                .HasColumnName("content_type");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.VirtualPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("virtual_path");
            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");
            entity.Property(e => e.WebOrderRequestId).HasColumnName("web_order_request_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebOrderRequestAttachCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_worat_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebOrderRequestAttachModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_worat_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebOrderRequestAttachOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_worat_owned");

            entity.HasOne(d => d.WebCooperator).WithMany(p => p.WebOrderRequestAttaches)
                .HasForeignKey(d => d.WebCooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_worat_wc");

            entity.HasOne(d => d.WebOrderRequest).WithMany(p => p.WebOrderRequestAttaches)
                .HasForeignKey(d => d.WebOrderRequestId)
                .HasConstraintName("fk_worat_wor");
        });

        modelBuilder.Entity<WebOrderRequestItem>(entity =>
        {
            entity.ToTable("web_order_request_item", tb => tb.HasTrigger("tr_scan_web_order_items"));

            entity.HasIndex(e => new { e.WebOrderRequestId, e.SequenceNumber }, "ndx_uniq_wori").IsUnique();

            entity.Property(e => e.WebOrderRequestItemId).HasColumnName("web_order_request_item_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.CuratorNote).HasColumnName("curator_note");
            entity.Property(e => e.DistributionFormCode)
                .HasMaxLength(20)
                .HasColumnName("distribution_form_code");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.IsSmtaRestricted)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("N")
                .HasColumnName("is_smta_restricted");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.QuantityShipped)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("quantity_shipped");
            entity.Property(e => e.SequenceNumber).HasColumnName("sequence_number");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(20)
                .HasColumnName("status_code");
            entity.Property(e => e.UnitOfShippedCode)
                .HasMaxLength(20)
                .HasColumnName("unit_of_shipped_code");
            entity.Property(e => e.UserNote).HasColumnName("user_note");
            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");
            entity.Property(e => e.WebOrderRequestId).HasColumnName("web_order_request_id");

            entity.HasOne(d => d.Accession).WithMany(p => p.WebOrderRequestItems)
                .HasForeignKey(d => d.AccessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wori_a");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebOrderRequestItemCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wori_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.WebOrderRequestItems)
                .HasForeignKey(d => d.InventoryId)
                .HasConstraintName("fk_wori_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebOrderRequestItemModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wori_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebOrderRequestItemOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wori_owned");

            entity.HasOne(d => d.WebCooperator).WithMany(p => p.WebOrderRequestItems)
                .HasForeignKey(d => d.WebCooperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wori_wc");

            entity.HasOne(d => d.WebOrderRequest).WithMany(p => p.WebOrderRequestItems)
                .HasForeignKey(d => d.WebOrderRequestId)
                .HasConstraintName("fk_wori_wor");
        });

        modelBuilder.Entity<WebUser>(entity =>
        {
            entity.ToTable("web_user");

            entity.HasIndex(e => e.UserName, "ndx_uniq_wu").IsUnique();

            entity.Property(e => e.WebUserId).HasColumnName("web_user_id");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.IsEnabled)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("is_enabled");
            entity.Property(e => e.LastLoginDate).HasColumnName("last_login_date");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.SysLangId).HasColumnName("sys_lang_id");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("user_name");
            entity.Property(e => e.WebCooperatorId).HasColumnName("web_cooperator_id");

            entity.HasOne(d => d.SysLang).WithMany(p => p.WebUsers)
                .HasForeignKey(d => d.SysLangId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wu_sl");

            entity.HasOne(d => d.WebCooperator).WithMany(p => p.WebUsers)
                .HasForeignKey(d => d.WebCooperatorId)
                .HasConstraintName("fk_wu_wc");
        });

        modelBuilder.Entity<WebUserCart>(entity =>
        {
            entity.ToTable("web_user_cart");

            entity.HasIndex(e => new { e.WebUserId, e.CartTypeCode }, "ndx_uniq_wuc").IsUnique();

            entity.Property(e => e.WebUserCartId).HasColumnName("web_user_cart_id");
            entity.Property(e => e.CartTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("cart_type_code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.WebUserId).HasColumnName("web_user_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebUserCartCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuc_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebUserCartModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wuc_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebUserCartOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuc_owned");

            entity.HasOne(d => d.WebUser).WithMany(p => p.WebUserCartWebUsers)
                .HasForeignKey(d => d.WebUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuc_wu");
        });

        modelBuilder.Entity<WebUserCartItem>(entity =>
        {
            entity.ToTable("web_user_cart_item");

            entity.HasIndex(e => new { e.WebUserCartId, e.AccessionId, e.FormTypeCode, e.InventoryId }, "ndx_uniq_wuci").IsUnique();

            entity.Property(e => e.WebUserCartItemId).HasColumnName("web_user_cart_item_id");
            entity.Property(e => e.AccessionId).HasColumnName("accession_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.FormTypeCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("form_type_code");
            entity.Property(e => e.InventoryId).HasColumnName("inventory_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.UsageCode)
                .HasMaxLength(20)
                .HasColumnName("usage_code");
            entity.Property(e => e.WebUserCartId).HasColumnName("web_user_cart_id");

            entity.HasOne(d => d.Accession).WithMany(p => p.WebUserCartItems)
                .HasForeignKey(d => d.AccessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuci_a");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebUserCartItemCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuci_created");

            entity.HasOne(d => d.Inventory).WithMany(p => p.WebUserCartItems)
                .HasForeignKey(d => d.InventoryId)
                .HasConstraintName("fk_wuci_i");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebUserCartItemModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wuci_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebUserCartItemOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuci_owned");

            entity.HasOne(d => d.WebUserCart).WithMany(p => p.WebUserCartItems)
                .HasForeignKey(d => d.WebUserCartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wuci_wuc");
        });

        modelBuilder.Entity<WebUserPreference>(entity =>
        {
            entity.ToTable("web_user_preference");

            entity.HasIndex(e => new { e.WebUserId, e.PreferenceName }, "ndx_uniq_wup").IsUnique();

            entity.Property(e => e.WebUserPreferenceId).HasColumnName("web_user_preference_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PreferenceName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("preference_name");
            entity.Property(e => e.PreferenceValue)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("preference_value");
            entity.Property(e => e.WebUserId).HasColumnName("web_user_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebUserPreferenceCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wup_created");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebUserPreferenceModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wup_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebUserPreferenceOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wup_owned");

            entity.HasOne(d => d.WebUser).WithMany(p => p.WebUserPreferenceWebUsers)
                .HasForeignKey(d => d.WebUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wup_wu");
        });

        modelBuilder.Entity<WebUserShippingAddress>(entity =>
        {
            entity.ToTable("web_user_shipping_address");

            entity.HasIndex(e => new { e.WebUserId, e.AddressName }, "ndx_uniq_wusa").IsUnique();

            entity.Property(e => e.WebUserShippingAddressId).HasColumnName("web_user_shipping_address_id");
            entity.Property(e => e.AddressLine1)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("address_line1");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .HasColumnName("address_line2");
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .HasColumnName("address_line3");
            entity.Property(e => e.AddressName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("address_name");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("city");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.GeographyId).HasColumnName("geography_id");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .HasColumnName("is_default");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate).HasColumnName("modified_date");
            entity.Property(e => e.OwnedBy).HasColumnName("owned_by");
            entity.Property(e => e.OwnedDate).HasColumnName("owned_date");
            entity.Property(e => e.PostalIndex)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("postal_index");
            entity.Property(e => e.WebUserId).HasColumnName("web_user_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WebUserShippingAddressCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wusa_created");

            entity.HasOne(d => d.Geography).WithMany(p => p.WebUserShippingAddresses)
                .HasForeignKey(d => d.GeographyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wusa_g");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.WebUserShippingAddressModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("fk_wusa_modified");

            entity.HasOne(d => d.OwnedByNavigation).WithMany(p => p.WebUserShippingAddressOwnedByNavigations)
                .HasForeignKey(d => d.OwnedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wusa_owned");

            entity.HasOne(d => d.WebUser).WithMany(p => p.WebUserShippingAddressWebUsers)
                .HasForeignKey(d => d.WebUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_wusa_wu");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}